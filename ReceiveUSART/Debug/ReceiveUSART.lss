
ReceiveUSART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00004278  0000430c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080008c  0080008c  00004338  2**0
                  ALLOC
  3 .stab         00004950  00000000  00000000  00004338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e98  00000000  00000000  00008c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000ab20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000ac60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000add0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ca19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e6b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e814  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000eaa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f26f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <main>
      8a:	0c 94 3a 21 	jmp	0x4274	; 0x4274 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 21 	jmp	0x423e	; 0x423e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 21 	jmp	0x423e	; 0x423e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 13 21 	jmp	0x4226	; 0x4226 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2f 21 	jmp	0x425e	; 0x425e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_voidInit>:
#include "UART_config.h"
#include "UART_interface.h"
#include "UART_private.h"

void UART_voidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8UCSRCTemp = 0;
     b50:	19 82       	std	Y+1, r1	; 0x01
    #if(TX_CIRCUIT == ENABLE)
        SET_BIT(UCSRB, UCSRB_TXEN);
    #elif(TX_CIRCUIT == DISABLE)
        CLR_BIT(UCSRB, UCSRB_TXEN);
     b52:	aa e2       	ldi	r26, 0x2A	; 42
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ea e2       	ldi	r30, 0x2A	; 42
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	87 7f       	andi	r24, 0xF7	; 247
     b5e:	8c 93       	st	X, r24
    #endif

    #if(RX_CIRCUIT == ENABLE)
        SET_BIT(UCSRB, UCSRB_RXEN);
     b60:	aa e2       	ldi	r26, 0x2A	; 42
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ea e2       	ldi	r30, 0x2A	; 42
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 61       	ori	r24, 0x10	; 16
     b6c:	8c 93       	st	X, r24
        CLR_BIT(Local_u8UCSRCTemp, UCSRA_UCSZ0);
        SET_BIT(Local_u8UCSRCTemp, UCSRA_UCSZ1);
        CLR_BIT(UCSRB, UCSRB_UCSZ2);

    #elif(UART_Character_SIZE == _8_BIT)
        SET_BIT(UBRRH, UBRRH_URSEL);
     b6e:	a0 e4       	ldi	r26, 0x40	; 64
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e0 e4       	ldi	r30, 0x40	; 64
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	80 68       	ori	r24, 0x80	; 128
     b7a:	8c 93       	st	X, r24
        SET_BIT(Local_u8UCSRCTemp, UCSRC_UCSZ0);
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	82 60       	ori	r24, 0x02	; 2
     b80:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp, UCSRC_UCSZ1);
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	84 60       	ori	r24, 0x04	; 4
     b86:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRB, UCSRB_UCSZ2);
     b88:	aa e2       	ldi	r26, 0x2A	; 42
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ea e2       	ldi	r30, 0x2A	; 42
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	8b 7f       	andi	r24, 0xFB	; 251
     b94:	8c 93       	st	X, r24
        SET_BIT(UCSRB, UCSRB_UCSZ2);
    #endif

    /*Parity Mode Select*/
    #if(PARITY_MODE == DISABLE)
        SET_BIT(Local_u8UCSRCTemp, UCSRC_URSEL);
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	80 68       	ori	r24, 0x80	; 128
     b9a:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(Local_u8UCSRCTemp, UCSRC_UPM0);
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	8f 7e       	andi	r24, 0xEF	; 239
     ba0:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(Local_u8UCSRCTemp, UCSRC_UPM1);
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	8f 7d       	andi	r24, 0xDF	; 223
     ba6:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp, UCSRC_UPM1);
    #endif

    /*Stop Bit Select*/
    #if(STOP_BIT_SELECT == _1_BIT)
        SET_BIT(Local_u8UCSRCTemp, UCSRC_URSEL);
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	80 68       	ori	r24, 0x80	; 128
     bac:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(Local_u8UCSRCTemp, UCSRC_USBS);
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	87 7f       	andi	r24, 0xF7	; 247
     bb2:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp, UCSRC_URSEL);
        SET_BIT(Local_u8UCSRCTemp, UCSRC_USBS);
    #endif
    /*USART Mode Select*/
    #if(USART_MODE_SELECT == ASYNCHRONOUS)
        SET_BIT(Local_u8UCSRCTemp, UCSRC_URSEL);
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(Local_u8UCSRCTemp, UCSRC_UMSEL);
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	8f 7b       	andi	r24, 0xBF	; 191
     bbe:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp, UCSRC_UMSEL);
    #endif

    /*Boud Rate Select*/
    #if(BOUD_RATE == BOUD_9600)
        CLR_BIT(UBRRH, UBRRH_URSEL);
     bc0:	a0 e4       	ldi	r26, 0x40	; 64
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e0 e4       	ldi	r30, 0x40	; 64
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	8c 93       	st	X, r24
        UBRRL = 51;
     bce:	e9 e2       	ldi	r30, 0x29	; 41
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	83 e3       	ldi	r24, 0x33	; 51
     bd4:	80 83       	st	Z, r24
        UBRRH = 0;
     bd6:	e0 e4       	ldi	r30, 0x40	; 64
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	10 82       	st	Z, r1

    /*Transmission Speed*/
    #if(TRANSMISSION_SPEED == DOUBLE_SPEED)
        SET_BIT(UCSRA, UCSRA_U2X);
    #elif(TRANSMISSION_SPEED == NO_DOUBLE_SPEED)
        CLR_BIT(UCSRA, UCSRA_U2X);
     bdc:	ab e2       	ldi	r26, 0x2B	; 43
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	eb e2       	ldi	r30, 0x2B	; 43
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8d 7f       	andi	r24, 0xFD	; 253
     be8:	8c 93       	st	X, r24
    #endif
    UCSRC = Local_u8UCSRCTemp;
     bea:	e0 e4       	ldi	r30, 0x40	; 64
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	80 83       	st	Z, r24
}
     bf2:	0f 90       	pop	r0
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <UART_TransmitData>:

u8 TransmitedData = 0;
void UART_TransmitData(u16 Copy_u8Data)
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <UART_TransmitData+0x6>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	9a 83       	std	Y+2, r25	; 0x02
     c06:	89 83       	std	Y+1, r24	; 0x01
    while(GET_BIT(UCSRA, UCSRA_UDRE) == 0);
     c08:	eb e2       	ldi	r30, 0x2B	; 43
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	82 95       	swap	r24
     c10:	86 95       	lsr	r24
     c12:	87 70       	andi	r24, 0x07	; 7
     c14:	88 2f       	mov	r24, r24
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	81 70       	andi	r24, 0x01	; 1
     c1a:	90 70       	andi	r25, 0x00	; 0
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	a1 f3       	breq	.-24     	; 0xc08 <UART_TransmitData+0xe>
    UDR = Copy_u8Data;
     c20:	ec e2       	ldi	r30, 0x2C	; 44
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	80 83       	st	Z, r24
    while (GET_BIT(UCSRA, UCSRA_TXC) == 0);
     c28:	eb e2       	ldi	r30, 0x2B	; 43
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	82 95       	swap	r24
     c30:	86 95       	lsr	r24
     c32:	86 95       	lsr	r24
     c34:	83 70       	andi	r24, 0x03	; 3
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	81 70       	andi	r24, 0x01	; 1
     c3c:	90 70       	andi	r25, 0x00	; 0
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	99 f3       	breq	.-26     	; 0xc28 <UART_TransmitData+0x2e>
    SET_BIT(UCSRA, UCSRA_TXC);
     c42:	ab e2       	ldi	r26, 0x2B	; 43
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	eb e2       	ldi	r30, 0x2B	; 43
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	80 64       	ori	r24, 0x40	; 64
     c4e:	8c 93       	st	X, r24
}
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <UART_voidReceiveDataSynchronous>:

void UART_voidReceiveDataSynchronous(u8 * Ref_pu8ReceivedData)
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <UART_voidReceiveDataSynchronous+0x6>
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
    while (GET_BIT(UCSRA, UCSRA_RXC) == 0);
     c68:	eb e2       	ldi	r30, 0x2B	; 43
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	88 23       	and	r24, r24
     c70:	dc f7       	brge	.-10     	; 0xc68 <UART_voidReceiveDataSynchronous+0xe>
    *Ref_pu8ReceivedData = UDR;
     c72:	ec e2       	ldi	r30, 0x2C	; 44
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	e9 81       	ldd	r30, Y+1	; 0x01
     c7a:	fa 81       	ldd	r31, Y+2	; 0x02
     c7c:	80 83       	st	Z, r24
    
}
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <UART_voidReceiveStringSynchronous>:

void UART_voidReceiveStringSynchronous(u8 * Ref_pu8ReceivedData)
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <UART_voidReceiveStringSynchronous+0x6>
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	04 c0       	rjmp	.+8      	; 0xca0 <UART_voidReceiveStringSynchronous+0x18>
	while(Ref_pu8ReceivedData != NULL_TERMINATOR)
	{
		UART_voidReceiveDataSynchronous(&Ref_pu8ReceivedData);
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <UART_voidReceiveDataSynchronous>
    
}

void UART_voidReceiveStringSynchronous(u8 * Ref_pu8ReceivedData)
{
	while(Ref_pu8ReceivedData != NULL_TERMINATOR)
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	9a 81       	ldd	r25, Y+2	; 0x02
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	c1 f7       	brne	.-16     	; 0xc98 <UART_voidReceiveStringSynchronous+0x10>
	{
		UART_voidReceiveDataSynchronous(&Ref_pu8ReceivedData);
	}
}
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <USART_voidSendNumber>:

void USART_voidSendNumber(u32 Copy_u32Number)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	2d 97       	sbiw	r28, 0x0d	; 13
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	9d 87       	std	Y+13, r25	; 0x0d
     cc8:	8c 87       	std	Y+12, r24	; 0x0c
    u8 Local_u8SpllitedNumber[10];
    s8 Local_s8LoopCounter = 0;
     cca:	19 82       	std	Y+1, r1	; 0x01
     ccc:	1f c0       	rjmp	.+62     	; 0xd0c <USART_voidSendNumber+0x5a>
    while (Copy_u32Number != 0)
    {
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	e8 2f       	mov	r30, r24
     cd2:	ff 27       	eor	r31, r31
     cd4:	e7 fd       	sbrc	r30, 7
     cd6:	f0 95       	com	r31
     cd8:	8c 85       	ldd	r24, Y+12	; 0x0c
     cda:	9d 85       	ldd	r25, Y+13	; 0x0d
     cdc:	2a e0       	ldi	r18, 0x0A	; 10
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	b9 01       	movw	r22, r18
     ce2:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodhi4>
     ce6:	28 2f       	mov	r18, r24
     ce8:	ce 01       	movw	r24, r28
     cea:	02 96       	adiw	r24, 0x02	; 2
     cec:	e8 0f       	add	r30, r24
     cee:	f9 1f       	adc	r31, r25
     cf0:	20 83       	st	Z, r18
        Copy_u32Number /= 10;
     cf2:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf4:	9d 85       	ldd	r25, Y+13	; 0x0d
     cf6:	2a e0       	ldi	r18, 0x0A	; 10
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	b9 01       	movw	r22, r18
     cfc:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodhi4>
     d00:	cb 01       	movw	r24, r22
     d02:	9d 87       	std	Y+13, r25	; 0x0d
     d04:	8c 87       	std	Y+12, r24	; 0x0c
        Local_s8LoopCounter++;
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	89 83       	std	Y+1, r24	; 0x01

void USART_voidSendNumber(u32 Copy_u32Number)
{
    u8 Local_u8SpllitedNumber[10];
    s8 Local_s8LoopCounter = 0;
    while (Copy_u32Number != 0)
     d0c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d0e:	9d 85       	ldd	r25, Y+13	; 0x0d
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	e9 f6       	brne	.-70     	; 0xcce <USART_voidSendNumber+0x1c>
    {
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	81 50       	subi	r24, 0x01	; 1
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	13 c0       	rjmp	.+38     	; 0xd42 <USART_voidSendNumber+0x90>
    while (Local_s8LoopCounter >= 0)
    {
        UART_TransmitData(Local_u8SpllitedNumber[Local_s8LoopCounter] + '0');
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	28 2f       	mov	r18, r24
     d20:	33 27       	eor	r19, r19
     d22:	27 fd       	sbrc	r18, 7
     d24:	30 95       	com	r19
     d26:	ce 01       	movw	r24, r28
     d28:	02 96       	adiw	r24, 0x02	; 2
     d2a:	fc 01       	movw	r30, r24
     d2c:	e2 0f       	add	r30, r18
     d2e:	f3 1f       	adc	r31, r19
     d30:	80 81       	ld	r24, Z
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	c0 96       	adiw	r24, 0x30	; 48
     d38:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
        Local_s8LoopCounter--;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	81 50       	subi	r24, 0x01	; 1
     d40:	89 83       	std	Y+1, r24	; 0x01
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
    while (Local_s8LoopCounter >= 0)
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	88 23       	and	r24, r24
     d46:	54 f7       	brge	.-44     	; 0xd1c <USART_voidSendNumber+0x6a>
    {
        UART_TransmitData(Local_u8SpllitedNumber[Local_s8LoopCounter] + '0');
        Local_s8LoopCounter--;
    }  
}
     d48:	2d 96       	adiw	r28, 0x0d	; 13
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <USART_voidSendSrting>:

void USART_voidSendSrting(const u8 * Ref_pu8String)
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <USART_voidSendSrting+0x6>
     d60:	0f 92       	push	r0
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	9b 83       	std	Y+3, r25	; 0x03
     d68:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopCounter = 0;
     d6a:	19 82       	std	Y+1, r1	; 0x01
     d6c:	10 c0       	rjmp	.+32     	; 0xd8e <USART_voidSendSrting+0x34>
	while(Ref_pu8String[Local_u8LoopCounter] != NULL_TERMINATOR)
    {
		UART_TransmitData(Ref_pu8String[Local_u8LoopCounter]);
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	9b 81       	ldd	r25, Y+3	; 0x03
     d78:	fc 01       	movw	r30, r24
     d7a:	e2 0f       	add	r30, r18
     d7c:	f3 1f       	adc	r31, r19
     d7e:	80 81       	ld	r24, Z
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
		Local_u8LoopCounter++;
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	8f 5f       	subi	r24, 0xFF	; 255
     d8c:	89 83       	std	Y+1, r24	; 0x01
}

void USART_voidSendSrting(const u8 * Ref_pu8String)
{
	u8 Local_u8LoopCounter = 0;
	while(Ref_pu8String[Local_u8LoopCounter] != NULL_TERMINATOR)
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	9b 81       	ldd	r25, Y+3	; 0x03
     d98:	fc 01       	movw	r30, r24
     d9a:	e2 0f       	add	r30, r18
     d9c:	f3 1f       	adc	r31, r19
     d9e:	80 81       	ld	r24, Z
     da0:	88 23       	and	r24, r24
     da2:	29 f7       	brne	.-54     	; 0xd6e <USART_voidSendSrting+0x14>
    {
		UART_TransmitData(Ref_pu8String[Local_u8LoopCounter]);
		Local_u8LoopCounter++;
	}
}
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <UART_voidReceiveDataASynchronous>:


void(*UART_NotificationFunction)(u8 *) = NULL_POINTER;
void UART_voidReceiveDataASynchronous(void(*NotificationFunction)(u8 *))
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <UART_voidReceiveDataASynchronous+0x6>
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
    UART_NotificationFunction = NotificationFunction;
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	90 93 8e 00 	sts	0x008E, r25
     dc6:	80 93 8d 00 	sts	0x008D, r24
    SET_BIT(UCSRB, UCSRB_RXCIE);
     dca:	aa e2       	ldi	r26, 0x2A	; 42
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	ea e2       	ldi	r30, 0x2A	; 42
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	80 68       	ori	r24, 0x80	; 128
     dd6:	8c 93       	st	X, r24
}
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <vector_13>:

u8 UART_u8Data = 0;
void vector_13 (void)   __attribute__((signal));
void vector_13 (void)
{
     de2:	1f 92       	push	r1
     de4:	0f 92       	push	r0
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	0f 92       	push	r0
     dea:	11 24       	eor	r1, r1
     dec:	2f 93       	push	r18
     dee:	3f 93       	push	r19
     df0:	4f 93       	push	r20
     df2:	5f 93       	push	r21
     df4:	6f 93       	push	r22
     df6:	7f 93       	push	r23
     df8:	8f 93       	push	r24
     dfa:	9f 93       	push	r25
     dfc:	af 93       	push	r26
     dfe:	bf 93       	push	r27
     e00:	ef 93       	push	r30
     e02:	ff 93       	push	r31
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
    if(UART_NotificationFunction != NULL_POINTER)
     e0c:	80 91 8d 00 	lds	r24, 0x008D
     e10:	90 91 8e 00 	lds	r25, 0x008E
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	61 f0       	breq	.+24     	; 0xe30 <vector_13+0x4e>
    {
    		UART_u8Data = UDR;
     e18:	ec e2       	ldi	r30, 0x2C	; 44
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 93 8f 00 	sts	0x008F, r24
            UART_NotificationFunction(&UART_u8Data);
     e22:	e0 91 8d 00 	lds	r30, 0x008D
     e26:	f0 91 8e 00 	lds	r31, 0x008E
     e2a:	8f e8       	ldi	r24, 0x8F	; 143
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	09 95       	icall
    }
    else
    {

    }
}
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	ff 91       	pop	r31
     e36:	ef 91       	pop	r30
     e38:	bf 91       	pop	r27
     e3a:	af 91       	pop	r26
     e3c:	9f 91       	pop	r25
     e3e:	8f 91       	pop	r24
     e40:	7f 91       	pop	r23
     e42:	6f 91       	pop	r22
     e44:	5f 91       	pop	r21
     e46:	4f 91       	pop	r20
     e48:	3f 91       	pop	r19
     e4a:	2f 91       	pop	r18
     e4c:	0f 90       	pop	r0
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <TIMER_voidTimer0Init>:


         

void TIMER_voidTimer0Init(void)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
            TCCR0 |= TIMER0_SET_OC0_ON_COMPARE_MATCH_MSK;
        #else
            #error "Error!!, Undefined Enter Value";
        #endif
    #elif (TIMER0_MODE == TIMER_FAST_PWM_MODE)
        TCCR0 &= TIMER0_SELECT_MODE_MASK_CLR;
     e5e:	a3 e5       	ldi	r26, 0x53	; 83
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e3 e5       	ldi	r30, 0x53	; 83
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	87 7b       	andi	r24, 0xB7	; 183
     e6a:	8c 93       	st	X, r24
        TCCR0 |= TIMER0_FAST_PWM_MODE_MSK;
     e6c:	a3 e5       	ldi	r26, 0x53	; 83
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e3 e5       	ldi	r30, 0x53	; 83
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	88 64       	ori	r24, 0x48	; 72
     e78:	8c 93       	st	X, r24
        #if (TIMER0_PWM_SUB_MODE == TIMER_NORMAL_PORT)
            TCCR0 &= TIMER0_SUB_MODE_MSK_CLR;
            TCCR0 |= TIMER0_NORMAL_PORT_MSK;
        #elif (TIMER0_PWM_SUB_MODE == TIMER_CLR_ON_COMP_SET_ON_TOP)
            TCCR0 &= TIMER0_SUB_MODE_MSK_CLR;
     e7a:	a3 e5       	ldi	r26, 0x53	; 83
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e3 e5       	ldi	r30, 0x53	; 83
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 7c       	andi	r24, 0xCF	; 207
     e86:	8c 93       	st	X, r24
            TCCR0 |= TIMER0_CLR_ON_COMP_SET_ON_TOP_MSK;
     e88:	a3 e5       	ldi	r26, 0x53	; 83
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e3 e5       	ldi	r30, 0x53	; 83
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 62       	ori	r24, 0x20	; 32
     e94:	8c 93       	st	X, r24


    #endif
        

    TCCR0 &= TIMER_PRESCALER_MASK_CLR;
     e96:	a3 e5       	ldi	r26, 0x53	; 83
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e3 e5       	ldi	r30, 0x53	; 83
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	88 7f       	andi	r24, 0xF8	; 248
     ea2:	8c 93       	st	X, r24
    TCCR0 |= TIMER_COUNTER_PRESCALER_SELECT;
     ea4:	a3 e5       	ldi	r26, 0x53	; 83
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e3 e5       	ldi	r30, 0x53	; 83
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	82 60       	ori	r24, 0x02	; 2
     eb0:	8c 93       	st	X, r24
}
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <TIMER_voidTimer1Init>:


void TIMER_voidTimer1Init(void)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
    TCCR1B &= TIMER_PRESCALER_MASK_CLR;
     ec0:	ae e4       	ldi	r26, 0x4E	; 78
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ee e4       	ldi	r30, 0x4E	; 78
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	88 7f       	andi	r24, 0xF8	; 248
     ecc:	8c 93       	st	X, r24
    TCCR1B |= TIMER_COUNTER_PRESCALER_SELECT;
     ece:	ae e4       	ldi	r26, 0x4E	; 78
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ee e4       	ldi	r30, 0x4E	; 78
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	8c 93       	st	X, r24

    TCCR1A &= TIMER1_SELECT_MODE_MASK_CLR_A;
     edc:	af e4       	ldi	r26, 0x4F	; 79
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	ef e4       	ldi	r30, 0x4F	; 79
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8c 7f       	andi	r24, 0xFC	; 252
     ee8:	8c 93       	st	X, r24
    TCCR1A |= TIMER1_SELECT_MODE_A;
     eea:	af e4       	ldi	r26, 0x4F	; 79
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ef e4       	ldi	r30, 0x4F	; 79
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	82 60       	ori	r24, 0x02	; 2
     ef6:	8c 93       	st	X, r24

    TCCR1B &= TIMER1_SELECT_MODE_MASK_CLR_B;
     ef8:	ae e4       	ldi	r26, 0x4E	; 78
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ee e4       	ldi	r30, 0x4E	; 78
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	87 7e       	andi	r24, 0xE7	; 231
     f04:	8c 93       	st	X, r24
    TCCR1B |= TIMER1_SELECT_MODE_B;
     f06:	ae e4       	ldi	r26, 0x4E	; 78
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ee e4       	ldi	r30, 0x4E	; 78
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	88 61       	ori	r24, 0x18	; 24
     f12:	8c 93       	st	X, r24
        #elif (TIMER1_MODE == TIMER_FAST_PWM_MODE)
            #if (TIMER1_SUB_MODE == TIMER_NORMAL_PORT)
                CLR_BIT(TCCR1A, TCCR1A_COM1A1);
                CLR_BIT(TCCR1A, TCCR1A_COM1A0);
            #elif (TIMER1_SUB_MODE == TIMER_CLR_ON_COMP_SET_ON_TOP)
                SET_BIT(TCCR1A, TCCR1A_COM1A1);
     f14:	af e4       	ldi	r26, 0x4F	; 79
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ef e4       	ldi	r30, 0x4F	; 79
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 68       	ori	r24, 0x80	; 128
     f20:	8c 93       	st	X, r24
                CLR_BIT(TCCR1A, TCCR1A_COM1A0);
     f22:	af e4       	ldi	r26, 0x4F	; 79
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ef e4       	ldi	r30, 0x4F	; 79
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8f 7b       	andi	r24, 0xBF	; 191
     f2e:	8c 93       	st	X, r24
    
    #elif(OC1B_CHANNEL == DISABLE)

    #endif

}
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <TIMER_voidTimer1SetPreloadValue>:

void TIMER_voidTimer1SetPreloadValue(u16 Copy_u16PreloadValue)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <TIMER_voidTimer1SetPreloadValue+0x6>
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Copy_u16PreloadValue;
     f44:	ec e4       	ldi	r30, 0x4C	; 76
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	91 83       	std	Z+1, r25	; 0x01
     f4e:	80 83       	st	Z, r24
}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <TIMER_voidTimer1SetCompareMatchTime>:

void TIMER_voidTimer1SetCompareMatchTime(u16 Copy_u16CompareMatchValue)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <TIMER_voidTimer1SetCompareMatchTime+0x6>
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = Copy_u16CompareMatchValue;
     f68:	ea e4       	ldi	r30, 0x4A	; 74
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	80 83       	st	Z, r24
}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <TIMER_voidTimer1SetCompMatchValueB>:

void TIMER_voidTimer1SetCompMatchValueB(u16 Copy_u16CompareMatchValue)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	00 d0       	rcall	.+0      	; 0xf84 <TIMER_voidTimer1SetCompMatchValueB+0x6>
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = Copy_u16CompareMatchValue;
     f8c:	e8 e4       	ldi	r30, 0x48	; 72
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
}
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <TIMER_voidTimer1SetTopValue>:

void TIMER_voidTimer1SetTopValue(u16 Copy_u16TopValue)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <TIMER_voidTimer1SetTopValue+0x6>
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = Copy_u16TopValue;
     fb0:	e6 e4       	ldi	r30, 0x46	; 70
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	80 83       	st	Z, r24
}
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <TIMER_voiTimer0dSetPreloadValue>:



void TIMER_voiTimer0dSetPreloadValue (u8 Copy_PreloadValue)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	0f 92       	push	r0
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = Copy_PreloadValue;
     fd2:	e2 e5       	ldi	r30, 0x52	; 82
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	80 83       	st	Z, r24
}
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <TIMER_voidTimer0SetCOMatchValue>:

void TIMER_voidTimer0SetCOMatchValue (u8 Copy_COMPValue)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	0f 92       	push	r0
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = Copy_COMPValue;
     fee:	ec e5       	ldi	r30, 0x5C	; 92
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	80 83       	st	Z, r24
}
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <TIMER_GetValueTCNT1>:


u16 TIMER_GetValueTCNT1(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	return(TCNT1);
    1006:	ec e4       	ldi	r30, 0x4C	; 76
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	91 81       	ldd	r25, Z+1	; 0x01
}
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <TIMER_GetValueICR1>:

u16 TIMER_GetValueICR1(void)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	return(ICR1);
    101c:	e6 e4       	ldi	r30, 0x46	; 70
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	91 81       	ldd	r25, Z+1	; 0x01
}
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <TIMER_voidSetBusyWait_COMPMode>:


void TIMER_voidSetBusyWait_COMPMode (u32 Copy_u32Timeout)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <TIMER_voidSetBusyWait_COMPMode+0x6>
    1030:	00 d0       	rcall	.+0      	; 0x1032 <TIMER_voidSetBusyWait_COMPMode+0x8>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <TIMER_voidSetBusyWait_COMPMode+0xa>
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	9e 83       	std	Y+6, r25	; 0x06
    103a:	8d 83       	std	Y+5, r24	; 0x05
    /*TIMER 2*/

    /*Set CTC Mode*/
    TCCR2 &= TIMER0_SELECT_MODE_MASK_CLR;
    103c:	a5 e4       	ldi	r26, 0x45	; 69
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e5 e4       	ldi	r30, 0x45	; 69
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	87 7b       	andi	r24, 0xB7	; 183
    1048:	8c 93       	st	X, r24
    TCCR2 |= TIMER0_CTC_MODE_MSK;
    104a:	a5 e4       	ldi	r26, 0x45	; 69
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e4       	ldi	r30, 0x45	; 69
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	88 60       	ori	r24, 0x08	; 8
    1056:	8c 93       	st	X, r24

    TCCR2 &= TIMER_PRESCALER_MASK_CLR;
    1058:	a5 e4       	ldi	r26, 0x45	; 69
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e5 e4       	ldi	r30, 0x45	; 69
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 7f       	andi	r24, 0xF8	; 248
    1064:	8c 93       	st	X, r24
    TCCR2 |= TIMER_PRESCALER_DIV_BY_64;
    1066:	a5 e4       	ldi	r26, 0x45	; 69
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e5 e4       	ldi	r30, 0x45	; 69
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	83 60       	ori	r24, 0x03	; 3
    1072:	8c 93       	st	X, r24

	OCR2 = 125;
    1074:	ec e5       	ldi	r30, 0x5C	; 92
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	8d e7       	ldi	r24, 0x7D	; 125
    107a:	80 83       	st	Z, r24

    u8 Local_u8TCCR2OldValue = TCCR2;
    107c:	e5 e4       	ldi	r30, 0x45	; 69
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8OCR2OldValue = OCR2;
    1084:	ec e5       	ldi	r30, 0x5C	; 92
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	8b 83       	std	Y+3, r24	; 0x03

    u32 Local_u32TicksToWait = 0;
    108c:	1a 82       	std	Y+2, r1	; 0x02
    108e:	19 82       	std	Y+1, r1	; 0x01
    1090:	17 c0       	rjmp	.+46     	; 0x10c0 <TIMER_voidSetBusyWait_COMPMode+0x96>
    while(Local_u32TicksToWait <= Copy_u32Timeout)
    {
        while(GET_BIT(TIFR, TIFR_OCF2) == 0);
    1092:	e8 e5       	ldi	r30, 0x58	; 88
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	91 81       	ldd	r25, Z+1	; 0x01
    109a:	80 78       	andi	r24, 0x80	; 128
    109c:	90 70       	andi	r25, 0x00	; 0
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	c1 f3       	breq	.-16     	; 0x1092 <TIMER_voidSetBusyWait_COMPMode+0x68>
        SET_BIT(TIFR, TIFR_OCF2);
    10a2:	a8 e5       	ldi	r26, 0x58	; 88
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e8 e5       	ldi	r30, 0x58	; 88
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	91 81       	ldd	r25, Z+1	; 0x01
    10ae:	80 68       	ori	r24, 0x80	; 128
    10b0:	11 96       	adiw	r26, 0x01	; 1
    10b2:	9c 93       	st	X, r25
    10b4:	8e 93       	st	-X, r24
        Local_u32TicksToWait++;
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	9a 83       	std	Y+2, r25	; 0x02
    10be:	89 83       	std	Y+1, r24	; 0x01

    u8 Local_u8TCCR2OldValue = TCCR2;
    u8 Local_u8OCR2OldValue = OCR2;

    u32 Local_u32TicksToWait = 0;
    while(Local_u32TicksToWait <= Copy_u32Timeout)
    10c0:	29 81       	ldd	r18, Y+1	; 0x01
    10c2:	3a 81       	ldd	r19, Y+2	; 0x02
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	82 17       	cp	r24, r18
    10ca:	93 07       	cpc	r25, r19
    10cc:	10 f7       	brcc	.-60     	; 0x1092 <TIMER_voidSetBusyWait_COMPMode+0x68>
        while(GET_BIT(TIFR, TIFR_OCF2) == 0);
        SET_BIT(TIFR, TIFR_OCF2);
        Local_u32TicksToWait++;
    }

    TCCR2 = Local_u8TCCR2OldValue;
    10ce:	e5 e4       	ldi	r30, 0x45	; 69
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	80 83       	st	Z, r24
    OCR2 = Local_u8OCR2OldValue;
    10d6:	ec e5       	ldi	r30, 0x5C	; 92
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	80 83       	st	Z, r24
}
    10de:	26 96       	adiw	r28, 0x06	; 6
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <TIMER_voidTimer0ControlInterrupt>:

void TIMER_voidTimer0ControlInterrupt(u8 Copy_u8InterruptType, u8 Copy_u8Mode)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	28 97       	sbiw	r28, 0x08	; 8
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	6a 83       	std	Y+2, r22	; 0x02
    
    switch (Copy_u8InterruptType)
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	38 87       	std	Y+8, r19	; 0x08
    1110:	2f 83       	std	Y+7, r18	; 0x07
    1112:	8f 81       	ldd	r24, Y+7	; 0x07
    1114:	98 85       	ldd	r25, Y+8	; 0x08
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	31 f0       	breq	.+12     	; 0x1126 <TIMER_voidTimer0ControlInterrupt+0x36>
    111a:	2f 81       	ldd	r18, Y+7	; 0x07
    111c:	38 85       	ldd	r19, Y+8	; 0x08
    111e:	21 30       	cpi	r18, 0x01	; 1
    1120:	31 05       	cpc	r19, r1
    1122:	01 f1       	breq	.+64     	; 0x1164 <TIMER_voidTimer0ControlInterrupt+0x74>
    1124:	3d c0       	rjmp	.+122    	; 0x11a0 <TIMER_voidTimer0ControlInterrupt+0xb0>
    {
    case OVF:
        switch (Copy_u8Mode)
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	3e 83       	std	Y+6, r19	; 0x06
    112e:	2d 83       	std	Y+5, r18	; 0x05
    1130:	8d 81       	ldd	r24, Y+5	; 0x05
    1132:	9e 81       	ldd	r25, Y+6	; 0x06
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	31 f0       	breq	.+12     	; 0x1144 <TIMER_voidTimer0ControlInterrupt+0x54>
    1138:	2d 81       	ldd	r18, Y+5	; 0x05
    113a:	3e 81       	ldd	r19, Y+6	; 0x06
    113c:	21 30       	cpi	r18, 0x01	; 1
    113e:	31 05       	cpc	r19, r1
    1140:	49 f0       	breq	.+18     	; 0x1154 <TIMER_voidTimer0ControlInterrupt+0x64>
    1142:	2e c0       	rjmp	.+92     	; 0x11a0 <TIMER_voidTimer0ControlInterrupt+0xb0>
        {
        case ENABLE:
            SET_BIT(TIMSK, TIMSK_TOIE0);
    1144:	a9 e5       	ldi	r26, 0x59	; 89
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e9 e5       	ldi	r30, 0x59	; 89
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	81 60       	ori	r24, 0x01	; 1
    1150:	8c 93       	st	X, r24
    1152:	26 c0       	rjmp	.+76     	; 0x11a0 <TIMER_voidTimer0ControlInterrupt+0xb0>
            break;
        case DISABLE:
            CLR_BIT(TIMSK, TIMSK_TOIE0);
    1154:	a9 e5       	ldi	r26, 0x59	; 89
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e9 e5       	ldi	r30, 0x59	; 89
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	8e 7f       	andi	r24, 0xFE	; 254
    1160:	8c 93       	st	X, r24
    1162:	1e c0       	rjmp	.+60     	; 0x11a0 <TIMER_voidTimer0ControlInterrupt+0xb0>
        default:
            break;
        }
        break;
    case COMP:
        switch (Copy_u8Mode)
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3c 83       	std	Y+4, r19	; 0x04
    116c:	2b 83       	std	Y+3, r18	; 0x03
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	31 f0       	breq	.+12     	; 0x1182 <TIMER_voidTimer0ControlInterrupt+0x92>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	21 30       	cpi	r18, 0x01	; 1
    117c:	31 05       	cpc	r19, r1
    117e:	49 f0       	breq	.+18     	; 0x1192 <TIMER_voidTimer0ControlInterrupt+0xa2>
    1180:	0f c0       	rjmp	.+30     	; 0x11a0 <TIMER_voidTimer0ControlInterrupt+0xb0>
        {
        case ENABLE:
            SET_BIT(TIMSK, TIMSK_OCIE0);
    1182:	a9 e5       	ldi	r26, 0x59	; 89
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e9 e5       	ldi	r30, 0x59	; 89
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	82 60       	ori	r24, 0x02	; 2
    118e:	8c 93       	st	X, r24
    1190:	07 c0       	rjmp	.+14     	; 0x11a0 <TIMER_voidTimer0ControlInterrupt+0xb0>
            break;
        case DISABLE:
            CLR_BIT(TIMSK, TIMSK_OCIE0);
    1192:	a9 e5       	ldi	r26, 0x59	; 89
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e9 e5       	ldi	r30, 0x59	; 89
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	8d 7f       	andi	r24, 0xFD	; 253
    119e:	8c 93       	st	X, r24

    default:
    break;    
    }
    
}
    11a0:	28 96       	adiw	r28, 0x08	; 8
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <TIMER_voidTimer1ControlInterrupt>:

void TIMER_voidTimer1ControlInterrupt(u8 Copy_u8Cannel, u8 Copy_u8InterruptType, u8 Copy_u8Mode)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	61 97       	sbiw	r28, 0x11	; 17
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	6a 83       	std	Y+2, r22	; 0x02
    11ca:	4b 83       	std	Y+3, r20	; 0x03
    switch (Copy_u8Cannel)
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	39 8b       	std	Y+17, r19	; 0x11
    11d4:	28 8b       	std	Y+16, r18	; 0x10
    11d6:	88 89       	ldd	r24, Y+16	; 0x10
    11d8:	99 89       	ldd	r25, Y+17	; 0x11
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	39 f0       	breq	.+14     	; 0x11ec <TIMER_voidTimer1ControlInterrupt+0x3a>
    11de:	28 89       	ldd	r18, Y+16	; 0x10
    11e0:	39 89       	ldd	r19, Y+17	; 0x11
    11e2:	21 30       	cpi	r18, 0x01	; 1
    11e4:	31 05       	cpc	r19, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <TIMER_voidTimer1ControlInterrupt+0x38>
    11e8:	4e c0       	rjmp	.+156    	; 0x1286 <TIMER_voidTimer1ControlInterrupt+0xd4>
    11ea:	99 c0       	rjmp	.+306    	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
    {
    case OC1A:
        switch (Copy_u8InterruptType)
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3f 87       	std	Y+15, r19	; 0x0f
    11f4:	2e 87       	std	Y+14, r18	; 0x0e
    11f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    11f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	31 f0       	breq	.+12     	; 0x120a <TIMER_voidTimer1ControlInterrupt+0x58>
    11fe:	2e 85       	ldd	r18, Y+14	; 0x0e
    1200:	3f 85       	ldd	r19, Y+15	; 0x0f
    1202:	21 30       	cpi	r18, 0x01	; 1
    1204:	31 05       	cpc	r19, r1
    1206:	01 f1       	breq	.+64     	; 0x1248 <TIMER_voidTimer1ControlInterrupt+0x96>
    1208:	8a c0       	rjmp	.+276    	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
        {
        case OVF:
            switch (Copy_u8Mode)
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3d 87       	std	Y+13, r19	; 0x0d
    1212:	2c 87       	std	Y+12, r18	; 0x0c
    1214:	8c 85       	ldd	r24, Y+12	; 0x0c
    1216:	9d 85       	ldd	r25, Y+13	; 0x0d
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	31 f0       	breq	.+12     	; 0x1228 <TIMER_voidTimer1ControlInterrupt+0x76>
    121c:	2c 85       	ldd	r18, Y+12	; 0x0c
    121e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1220:	21 30       	cpi	r18, 0x01	; 1
    1222:	31 05       	cpc	r19, r1
    1224:	49 f0       	breq	.+18     	; 0x1238 <TIMER_voidTimer1ControlInterrupt+0x86>
    1226:	7b c0       	rjmp	.+246    	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
            {
            case ENABLE:
                SET_BIT(TIMSK, TIMSK_TOIE2);
    1228:	a9 e5       	ldi	r26, 0x59	; 89
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e9 e5       	ldi	r30, 0x59	; 89
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	80 64       	ori	r24, 0x40	; 64
    1234:	8c 93       	st	X, r24
    1236:	73 c0       	rjmp	.+230    	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
            break;
            case DISABLE:
                CLR_BIT(TIMSK, TIMSK_TOIE2);
    1238:	a9 e5       	ldi	r26, 0x59	; 89
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e9 e5       	ldi	r30, 0x59	; 89
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8f 7b       	andi	r24, 0xBF	; 191
    1244:	8c 93       	st	X, r24
    1246:	6b c0       	rjmp	.+214    	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
            break;
            }
        break;
        case COMP:
            switch (Copy_u8Mode)
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3b 87       	std	Y+11, r19	; 0x0b
    1250:	2a 87       	std	Y+10, r18	; 0x0a
    1252:	8a 85       	ldd	r24, Y+10	; 0x0a
    1254:	9b 85       	ldd	r25, Y+11	; 0x0b
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	31 f0       	breq	.+12     	; 0x1266 <TIMER_voidTimer1ControlInterrupt+0xb4>
    125a:	2a 85       	ldd	r18, Y+10	; 0x0a
    125c:	3b 85       	ldd	r19, Y+11	; 0x0b
    125e:	21 30       	cpi	r18, 0x01	; 1
    1260:	31 05       	cpc	r19, r1
    1262:	49 f0       	breq	.+18     	; 0x1276 <TIMER_voidTimer1ControlInterrupt+0xc4>
    1264:	5c c0       	rjmp	.+184    	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
            {
            case ENABLE:
                SET_BIT(TIMSK, TIMSK_OCIE1A);
    1266:	a9 e5       	ldi	r26, 0x59	; 89
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e9 e5       	ldi	r30, 0x59	; 89
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	80 61       	ori	r24, 0x10	; 16
    1272:	8c 93       	st	X, r24
    1274:	54 c0       	rjmp	.+168    	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
            break;
            case DISABLE:
                CLR_BIT(TIMSK, TIMSK_OCIE1A);
    1276:	a9 e5       	ldi	r26, 0x59	; 89
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e9 e5       	ldi	r30, 0x59	; 89
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	8f 7e       	andi	r24, 0xEF	; 239
    1282:	8c 93       	st	X, r24
    1284:	4c c0       	rjmp	.+152    	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
            }
        break;
        }
    break;
    case OC1B:
        switch (Copy_u8InterruptType)
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	39 87       	std	Y+9, r19	; 0x09
    128e:	28 87       	std	Y+8, r18	; 0x08
    1290:	88 85       	ldd	r24, Y+8	; 0x08
    1292:	99 85       	ldd	r25, Y+9	; 0x09
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	31 f0       	breq	.+12     	; 0x12a4 <TIMER_voidTimer1ControlInterrupt+0xf2>
    1298:	28 85       	ldd	r18, Y+8	; 0x08
    129a:	39 85       	ldd	r19, Y+9	; 0x09
    129c:	21 30       	cpi	r18, 0x01	; 1
    129e:	31 05       	cpc	r19, r1
    12a0:	01 f1       	breq	.+64     	; 0x12e2 <TIMER_voidTimer1ControlInterrupt+0x130>
    12a2:	3d c0       	rjmp	.+122    	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
        {
        case OVF:
            switch (Copy_u8Mode)
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3f 83       	std	Y+7, r19	; 0x07
    12ac:	2e 83       	std	Y+6, r18	; 0x06
    12ae:	8e 81       	ldd	r24, Y+6	; 0x06
    12b0:	9f 81       	ldd	r25, Y+7	; 0x07
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	31 f0       	breq	.+12     	; 0x12c2 <TIMER_voidTimer1ControlInterrupt+0x110>
    12b6:	2e 81       	ldd	r18, Y+6	; 0x06
    12b8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ba:	21 30       	cpi	r18, 0x01	; 1
    12bc:	31 05       	cpc	r19, r1
    12be:	49 f0       	breq	.+18     	; 0x12d2 <TIMER_voidTimer1ControlInterrupt+0x120>
    12c0:	2e c0       	rjmp	.+92     	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
            {
            case ENABLE:
                SET_BIT(TIMSK, TIMSK_TOIE2);
    12c2:	a9 e5       	ldi	r26, 0x59	; 89
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e9 e5       	ldi	r30, 0x59	; 89
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	80 64       	ori	r24, 0x40	; 64
    12ce:	8c 93       	st	X, r24
    12d0:	26 c0       	rjmp	.+76     	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
            break;
            case DISABLE:
                CLR_BIT(TIMSK, TIMSK_TOIE2);
    12d2:	a9 e5       	ldi	r26, 0x59	; 89
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e9 e5       	ldi	r30, 0x59	; 89
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	8f 7b       	andi	r24, 0xBF	; 191
    12de:	8c 93       	st	X, r24
    12e0:	1e c0       	rjmp	.+60     	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
            break;
            }
            break;
        case COMP:
            switch (Copy_u8Mode)
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3d 83       	std	Y+5, r19	; 0x05
    12ea:	2c 83       	std	Y+4, r18	; 0x04
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	31 f0       	breq	.+12     	; 0x1300 <TIMER_voidTimer1ControlInterrupt+0x14e>
    12f4:	2c 81       	ldd	r18, Y+4	; 0x04
    12f6:	3d 81       	ldd	r19, Y+5	; 0x05
    12f8:	21 30       	cpi	r18, 0x01	; 1
    12fa:	31 05       	cpc	r19, r1
    12fc:	49 f0       	breq	.+18     	; 0x1310 <TIMER_voidTimer1ControlInterrupt+0x15e>
    12fe:	0f c0       	rjmp	.+30     	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
            {
            case ENABLE:
                SET_BIT(TIMSK, TIMSK_OCIE1A);
    1300:	a9 e5       	ldi	r26, 0x59	; 89
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e9 e5       	ldi	r30, 0x59	; 89
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	80 61       	ori	r24, 0x10	; 16
    130c:	8c 93       	st	X, r24
    130e:	07 c0       	rjmp	.+14     	; 0x131e <TIMER_voidTimer1ControlInterrupt+0x16c>
            break;
            case DISABLE:
                CLR_BIT(TIMSK, TIMSK_OCIE1A);
    1310:	a9 e5       	ldi	r26, 0x59	; 89
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e9 e5       	ldi	r30, 0x59	; 89
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8f 7e       	andi	r24, 0xEF	; 239
    131c:	8c 93       	st	X, r24

    default:
    break;        
    }
    
}
    131e:	61 96       	adiw	r28, 0x11	; 17
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <ICU_voidTimer1ControlInterrupt>:

void ICU_voidTimer1ControlInterrupt(u8 Copy_u8Mode)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <ICU_voidTimer1ControlInterrupt+0x6>
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8Mode)
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3b 83       	std	Y+3, r19	; 0x03
    1346:	2a 83       	std	Y+2, r18	; 0x02
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	9b 81       	ldd	r25, Y+3	; 0x03
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	31 f0       	breq	.+12     	; 0x135c <ICU_voidTimer1ControlInterrupt+0x2c>
    1350:	2a 81       	ldd	r18, Y+2	; 0x02
    1352:	3b 81       	ldd	r19, Y+3	; 0x03
    1354:	21 30       	cpi	r18, 0x01	; 1
    1356:	31 05       	cpc	r19, r1
    1358:	49 f0       	breq	.+18     	; 0x136c <ICU_voidTimer1ControlInterrupt+0x3c>
    135a:	0f c0       	rjmp	.+30     	; 0x137a <ICU_voidTimer1ControlInterrupt+0x4a>
    {
    case ENABLE:
        SET_BIT(TIMSK, TIMSK_TICIE1);
    135c:	a9 e5       	ldi	r26, 0x59	; 89
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e9 e5       	ldi	r30, 0x59	; 89
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	80 62       	ori	r24, 0x20	; 32
    1368:	8c 93       	st	X, r24
    136a:	07 c0       	rjmp	.+14     	; 0x137a <ICU_voidTimer1ControlInterrupt+0x4a>
    break;
    case DISABLE:
        CLR_BIT(TIMSK, TIMSK_TICIE1);
    136c:	a9 e5       	ldi	r26, 0x59	; 89
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e9 e5       	ldi	r30, 0x59	; 89
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8f 7d       	andi	r24, 0xDF	; 223
    1378:	8c 93       	st	X, r24
    break;

    default:
    break;
    }
}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <ICU_voidSenceModetrigger>:

void ICU_voidSenceModetrigger(u8 Copy_u8Mode)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <ICU_voidSenceModetrigger+0x6>
    138c:	0f 92       	push	r0
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8Mode)
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	3b 83       	std	Y+3, r19	; 0x03
    139c:	2a 83       	std	Y+2, r18	; 0x02
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	9b 81       	ldd	r25, Y+3	; 0x03
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <ICU_voidSenceModetrigger+0x2c>
    13a6:	2a 81       	ldd	r18, Y+2	; 0x02
    13a8:	3b 81       	ldd	r19, Y+3	; 0x03
    13aa:	21 30       	cpi	r18, 0x01	; 1
    13ac:	31 05       	cpc	r19, r1
    13ae:	49 f0       	breq	.+18     	; 0x13c2 <ICU_voidSenceModetrigger+0x3c>
    13b0:	0f c0       	rjmp	.+30     	; 0x13d0 <ICU_voidSenceModetrigger+0x4a>
    {
        case RISING_EDGE:
            SET_BIT(TCCR1B, TCCR1B_ICES1);
    13b2:	ae e4       	ldi	r26, 0x4E	; 78
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	ee e4       	ldi	r30, 0x4E	; 78
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	80 64       	ori	r24, 0x40	; 64
    13be:	8c 93       	st	X, r24
    13c0:	07 c0       	rjmp	.+14     	; 0x13d0 <ICU_voidSenceModetrigger+0x4a>
        break;
        case FALLING_EDGE:
            CLR_BIT(TCCR1B, TCCR1B_ICES1);
    13c2:	ae e4       	ldi	r26, 0x4E	; 78
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ee e4       	ldi	r30, 0x4E	; 78
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8f 7b       	andi	r24, 0xBF	; 191
    13ce:	8c 93       	st	X, r24
        break;
    }

}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <TIMER_voidTimer0SetOVFCallBack>:

/* CallBack Timer 0 */
void (* TIMER0_OVFNotification)(void) = NULL_POINTER;
void TIMER_voidTimer0SetOVFCallBack (void (* Notification)(void))
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <TIMER_voidTimer0SetOVFCallBack+0x6>
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	9a 83       	std	Y+2, r25	; 0x02
    13e8:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_OVFNotification = Notification;
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	90 93 91 00 	sts	0x0091, r25
    13f2:	80 93 90 00 	sts	0x0090, r24
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <TIMER_voidTimer0SetCOMPFCallBack>:

void (* TIMER0_COMPNotification)(void) = NULL_POINTER;
void TIMER_voidTimer0SetCOMPFCallBack (void (* Notification)(void))
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <TIMER_voidTimer0SetCOMPFCallBack+0x6>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_COMPNotification = Notification;
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	9a 81       	ldd	r25, Y+2	; 0x02
    1412:	90 93 93 00 	sts	0x0093, r25
    1416:	80 93 92 00 	sts	0x0092, r24
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <TIMER_voidTimer1SetOVFCallBack>:

/* CallBack Timer 1 */
void (* TIMER1_OVFNotification)(void) = NULL_POINTER;
void TIMER_voidTimer1SetOVFCallBack (void (* Notification)(void))
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <TIMER_voidTimer1SetOVFCallBack+0x6>
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	9a 83       	std	Y+2, r25	; 0x02
    1430:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_OVFNotification = Notification;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	9a 81       	ldd	r25, Y+2	; 0x02
    1436:	90 93 95 00 	sts	0x0095, r25
    143a:	80 93 94 00 	sts	0x0094, r24
}
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <TIMER_voidTimer1SetCOMPACallBack>:

void (* TIMER1_COMPANotification)(void) = NULL_POINTER;
void TIMER_voidTimer1SetCOMPACallBack (void (* Notification)(void))
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <TIMER_voidTimer1SetCOMPACallBack+0x6>
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_COMPANotification = Notification;
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	9a 81       	ldd	r25, Y+2	; 0x02
    145a:	90 93 97 00 	sts	0x0097, r25
    145e:	80 93 96 00 	sts	0x0096, r24
}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <TIMER_voidTimer1SetCOMPBCallBack>:

void (* TIMER1_COMPBNotification)(void) = NULL_POINTER;
void TIMER_voidTimer1SetCOMPBCallBack (void (* Notification)(void))
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <TIMER_voidTimer1SetCOMPBCallBack+0x6>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_COMPBNotification = Notification;
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	90 93 99 00 	sts	0x0099, r25
    1482:	80 93 98 00 	sts	0x0098, r24
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <ICU_voidCallBack>:

void (* ICU_Notification)(void) = NULL_POINTER;
void ICU_voidCallBack (void (* Notification)(void))
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	00 d0       	rcall	.+0      	; 0x1496 <ICU_voidCallBack+0x6>
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01
    ICU_Notification = Notification;
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	90 93 9b 00 	sts	0x009B, r25
    14a6:	80 93 9a 00 	sts	0x009A, r24
}
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <vector_6>:


void vector_6 (void) __attribute__((signal));
void vector_6 (void)
{
    14b4:	1f 92       	push	r1
    14b6:	0f 92       	push	r0
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	0f 92       	push	r0
    14bc:	11 24       	eor	r1, r1
    14be:	2f 93       	push	r18
    14c0:	3f 93       	push	r19
    14c2:	4f 93       	push	r20
    14c4:	5f 93       	push	r21
    14c6:	6f 93       	push	r22
    14c8:	7f 93       	push	r23
    14ca:	8f 93       	push	r24
    14cc:	9f 93       	push	r25
    14ce:	af 93       	push	r26
    14d0:	bf 93       	push	r27
    14d2:	ef 93       	push	r30
    14d4:	ff 93       	push	r31
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    if(ICU_Notification != NULL_POINTER)
    14de:	80 91 9a 00 	lds	r24, 0x009A
    14e2:	90 91 9b 00 	lds	r25, 0x009B
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	29 f0       	breq	.+10     	; 0x14f4 <vector_6+0x40>
    {
        ICU_Notification();
    14ea:	e0 91 9a 00 	lds	r30, 0x009A
    14ee:	f0 91 9b 00 	lds	r31, 0x009B
    14f2:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	ff 91       	pop	r31
    14fa:	ef 91       	pop	r30
    14fc:	bf 91       	pop	r27
    14fe:	af 91       	pop	r26
    1500:	9f 91       	pop	r25
    1502:	8f 91       	pop	r24
    1504:	7f 91       	pop	r23
    1506:	6f 91       	pop	r22
    1508:	5f 91       	pop	r21
    150a:	4f 91       	pop	r20
    150c:	3f 91       	pop	r19
    150e:	2f 91       	pop	r18
    1510:	0f 90       	pop	r0
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	0f 90       	pop	r0
    1516:	1f 90       	pop	r1
    1518:	18 95       	reti

0000151a <vector_7>:

void vector_7 (void) __attribute__((signal));
void vector_7 (void)
{
    151a:	1f 92       	push	r1
    151c:	0f 92       	push	r0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	0f 92       	push	r0
    1522:	11 24       	eor	r1, r1
    1524:	2f 93       	push	r18
    1526:	3f 93       	push	r19
    1528:	4f 93       	push	r20
    152a:	5f 93       	push	r21
    152c:	6f 93       	push	r22
    152e:	7f 93       	push	r23
    1530:	8f 93       	push	r24
    1532:	9f 93       	push	r25
    1534:	af 93       	push	r26
    1536:	bf 93       	push	r27
    1538:	ef 93       	push	r30
    153a:	ff 93       	push	r31
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    if(TIMER1_COMPANotification != NULL_POINTER)
    1544:	80 91 96 00 	lds	r24, 0x0096
    1548:	90 91 97 00 	lds	r25, 0x0097
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	29 f0       	breq	.+10     	; 0x155a <vector_7+0x40>
    {
        TIMER1_COMPANotification();
    1550:	e0 91 96 00 	lds	r30, 0x0096
    1554:	f0 91 97 00 	lds	r31, 0x0097
    1558:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	ff 91       	pop	r31
    1560:	ef 91       	pop	r30
    1562:	bf 91       	pop	r27
    1564:	af 91       	pop	r26
    1566:	9f 91       	pop	r25
    1568:	8f 91       	pop	r24
    156a:	7f 91       	pop	r23
    156c:	6f 91       	pop	r22
    156e:	5f 91       	pop	r21
    1570:	4f 91       	pop	r20
    1572:	3f 91       	pop	r19
    1574:	2f 91       	pop	r18
    1576:	0f 90       	pop	r0
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	0f 90       	pop	r0
    157c:	1f 90       	pop	r1
    157e:	18 95       	reti

00001580 <vector_8>:

void vector_8 (void) __attribute__((signal));
void vector_8 (void)
{
    1580:	1f 92       	push	r1
    1582:	0f 92       	push	r0
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	0f 92       	push	r0
    1588:	11 24       	eor	r1, r1
    158a:	2f 93       	push	r18
    158c:	3f 93       	push	r19
    158e:	4f 93       	push	r20
    1590:	5f 93       	push	r21
    1592:	6f 93       	push	r22
    1594:	7f 93       	push	r23
    1596:	8f 93       	push	r24
    1598:	9f 93       	push	r25
    159a:	af 93       	push	r26
    159c:	bf 93       	push	r27
    159e:	ef 93       	push	r30
    15a0:	ff 93       	push	r31
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    if(TIMER1_COMPBNotification != NULL_POINTER)
    15aa:	80 91 98 00 	lds	r24, 0x0098
    15ae:	90 91 99 00 	lds	r25, 0x0099
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	29 f0       	breq	.+10     	; 0x15c0 <vector_8+0x40>
    {
        TIMER1_COMPBNotification();
    15b6:	e0 91 98 00 	lds	r30, 0x0098
    15ba:	f0 91 99 00 	lds	r31, 0x0099
    15be:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	ff 91       	pop	r31
    15c6:	ef 91       	pop	r30
    15c8:	bf 91       	pop	r27
    15ca:	af 91       	pop	r26
    15cc:	9f 91       	pop	r25
    15ce:	8f 91       	pop	r24
    15d0:	7f 91       	pop	r23
    15d2:	6f 91       	pop	r22
    15d4:	5f 91       	pop	r21
    15d6:	4f 91       	pop	r20
    15d8:	3f 91       	pop	r19
    15da:	2f 91       	pop	r18
    15dc:	0f 90       	pop	r0
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	0f 90       	pop	r0
    15e2:	1f 90       	pop	r1
    15e4:	18 95       	reti

000015e6 <vector_9>:

void vector_9 (void) __attribute__((signal));
void vector_9 (void)
{
    15e6:	1f 92       	push	r1
    15e8:	0f 92       	push	r0
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	0f 92       	push	r0
    15ee:	11 24       	eor	r1, r1
    15f0:	2f 93       	push	r18
    15f2:	3f 93       	push	r19
    15f4:	4f 93       	push	r20
    15f6:	5f 93       	push	r21
    15f8:	6f 93       	push	r22
    15fa:	7f 93       	push	r23
    15fc:	8f 93       	push	r24
    15fe:	9f 93       	push	r25
    1600:	af 93       	push	r26
    1602:	bf 93       	push	r27
    1604:	ef 93       	push	r30
    1606:	ff 93       	push	r31
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    if(TIMER1_OVFNotification != NULL_POINTER)
    1610:	80 91 94 00 	lds	r24, 0x0094
    1614:	90 91 95 00 	lds	r25, 0x0095
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	29 f0       	breq	.+10     	; 0x1626 <vector_9+0x40>
    {
        TIMER1_OVFNotification();
    161c:	e0 91 94 00 	lds	r30, 0x0094
    1620:	f0 91 95 00 	lds	r31, 0x0095
    1624:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	ff 91       	pop	r31
    162c:	ef 91       	pop	r30
    162e:	bf 91       	pop	r27
    1630:	af 91       	pop	r26
    1632:	9f 91       	pop	r25
    1634:	8f 91       	pop	r24
    1636:	7f 91       	pop	r23
    1638:	6f 91       	pop	r22
    163a:	5f 91       	pop	r21
    163c:	4f 91       	pop	r20
    163e:	3f 91       	pop	r19
    1640:	2f 91       	pop	r18
    1642:	0f 90       	pop	r0
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	0f 90       	pop	r0
    1648:	1f 90       	pop	r1
    164a:	18 95       	reti

0000164c <vector_10>:

void vector_10 (void) __attribute__((signal));
void vector_10 (void)
{
    164c:	1f 92       	push	r1
    164e:	0f 92       	push	r0
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	0f 92       	push	r0
    1654:	11 24       	eor	r1, r1
    1656:	2f 93       	push	r18
    1658:	3f 93       	push	r19
    165a:	4f 93       	push	r20
    165c:	5f 93       	push	r21
    165e:	6f 93       	push	r22
    1660:	7f 93       	push	r23
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	af 93       	push	r26
    1668:	bf 93       	push	r27
    166a:	ef 93       	push	r30
    166c:	ff 93       	push	r31
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    if(TIMER0_COMPNotification != NULL_POINTER)
    1676:	80 91 92 00 	lds	r24, 0x0092
    167a:	90 91 93 00 	lds	r25, 0x0093
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	29 f0       	breq	.+10     	; 0x168c <vector_10+0x40>
    {
        TIMER0_COMPNotification();
    1682:	e0 91 92 00 	lds	r30, 0x0092
    1686:	f0 91 93 00 	lds	r31, 0x0093
    168a:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	ff 91       	pop	r31
    1692:	ef 91       	pop	r30
    1694:	bf 91       	pop	r27
    1696:	af 91       	pop	r26
    1698:	9f 91       	pop	r25
    169a:	8f 91       	pop	r24
    169c:	7f 91       	pop	r23
    169e:	6f 91       	pop	r22
    16a0:	5f 91       	pop	r21
    16a2:	4f 91       	pop	r20
    16a4:	3f 91       	pop	r19
    16a6:	2f 91       	pop	r18
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	0f 90       	pop	r0
    16ae:	1f 90       	pop	r1
    16b0:	18 95       	reti

000016b2 <vector_11>:

void vector_11 (void) __attribute__((signal));
void vector_11 (void)
{
    16b2:	1f 92       	push	r1
    16b4:	0f 92       	push	r0
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	0f 92       	push	r0
    16ba:	11 24       	eor	r1, r1
    16bc:	2f 93       	push	r18
    16be:	3f 93       	push	r19
    16c0:	4f 93       	push	r20
    16c2:	5f 93       	push	r21
    16c4:	6f 93       	push	r22
    16c6:	7f 93       	push	r23
    16c8:	8f 93       	push	r24
    16ca:	9f 93       	push	r25
    16cc:	af 93       	push	r26
    16ce:	bf 93       	push	r27
    16d0:	ef 93       	push	r30
    16d2:	ff 93       	push	r31
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    if(TIMER0_OVFNotification != NULL_POINTER)
    16dc:	80 91 90 00 	lds	r24, 0x0090
    16e0:	90 91 91 00 	lds	r25, 0x0091
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	29 f0       	breq	.+10     	; 0x16f2 <vector_11+0x40>
    {
        TIMER0_OVFNotification();
    16e8:	e0 91 90 00 	lds	r30, 0x0090
    16ec:	f0 91 91 00 	lds	r31, 0x0091
    16f0:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	ff 91       	pop	r31
    16f8:	ef 91       	pop	r30
    16fa:	bf 91       	pop	r27
    16fc:	af 91       	pop	r26
    16fe:	9f 91       	pop	r25
    1700:	8f 91       	pop	r24
    1702:	7f 91       	pop	r23
    1704:	6f 91       	pop	r22
    1706:	5f 91       	pop	r21
    1708:	4f 91       	pop	r20
    170a:	3f 91       	pop	r19
    170c:	2f 91       	pop	r18
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	1f 90       	pop	r1
    1716:	18 95       	reti

00001718 <GIE_voidEnableGlobalInterrupt>:
#include "GIE_config.h"



void GIE_voidEnableGlobalInterrupt(void)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    /*Set The I_BIT To Enable The Global Intterupt*/
    SET_BIT(SREG, SREG_I);
    1720:	af e5       	ldi	r26, 0x5F	; 95
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ef e5       	ldi	r30, 0x5F	; 95
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	80 68       	ori	r24, 0x80	; 128
    172c:	8c 93       	st	X, r24
}
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <GIE_voidDisableGlobalInterrupt>:


void GIE_voidDisableGlobalInterrupt(void)
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    /*Set The I_BIT To Enable The Global Intterupt*/
    CLR_BIT(SREG, SREG_I);
    173c:	af e5       	ldi	r26, 0x5F	; 95
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ef e5       	ldi	r30, 0x5F	; 95
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	8f 77       	andi	r24, 0x7F	; 127
    1748:	8c 93       	st	X, r24
}
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <EXTI_voidInit>:


static void (*EXTI_INT0_Function)(void) = NULL_POINTER;

void EXTI_voidInit(void)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    #if EXTI_INT0_ENABLE == EXTI_ENABLE
        /*Enable GICR*/
        SET_BIT(GICR, GICR_INT0);
    1758:	ab e5       	ldi	r26, 0x5B	; 91
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	eb e5       	ldi	r30, 0x5B	; 91
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	80 64       	ori	r24, 0x40	; 64
    1764:	8c 93       	st	X, r24
        #if EXTI_INT0_SENSE_MODE == EXTI_RISING_EDGE
            SET_BIT(MCUCR, MCUCR_ISC00);
    1766:	a5 e5       	ldi	r26, 0x55	; 85
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e5 e5       	ldi	r30, 0x55	; 85
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	81 60       	ori	r24, 0x01	; 1
    1772:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC01);
    1774:	a5 e5       	ldi	r26, 0x55	; 85
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e5 e5       	ldi	r30, 0x55	; 85
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	82 60       	ori	r24, 0x02	; 2
    1780:	8c 93       	st	X, r24
        #else

        #endif
    #elif EXTI_INT1_ENABLE == EXTI_DISABLE
        /*Disable GICR*/
        CLR_BIT(GICR, GICR_INT0);
    1782:	ab e5       	ldi	r26, 0x5B	; 91
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	eb e5       	ldi	r30, 0x5B	; 91
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	8f 7b       	andi	r24, 0xBF	; 191
    178e:	8c 93       	st	X, r24
        #else

        #endif
    #elif EXTI_INT2_ENABLE == EXTI_DISABLE
        /*Disable GICR*/
        CLR_BIT(GICR, GICR_INT0);
    1790:	ab e5       	ldi	r26, 0x5B	; 91
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	eb e5       	ldi	r30, 0x5B	; 91
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8f 7b       	andi	r24, 0xBF	; 191
    179c:	8c 93       	st	X, r24

    #endif

    

}
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <EXTI_voidChangeSenceMode>:

void EXTI_voidChangeSenceMode(u8 Copy_u8InterruptNum, u8 Copy_u8SignalSence)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	2a 97       	sbiw	r28, 0x0a	; 10
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8InterruptNum)
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	3a 87       	std	Y+10, r19	; 0x0a
    17c4:	29 87       	std	Y+9, r18	; 0x09
    17c6:	89 85       	ldd	r24, Y+9	; 0x09
    17c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	91 05       	cpc	r25, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <EXTI_voidChangeSenceMode+0x2e>
    17d0:	65 c0       	rjmp	.+202    	; 0x189c <EXTI_voidChangeSenceMode+0xf8>
    17d2:	29 85       	ldd	r18, Y+9	; 0x09
    17d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    17d6:	23 30       	cpi	r18, 0x03	; 3
    17d8:	31 05       	cpc	r19, r1
    17da:	09 f4       	brne	.+2      	; 0x17de <EXTI_voidChangeSenceMode+0x3a>
    17dc:	b9 c0       	rjmp	.+370    	; 0x1950 <EXTI_voidChangeSenceMode+0x1ac>
    17de:	89 85       	ldd	r24, Y+9	; 0x09
    17e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <EXTI_voidChangeSenceMode+0x44>
    17e6:	d3 c0       	rjmp	.+422    	; 0x198e <EXTI_voidChangeSenceMode+0x1ea>
    {
    case EXTI_INT0:
        switch (Copy_u8SignalSence)
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	38 87       	std	Y+8, r19	; 0x08
    17f0:	2f 83       	std	Y+7, r18	; 0x07
    17f2:	8f 81       	ldd	r24, Y+7	; 0x07
    17f4:	98 85       	ldd	r25, Y+8	; 0x08
    17f6:	82 30       	cpi	r24, 0x02	; 2
    17f8:	91 05       	cpc	r25, r1
    17fa:	29 f1       	breq	.+74     	; 0x1846 <EXTI_voidChangeSenceMode+0xa2>
    17fc:	2f 81       	ldd	r18, Y+7	; 0x07
    17fe:	38 85       	ldd	r19, Y+8	; 0x08
    1800:	23 30       	cpi	r18, 0x03	; 3
    1802:	31 05       	cpc	r19, r1
    1804:	34 f4       	brge	.+12     	; 0x1812 <EXTI_voidChangeSenceMode+0x6e>
    1806:	8f 81       	ldd	r24, Y+7	; 0x07
    1808:	98 85       	ldd	r25, Y+8	; 0x08
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	91 05       	cpc	r25, r1
    180e:	61 f0       	breq	.+24     	; 0x1828 <EXTI_voidChangeSenceMode+0x84>
    1810:	be c0       	rjmp	.+380    	; 0x198e <EXTI_voidChangeSenceMode+0x1ea>
    1812:	2f 81       	ldd	r18, Y+7	; 0x07
    1814:	38 85       	ldd	r19, Y+8	; 0x08
    1816:	23 30       	cpi	r18, 0x03	; 3
    1818:	31 05       	cpc	r19, r1
    181a:	19 f1       	breq	.+70     	; 0x1862 <EXTI_voidChangeSenceMode+0xbe>
    181c:	8f 81       	ldd	r24, Y+7	; 0x07
    181e:	98 85       	ldd	r25, Y+8	; 0x08
    1820:	84 30       	cpi	r24, 0x04	; 4
    1822:	91 05       	cpc	r25, r1
    1824:	61 f1       	breq	.+88     	; 0x187e <EXTI_voidChangeSenceMode+0xda>
    1826:	b3 c0       	rjmp	.+358    	; 0x198e <EXTI_voidChangeSenceMode+0x1ea>
        {
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, MCUCR_ISC00);
    1828:	a5 e5       	ldi	r26, 0x55	; 85
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e5 e5       	ldi	r30, 0x55	; 85
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	81 60       	ori	r24, 0x01	; 1
    1834:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC01);
    1836:	a5 e5       	ldi	r26, 0x55	; 85
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e5 e5       	ldi	r30, 0x55	; 85
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	82 60       	ori	r24, 0x02	; 2
    1842:	8c 93       	st	X, r24
    1844:	a4 c0       	rjmp	.+328    	; 0x198e <EXTI_voidChangeSenceMode+0x1ea>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, MCUCR_ISC00);
    1846:	a5 e5       	ldi	r26, 0x55	; 85
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e5 e5       	ldi	r30, 0x55	; 85
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	8e 7f       	andi	r24, 0xFE	; 254
    1852:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC01);
    1854:	a5 e5       	ldi	r26, 0x55	; 85
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e5 e5       	ldi	r30, 0x55	; 85
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	82 60       	ori	r24, 0x02	; 2
    1860:	8c 93       	st	X, r24
        case EXTI_ON_CHANGE:
            SET_BIT(MCUCR, MCUCR_ISC00);
    1862:	a5 e5       	ldi	r26, 0x55	; 85
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e5 e5       	ldi	r30, 0x55	; 85
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	81 60       	ori	r24, 0x01	; 1
    186e:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC01);
    1870:	a5 e5       	ldi	r26, 0x55	; 85
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e5 e5       	ldi	r30, 0x55	; 85
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	8d 7f       	andi	r24, 0xFD	; 253
    187c:	8c 93       	st	X, r24
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, MCUCR_ISC00);
    187e:	a5 e5       	ldi	r26, 0x55	; 85
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e5 e5       	ldi	r30, 0x55	; 85
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	8e 7f       	andi	r24, 0xFE	; 254
    188a:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC01);
    188c:	a5 e5       	ldi	r26, 0x55	; 85
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e5 e5       	ldi	r30, 0x55	; 85
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	8d 7f       	andi	r24, 0xFD	; 253
    1898:	8c 93       	st	X, r24
    189a:	79 c0       	rjmp	.+242    	; 0x198e <EXTI_voidChangeSenceMode+0x1ea>
        default:
            break; 
        }
        break;
    case EXTI_INT1:
    switch (Copy_u8SignalSence)
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3e 83       	std	Y+6, r19	; 0x06
    18a4:	2d 83       	std	Y+5, r18	; 0x05
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	9e 81       	ldd	r25, Y+6	; 0x06
    18aa:	82 30       	cpi	r24, 0x02	; 2
    18ac:	91 05       	cpc	r25, r1
    18ae:	29 f1       	breq	.+74     	; 0x18fa <EXTI_voidChangeSenceMode+0x156>
    18b0:	2d 81       	ldd	r18, Y+5	; 0x05
    18b2:	3e 81       	ldd	r19, Y+6	; 0x06
    18b4:	23 30       	cpi	r18, 0x03	; 3
    18b6:	31 05       	cpc	r19, r1
    18b8:	34 f4       	brge	.+12     	; 0x18c6 <EXTI_voidChangeSenceMode+0x122>
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	9e 81       	ldd	r25, Y+6	; 0x06
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	91 05       	cpc	r25, r1
    18c2:	61 f0       	breq	.+24     	; 0x18dc <EXTI_voidChangeSenceMode+0x138>
    18c4:	64 c0       	rjmp	.+200    	; 0x198e <EXTI_voidChangeSenceMode+0x1ea>
    18c6:	2d 81       	ldd	r18, Y+5	; 0x05
    18c8:	3e 81       	ldd	r19, Y+6	; 0x06
    18ca:	23 30       	cpi	r18, 0x03	; 3
    18cc:	31 05       	cpc	r19, r1
    18ce:	19 f1       	breq	.+70     	; 0x1916 <EXTI_voidChangeSenceMode+0x172>
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	84 30       	cpi	r24, 0x04	; 4
    18d6:	91 05       	cpc	r25, r1
    18d8:	61 f1       	breq	.+88     	; 0x1932 <EXTI_voidChangeSenceMode+0x18e>
    18da:	59 c0       	rjmp	.+178    	; 0x198e <EXTI_voidChangeSenceMode+0x1ea>
        {
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, MCUCR_ISC10);
    18dc:	a5 e5       	ldi	r26, 0x55	; 85
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e5 e5       	ldi	r30, 0x55	; 85
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	84 60       	ori	r24, 0x04	; 4
    18e8:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC11);
    18ea:	a5 e5       	ldi	r26, 0x55	; 85
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e5 e5       	ldi	r30, 0x55	; 85
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	88 60       	ori	r24, 0x08	; 8
    18f6:	8c 93       	st	X, r24
    18f8:	4a c0       	rjmp	.+148    	; 0x198e <EXTI_voidChangeSenceMode+0x1ea>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, MCUCR_ISC10);
    18fa:	a5 e5       	ldi	r26, 0x55	; 85
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e5 e5       	ldi	r30, 0x55	; 85
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8b 7f       	andi	r24, 0xFB	; 251
    1906:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC11);
    1908:	a5 e5       	ldi	r26, 0x55	; 85
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e5 e5       	ldi	r30, 0x55	; 85
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	88 60       	ori	r24, 0x08	; 8
    1914:	8c 93       	st	X, r24
        case EXTI_ON_CHANGE:
            SET_BIT(MCUCR, MCUCR_ISC10);
    1916:	a5 e5       	ldi	r26, 0x55	; 85
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e5 e5       	ldi	r30, 0x55	; 85
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	84 60       	ori	r24, 0x04	; 4
    1922:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC11);
    1924:	a5 e5       	ldi	r26, 0x55	; 85
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e5 e5       	ldi	r30, 0x55	; 85
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	87 7f       	andi	r24, 0xF7	; 247
    1930:	8c 93       	st	X, r24
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, MCUCR_ISC10);
    1932:	a5 e5       	ldi	r26, 0x55	; 85
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e5 e5       	ldi	r30, 0x55	; 85
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	8b 7f       	andi	r24, 0xFB	; 251
    193e:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC11);
    1940:	a5 e5       	ldi	r26, 0x55	; 85
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e5 e5       	ldi	r30, 0x55	; 85
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	87 7f       	andi	r24, 0xF7	; 247
    194c:	8c 93       	st	X, r24
    194e:	1f c0       	rjmp	.+62     	; 0x198e <EXTI_voidChangeSenceMode+0x1ea>
            break; 
        }

        break;
    case EXTI_INT2:
        switch (Copy_u8SignalSence)
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	3c 83       	std	Y+4, r19	; 0x04
    1958:	2b 83       	std	Y+3, r18	; 0x03
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	91 05       	cpc	r25, r1
    1962:	31 f0       	breq	.+12     	; 0x1970 <EXTI_voidChangeSenceMode+0x1cc>
    1964:	2b 81       	ldd	r18, Y+3	; 0x03
    1966:	3c 81       	ldd	r19, Y+4	; 0x04
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	49 f0       	breq	.+18     	; 0x1980 <EXTI_voidChangeSenceMode+0x1dc>
    196e:	0f c0       	rjmp	.+30     	; 0x198e <EXTI_voidChangeSenceMode+0x1ea>
        {
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, MCUCSR_ISC2);
    1970:	a4 e5       	ldi	r26, 0x54	; 84
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e4 e5       	ldi	r30, 0x54	; 84
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	80 64       	ori	r24, 0x40	; 64
    197c:	8c 93       	st	X, r24
    197e:	07 c0       	rjmp	.+14     	; 0x198e <EXTI_voidChangeSenceMode+0x1ea>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, MCUCSR_ISC2);
    1980:	a5 e5       	ldi	r26, 0x55	; 85
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e5 e5       	ldi	r30, 0x55	; 85
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	8f 7b       	andi	r24, 0xBF	; 191
    198c:	8c 93       	st	X, r24
    
    default:
        break;
    }

}
    198e:	2a 96       	adiw	r28, 0x0a	; 10
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <EXTI_voidInterruptContal>:

void EXTI_voidInterruptContal(u8 Copy_u8InterruptNum, u8 Copy_u8InterruptState)
{
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	2a 97       	sbiw	r28, 0x0a	; 10
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8InterruptNum)
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	3a 87       	std	Y+10, r19	; 0x0a
    19c0:	29 87       	std	Y+9, r18	; 0x09
    19c2:	89 85       	ldd	r24, Y+9	; 0x09
    19c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	91 05       	cpc	r25, r1
    19ca:	51 f1       	breq	.+84     	; 0x1a20 <EXTI_voidInterruptContal+0x80>
    19cc:	29 85       	ldd	r18, Y+9	; 0x09
    19ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    19d0:	23 30       	cpi	r18, 0x03	; 3
    19d2:	31 05       	cpc	r19, r1
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <EXTI_voidInterruptContal+0x38>
    19d6:	43 c0       	rjmp	.+134    	; 0x1a5e <EXTI_voidInterruptContal+0xbe>
    19d8:	89 85       	ldd	r24, Y+9	; 0x09
    19da:	9a 85       	ldd	r25, Y+10	; 0x0a
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	09 f0       	breq	.+2      	; 0x19e2 <EXTI_voidInterruptContal+0x42>
    19e0:	5c c0       	rjmp	.+184    	; 0x1a9a <EXTI_voidInterruptContal+0xfa>
    {
        case EXTI_INT0:
            switch(Copy_u8InterruptState)
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	38 87       	std	Y+8, r19	; 0x08
    19ea:	2f 83       	std	Y+7, r18	; 0x07
    19ec:	8f 81       	ldd	r24, Y+7	; 0x07
    19ee:	98 85       	ldd	r25, Y+8	; 0x08
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	31 f0       	breq	.+12     	; 0x1a00 <EXTI_voidInterruptContal+0x60>
    19f4:	2f 81       	ldd	r18, Y+7	; 0x07
    19f6:	38 85       	ldd	r19, Y+8	; 0x08
    19f8:	21 30       	cpi	r18, 0x01	; 1
    19fa:	31 05       	cpc	r19, r1
    19fc:	49 f0       	breq	.+18     	; 0x1a10 <EXTI_voidInterruptContal+0x70>
    19fe:	4d c0       	rjmp	.+154    	; 0x1a9a <EXTI_voidInterruptContal+0xfa>
            {
                case EXTI_ENABLE:
                    SET_BIT(GICR, GICR_INT0);
    1a00:	ab e5       	ldi	r26, 0x5B	; 91
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	eb e5       	ldi	r30, 0x5B	; 91
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	80 64       	ori	r24, 0x40	; 64
    1a0c:	8c 93       	st	X, r24
    1a0e:	45 c0       	rjmp	.+138    	; 0x1a9a <EXTI_voidInterruptContal+0xfa>
                    break;
                case EXTI_DISABLE:
                    CLR_BIT(GICR, GICR_INT0);
    1a10:	ab e5       	ldi	r26, 0x5B	; 91
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	eb e5       	ldi	r30, 0x5B	; 91
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	8f 7b       	andi	r24, 0xBF	; 191
    1a1c:	8c 93       	st	X, r24
    1a1e:	3d c0       	rjmp	.+122    	; 0x1a9a <EXTI_voidInterruptContal+0xfa>
                    break;
            }
            break;
        case EXTI_INT1:
            switch(Copy_u8InterruptState)
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	3e 83       	std	Y+6, r19	; 0x06
    1a28:	2d 83       	std	Y+5, r18	; 0x05
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	31 f0       	breq	.+12     	; 0x1a3e <EXTI_voidInterruptContal+0x9e>
    1a32:	2d 81       	ldd	r18, Y+5	; 0x05
    1a34:	3e 81       	ldd	r19, Y+6	; 0x06
    1a36:	21 30       	cpi	r18, 0x01	; 1
    1a38:	31 05       	cpc	r19, r1
    1a3a:	49 f0       	breq	.+18     	; 0x1a4e <EXTI_voidInterruptContal+0xae>
    1a3c:	2e c0       	rjmp	.+92     	; 0x1a9a <EXTI_voidInterruptContal+0xfa>
            {
                case EXTI_ENABLE:
                    SET_BIT(GICR, GICR_INT1);
    1a3e:	ab e5       	ldi	r26, 0x5B	; 91
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	eb e5       	ldi	r30, 0x5B	; 91
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	80 68       	ori	r24, 0x80	; 128
    1a4a:	8c 93       	st	X, r24
    1a4c:	26 c0       	rjmp	.+76     	; 0x1a9a <EXTI_voidInterruptContal+0xfa>
                    break;
                case EXTI_DISABLE:
                    CLR_BIT(GICR, GICR_INT1);
    1a4e:	ab e5       	ldi	r26, 0x5B	; 91
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	eb e5       	ldi	r30, 0x5B	; 91
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	8f 77       	andi	r24, 0x7F	; 127
    1a5a:	8c 93       	st	X, r24
    1a5c:	1e c0       	rjmp	.+60     	; 0x1a9a <EXTI_voidInterruptContal+0xfa>
                    break;
            }
            break;
        case EXTI_INT2:
            switch(Copy_u8InterruptState)
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	3c 83       	std	Y+4, r19	; 0x04
    1a66:	2b 83       	std	Y+3, r18	; 0x03
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	31 f0       	breq	.+12     	; 0x1a7c <EXTI_voidInterruptContal+0xdc>
    1a70:	2b 81       	ldd	r18, Y+3	; 0x03
    1a72:	3c 81       	ldd	r19, Y+4	; 0x04
    1a74:	21 30       	cpi	r18, 0x01	; 1
    1a76:	31 05       	cpc	r19, r1
    1a78:	49 f0       	breq	.+18     	; 0x1a8c <EXTI_voidInterruptContal+0xec>
    1a7a:	0f c0       	rjmp	.+30     	; 0x1a9a <EXTI_voidInterruptContal+0xfa>
            {
                case EXTI_ENABLE:
                    SET_BIT(GICR, GICR_INT2);
    1a7c:	ab e5       	ldi	r26, 0x5B	; 91
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	eb e5       	ldi	r30, 0x5B	; 91
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	80 62       	ori	r24, 0x20	; 32
    1a88:	8c 93       	st	X, r24
    1a8a:	07 c0       	rjmp	.+14     	; 0x1a9a <EXTI_voidInterruptContal+0xfa>
                    break;
                case EXTI_DISABLE:
                    CLR_BIT(GICR, GICR_INT2);
    1a8c:	ab e5       	ldi	r26, 0x5B	; 91
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	eb e5       	ldi	r30, 0x5B	; 91
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	8f 7d       	andi	r24, 0xDF	; 223
    1a98:	8c 93       	st	X, r24
            break; 
        default:
        break;
    }

}
    1a9a:	2a 96       	adiw	r28, 0x0a	; 10
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <EXTI_voidGetInterruptFlag>:

u8 EXTI_voidGetInterruptFlag(u8 Copy_u8InterruptNum)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <EXTI_voidGetInterruptFlag+0x6>
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <EXTI_voidGetInterruptFlag+0x8>
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8GetFlag = 0;
    1aba:	19 82       	std	Y+1, r1	; 0x01
    switch (Copy_u8InterruptNum)
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	3c 83       	std	Y+4, r19	; 0x04
    1ac4:	2b 83       	std	Y+3, r18	; 0x03
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	91 05       	cpc	r25, r1
    1ace:	99 f0       	breq	.+38     	; 0x1af6 <EXTI_voidGetInterruptFlag+0x4a>
    1ad0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad4:	23 30       	cpi	r18, 0x03	; 3
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	b1 f0       	breq	.+44     	; 0x1b06 <EXTI_voidGetInterruptFlag+0x5a>
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	d1 f4       	brne	.+52     	; 0x1b16 <EXTI_voidGetInterruptFlag+0x6a>
    {
    case EXTI_INT0:
        Local_u8GetFlag = GET_BIT(GIFR, GICR_INT0);
    1ae2:	ea e5       	ldi	r30, 0x5A	; 90
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	82 95       	swap	r24
    1aea:	86 95       	lsr	r24
    1aec:	86 95       	lsr	r24
    1aee:	83 70       	andi	r24, 0x03	; 3
    1af0:	81 70       	andi	r24, 0x01	; 1
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	10 c0       	rjmp	.+32     	; 0x1b16 <EXTI_voidGetInterruptFlag+0x6a>
        break;
    case EXTI_INT1:
        Local_u8GetFlag = GET_BIT(GIFR, GICR_INT1);
    1af6:	ea e5       	ldi	r30, 0x5A	; 90
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	88 1f       	adc	r24, r24
    1afe:	88 27       	eor	r24, r24
    1b00:	88 1f       	adc	r24, r24
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	08 c0       	rjmp	.+16     	; 0x1b16 <EXTI_voidGetInterruptFlag+0x6a>
        break;
    case EXTI_INT2:
        Local_u8GetFlag = GET_BIT(GIFR, GICR_INT2);
    1b06:	ea e5       	ldi	r30, 0x5A	; 90
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	82 95       	swap	r24
    1b0e:	86 95       	lsr	r24
    1b10:	87 70       	andi	r24, 0x07	; 7
    1b12:	81 70       	andi	r24, 0x01	; 1
    1b14:	89 83       	std	Y+1, r24	; 0x01
        break;

    default:
        break;
    }
    return (Local_u8GetFlag);
    1b16:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <EXTI_voidSetCallBack>:
/* Solve The Problem Of The Arcitechture*/
void EXTI_voidSetCallBack(void(*NotificationFunction)(void))
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <EXTI_voidSetCallBack+0x6>
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
    /*The Pointer That Shard At All Function And Store The Adress Of The Local pointer TO Function*/
    EXTI_INT0_Function =  NotificationFunction;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	90 93 9d 00 	sts	0x009D, r25
    1b3c:	80 93 9c 00 	sts	0x009C, r24
}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <__vector_1>:
/*
 * ISR For INT0
 */
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    1b4a:	1f 92       	push	r1
    1b4c:	0f 92       	push	r0
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	0f 92       	push	r0
    1b52:	11 24       	eor	r1, r1
    1b54:	2f 93       	push	r18
    1b56:	3f 93       	push	r19
    1b58:	4f 93       	push	r20
    1b5a:	5f 93       	push	r21
    1b5c:	6f 93       	push	r22
    1b5e:	7f 93       	push	r23
    1b60:	8f 93       	push	r24
    1b62:	9f 93       	push	r25
    1b64:	af 93       	push	r26
    1b66:	bf 93       	push	r27
    1b68:	ef 93       	push	r30
    1b6a:	ff 93       	push	r31
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    /*Excute The Application Function*/
    //Guard From The Garbish Value Of ISR
    if(EXTI_INT0_Function != NULL_POINTER)
    1b74:	80 91 9c 00 	lds	r24, 0x009C
    1b78:	90 91 9d 00 	lds	r25, 0x009D
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	29 f0       	breq	.+10     	; 0x1b8a <__vector_1+0x40>
    {
        EXTI_INT0_Function();
    1b80:	e0 91 9c 00 	lds	r30, 0x009C
    1b84:	f0 91 9d 00 	lds	r31, 0x009D
    1b88:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	ff 91       	pop	r31
    1b90:	ef 91       	pop	r30
    1b92:	bf 91       	pop	r27
    1b94:	af 91       	pop	r26
    1b96:	9f 91       	pop	r25
    1b98:	8f 91       	pop	r24
    1b9a:	7f 91       	pop	r23
    1b9c:	6f 91       	pop	r22
    1b9e:	5f 91       	pop	r21
    1ba0:	4f 91       	pop	r20
    1ba2:	3f 91       	pop	r19
    1ba4:	2f 91       	pop	r18
    1ba6:	0f 90       	pop	r0
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	0f 90       	pop	r0
    1bac:	1f 90       	pop	r1
    1bae:	18 95       	reti

00001bb0 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidSetPinDirection (u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <DIO_voidSetPinDirection+0x6>
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <DIO_voidSetPinDirection+0x8>
    1bb8:	0f 92       	push	r0
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	6a 83       	std	Y+2, r22	; 0x02
    1bc2:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_u8PortName <= PORTD && Copy_u8PinNumber <= PIN7 && Copy_u8PinValue <= OUTPUT)
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	84 30       	cpi	r24, 0x04	; 4
    1bc8:	08 f0       	brcs	.+2      	; 0x1bcc <DIO_voidSetPinDirection+0x1c>
    1bca:	e8 c0       	rjmp	.+464    	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	88 30       	cpi	r24, 0x08	; 8
    1bd0:	08 f0       	brcs	.+2      	; 0x1bd4 <DIO_voidSetPinDirection+0x24>
    1bd2:	e4 c0       	rjmp	.+456    	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	82 30       	cpi	r24, 0x02	; 2
    1bd8:	08 f0       	brcs	.+2      	; 0x1bdc <DIO_voidSetPinDirection+0x2c>
    1bda:	e0 c0       	rjmp	.+448    	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
    {
        switch (Copy_u8PortName)
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	3d 83       	std	Y+5, r19	; 0x05
    1be4:	2c 83       	std	Y+4, r18	; 0x04
    1be6:	8c 81       	ldd	r24, Y+4	; 0x04
    1be8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	91 05       	cpc	r25, r1
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <DIO_voidSetPinDirection+0x42>
    1bf0:	47 c0       	rjmp	.+142    	; 0x1c80 <DIO_voidSetPinDirection+0xd0>
    1bf2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf6:	22 30       	cpi	r18, 0x02	; 2
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <DIO_voidSetPinDirection+0x56>
    1bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	71 f0       	breq	.+28     	; 0x1c20 <DIO_voidSetPinDirection+0x70>
    1c04:	cb c0       	rjmp	.+406    	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
    1c06:	2c 81       	ldd	r18, Y+4	; 0x04
    1c08:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0a:	22 30       	cpi	r18, 0x02	; 2
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <DIO_voidSetPinDirection+0x62>
    1c10:	67 c0       	rjmp	.+206    	; 0x1ce0 <DIO_voidSetPinDirection+0x130>
    1c12:	8c 81       	ldd	r24, Y+4	; 0x04
    1c14:	9d 81       	ldd	r25, Y+5	; 0x05
    1c16:	83 30       	cpi	r24, 0x03	; 3
    1c18:	91 05       	cpc	r25, r1
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <DIO_voidSetPinDirection+0x6e>
    1c1c:	91 c0       	rjmp	.+290    	; 0x1d40 <DIO_voidSetPinDirection+0x190>
    1c1e:	be c0       	rjmp	.+380    	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
        {
            case PORTA:
                if(Copy_u8PinValue == OUTPUT)
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	81 30       	cpi	r24, 0x01	; 1
    1c24:	a1 f4       	brne	.+40     	; 0x1c4e <DIO_voidSetPinDirection+0x9e>
                {
                    SET_BIT(DIO_DDRA, Copy_u8PinNumber);
    1c26:	aa e3       	ldi	r26, 0x3A	; 58
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	ea e3       	ldi	r30, 0x3A	; 58
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	48 2f       	mov	r20, r24
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	02 2e       	mov	r0, r18
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <DIO_voidSetPinDirection+0x94>
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	0a 94       	dec	r0
    1c46:	e2 f7       	brpl	.-8      	; 0x1c40 <DIO_voidSetPinDirection+0x90>
    1c48:	84 2b       	or	r24, r20
    1c4a:	8c 93       	st	X, r24
    1c4c:	a7 c0       	rjmp	.+334    	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
                }
                else if(Copy_u8PinValue == INPUT)
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	88 23       	and	r24, r24
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <DIO_voidSetPinDirection+0xa6>
    1c54:	a3 c0       	rjmp	.+326    	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
                {
                    CLR_BIT(DIO_DDRA, Copy_u8PinNumber);
    1c56:	aa e3       	ldi	r26, 0x3A	; 58
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	ea e3       	ldi	r30, 0x3A	; 58
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 2e       	mov	r0, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <DIO_voidSetPinDirection+0xc4>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	0a 94       	dec	r0
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <DIO_voidSetPinDirection+0xc0>
    1c78:	80 95       	com	r24
    1c7a:	84 23       	and	r24, r20
    1c7c:	8c 93       	st	X, r24
    1c7e:	8e c0       	rjmp	.+284    	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
                {

                }
                break;
            case PORTB:
                if(Copy_u8PinValue == OUTPUT)
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	a1 f4       	brne	.+40     	; 0x1cae <DIO_voidSetPinDirection+0xfe>
                {
                    SET_BIT(DIO_DDRB, Copy_u8PinNumber);
    1c86:	a7 e3       	ldi	r26, 0x37	; 55
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e7 e3       	ldi	r30, 0x37	; 55
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	48 2f       	mov	r20, r24
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	02 2e       	mov	r0, r18
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <DIO_voidSetPinDirection+0xf4>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	0a 94       	dec	r0
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <DIO_voidSetPinDirection+0xf0>
    1ca8:	84 2b       	or	r24, r20
    1caa:	8c 93       	st	X, r24
    1cac:	77 c0       	rjmp	.+238    	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
                }
                else if(Copy_u8PinValue == INPUT)
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	88 23       	and	r24, r24
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <DIO_voidSetPinDirection+0x106>
    1cb4:	73 c0       	rjmp	.+230    	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
                {
                    CLR_BIT(DIO_DDRB, Copy_u8PinNumber);
    1cb6:	a7 e3       	ldi	r26, 0x37	; 55
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e7 e3       	ldi	r30, 0x37	; 55
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	48 2f       	mov	r20, r24
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	02 2e       	mov	r0, r18
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <DIO_voidSetPinDirection+0x124>
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	0a 94       	dec	r0
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <DIO_voidSetPinDirection+0x120>
    1cd8:	80 95       	com	r24
    1cda:	84 23       	and	r24, r20
    1cdc:	8c 93       	st	X, r24
    1cde:	5e c0       	rjmp	.+188    	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
                {

                }
                break;
            case PORTC:
                if(Copy_u8PinValue == OUTPUT)
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	a1 f4       	brne	.+40     	; 0x1d0e <DIO_voidSetPinDirection+0x15e>
                {
                    SET_BIT(DIO_DDRC, Copy_u8PinNumber);
    1ce6:	a4 e3       	ldi	r26, 0x34	; 52
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e4 e3       	ldi	r30, 0x34	; 52
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	02 2e       	mov	r0, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <DIO_voidSetPinDirection+0x154>
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	0a 94       	dec	r0
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <DIO_voidSetPinDirection+0x150>
    1d08:	84 2b       	or	r24, r20
    1d0a:	8c 93       	st	X, r24
    1d0c:	47 c0       	rjmp	.+142    	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
                }
                else if(Copy_u8PinValue == INPUT)
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	88 23       	and	r24, r24
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <DIO_voidSetPinDirection+0x166>
    1d14:	43 c0       	rjmp	.+134    	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
                {
                    CLR_BIT(DIO_DDRC, Copy_u8PinNumber);
    1d16:	a4 e3       	ldi	r26, 0x34	; 52
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e4 e3       	ldi	r30, 0x34	; 52
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	48 2f       	mov	r20, r24
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 2e       	mov	r0, r18
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <DIO_voidSetPinDirection+0x184>
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	0a 94       	dec	r0
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <DIO_voidSetPinDirection+0x180>
    1d38:	80 95       	com	r24
    1d3a:	84 23       	and	r24, r20
    1d3c:	8c 93       	st	X, r24
    1d3e:	2e c0       	rjmp	.+92     	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
                {

                }
                break;
            case PORTD:
                if(Copy_u8PinValue == OUTPUT)
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	a1 f4       	brne	.+40     	; 0x1d6e <DIO_voidSetPinDirection+0x1be>
                {
                    SET_BIT(DIO_DDRD, Copy_u8PinNumber);
    1d46:	a1 e3       	ldi	r26, 0x31	; 49
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e1 e3       	ldi	r30, 0x31	; 49
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <DIO_voidSetPinDirection+0x1b4>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <DIO_voidSetPinDirection+0x1b0>
    1d68:	84 2b       	or	r24, r20
    1d6a:	8c 93       	st	X, r24
    1d6c:	17 c0       	rjmp	.+46     	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
                }
                else if(Copy_u8PinValue == INPUT)
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	88 23       	and	r24, r24
    1d72:	a1 f4       	brne	.+40     	; 0x1d9c <DIO_voidSetPinDirection+0x1ec>
                {
                    CLR_BIT(DIO_DDRD, Copy_u8PinNumber);
    1d74:	a1 e3       	ldi	r26, 0x31	; 49
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e1 e3       	ldi	r30, 0x31	; 49
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	48 2f       	mov	r20, r24
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	02 2e       	mov	r0, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <DIO_voidSetPinDirection+0x1e2>
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	0a 94       	dec	r0
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <DIO_voidSetPinDirection+0x1de>
    1d96:	80 95       	com	r24
    1d98:	84 23       	and	r24, r20
    1d9a:	8c 93       	st	X, r24
    }
    else
    {

    }
}
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <DIO_voidSetPinValue+0x6>
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <DIO_voidSetPinValue+0x8>
    1db4:	0f 92       	push	r0
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	6a 83       	std	Y+2, r22	; 0x02
    1dbe:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_u8PortName <= PORTD && Copy_u8PinNumber <= PIN7 && Copy_u8PinValue <= HIGH)
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	84 30       	cpi	r24, 0x04	; 4
    1dc4:	08 f0       	brcs	.+2      	; 0x1dc8 <DIO_voidSetPinValue+0x1c>
    1dc6:	e8 c0       	rjmp	.+464    	; 0x1f98 <DIO_voidSetPinValue+0x1ec>
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	88 30       	cpi	r24, 0x08	; 8
    1dcc:	08 f0       	brcs	.+2      	; 0x1dd0 <DIO_voidSetPinValue+0x24>
    1dce:	e4 c0       	rjmp	.+456    	; 0x1f98 <DIO_voidSetPinValue+0x1ec>
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	08 f0       	brcs	.+2      	; 0x1dd8 <DIO_voidSetPinValue+0x2c>
    1dd6:	e0 c0       	rjmp	.+448    	; 0x1f98 <DIO_voidSetPinValue+0x1ec>
    {
        switch(Copy_u8PortName)
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	3d 83       	std	Y+5, r19	; 0x05
    1de0:	2c 83       	std	Y+4, r18	; 0x04
    1de2:	8c 81       	ldd	r24, Y+4	; 0x04
    1de4:	9d 81       	ldd	r25, Y+5	; 0x05
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	91 05       	cpc	r25, r1
    1dea:	09 f4       	brne	.+2      	; 0x1dee <DIO_voidSetPinValue+0x42>
    1dec:	47 c0       	rjmp	.+142    	; 0x1e7c <DIO_voidSetPinValue+0xd0>
    1dee:	2c 81       	ldd	r18, Y+4	; 0x04
    1df0:	3d 81       	ldd	r19, Y+5	; 0x05
    1df2:	22 30       	cpi	r18, 0x02	; 2
    1df4:	31 05       	cpc	r19, r1
    1df6:	2c f4       	brge	.+10     	; 0x1e02 <DIO_voidSetPinValue+0x56>
    1df8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	71 f0       	breq	.+28     	; 0x1e1c <DIO_voidSetPinValue+0x70>
    1e00:	cb c0       	rjmp	.+406    	; 0x1f98 <DIO_voidSetPinValue+0x1ec>
    1e02:	2c 81       	ldd	r18, Y+4	; 0x04
    1e04:	3d 81       	ldd	r19, Y+5	; 0x05
    1e06:	22 30       	cpi	r18, 0x02	; 2
    1e08:	31 05       	cpc	r19, r1
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <DIO_voidSetPinValue+0x62>
    1e0c:	67 c0       	rjmp	.+206    	; 0x1edc <DIO_voidSetPinValue+0x130>
    1e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e10:	9d 81       	ldd	r25, Y+5	; 0x05
    1e12:	83 30       	cpi	r24, 0x03	; 3
    1e14:	91 05       	cpc	r25, r1
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <DIO_voidSetPinValue+0x6e>
    1e18:	91 c0       	rjmp	.+290    	; 0x1f3c <DIO_voidSetPinValue+0x190>
    1e1a:	be c0       	rjmp	.+380    	; 0x1f98 <DIO_voidSetPinValue+0x1ec>
        {
            case PORTA:
            if(Copy_u8PinValue == HIGH)
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	a1 f4       	brne	.+40     	; 0x1e4a <DIO_voidSetPinValue+0x9e>
            {
                SET_BIT(DIO_PORTA, Copy_u8PinNumber);
    1e22:	ab e3       	ldi	r26, 0x3B	; 59
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	eb e3       	ldi	r30, 0x3B	; 59
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	48 2f       	mov	r20, r24
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	02 2e       	mov	r0, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <DIO_voidSetPinValue+0x94>
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	0a 94       	dec	r0
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <DIO_voidSetPinValue+0x90>
    1e44:	84 2b       	or	r24, r20
    1e46:	8c 93       	st	X, r24
    1e48:	a7 c0       	rjmp	.+334    	; 0x1f98 <DIO_voidSetPinValue+0x1ec>
            }
            else if(Copy_u8PinValue == LOW)
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	88 23       	and	r24, r24
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <DIO_voidSetPinValue+0xa6>
    1e50:	a3 c0       	rjmp	.+326    	; 0x1f98 <DIO_voidSetPinValue+0x1ec>
            {
                CLR_BIT(DIO_PORTA, Copy_u8PinNumber);
    1e52:	ab e3       	ldi	r26, 0x3B	; 59
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	eb e3       	ldi	r30, 0x3B	; 59
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 2e       	mov	r0, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <DIO_voidSetPinValue+0xc4>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <DIO_voidSetPinValue+0xc0>
    1e74:	80 95       	com	r24
    1e76:	84 23       	and	r24, r20
    1e78:	8c 93       	st	X, r24
    1e7a:	8e c0       	rjmp	.+284    	; 0x1f98 <DIO_voidSetPinValue+0x1ec>

            }
            break;

            case PORTB:
            if(Copy_u8PinValue == HIGH)
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	a1 f4       	brne	.+40     	; 0x1eaa <DIO_voidSetPinValue+0xfe>
            {
                SET_BIT(DIO_PORTB, Copy_u8PinNumber);
    1e82:	a8 e3       	ldi	r26, 0x38	; 56
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e8 e3       	ldi	r30, 0x38	; 56
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 2e       	mov	r0, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <DIO_voidSetPinValue+0xf4>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	0a 94       	dec	r0
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <DIO_voidSetPinValue+0xf0>
    1ea4:	84 2b       	or	r24, r20
    1ea6:	8c 93       	st	X, r24
    1ea8:	77 c0       	rjmp	.+238    	; 0x1f98 <DIO_voidSetPinValue+0x1ec>
            }
            else if(Copy_u8PinValue == LOW)
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	88 23       	and	r24, r24
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <DIO_voidSetPinValue+0x106>
    1eb0:	73 c0       	rjmp	.+230    	; 0x1f98 <DIO_voidSetPinValue+0x1ec>
            {
                CLR_BIT(DIO_PORTB, Copy_u8PinNumber);
    1eb2:	a8 e3       	ldi	r26, 0x38	; 56
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e8 e3       	ldi	r30, 0x38	; 56
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	02 2e       	mov	r0, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <DIO_voidSetPinValue+0x124>
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	0a 94       	dec	r0
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <DIO_voidSetPinValue+0x120>
    1ed4:	80 95       	com	r24
    1ed6:	84 23       	and	r24, r20
    1ed8:	8c 93       	st	X, r24
    1eda:	5e c0       	rjmp	.+188    	; 0x1f98 <DIO_voidSetPinValue+0x1ec>

            }
            break;

            case PORTC:
            if(Copy_u8PinValue == HIGH)
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	81 30       	cpi	r24, 0x01	; 1
    1ee0:	a1 f4       	brne	.+40     	; 0x1f0a <DIO_voidSetPinValue+0x15e>
            {
                SET_BIT(DIO_PORTC, Copy_u8PinNumber);
    1ee2:	a5 e3       	ldi	r26, 0x35	; 53
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e5 e3       	ldi	r30, 0x35	; 53
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	48 2f       	mov	r20, r24
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	02 2e       	mov	r0, r18
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <DIO_voidSetPinValue+0x154>
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	0a 94       	dec	r0
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <DIO_voidSetPinValue+0x150>
    1f04:	84 2b       	or	r24, r20
    1f06:	8c 93       	st	X, r24
    1f08:	47 c0       	rjmp	.+142    	; 0x1f98 <DIO_voidSetPinValue+0x1ec>
            }
            else if(Copy_u8PinValue == LOW)
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	88 23       	and	r24, r24
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <DIO_voidSetPinValue+0x166>
    1f10:	43 c0       	rjmp	.+134    	; 0x1f98 <DIO_voidSetPinValue+0x1ec>
            {
                CLR_BIT(DIO_PORTC, Copy_u8PinNumber);
    1f12:	a5 e3       	ldi	r26, 0x35	; 53
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e5 e3       	ldi	r30, 0x35	; 53
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	02 2e       	mov	r0, r18
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <DIO_voidSetPinValue+0x184>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	0a 94       	dec	r0
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <DIO_voidSetPinValue+0x180>
    1f34:	80 95       	com	r24
    1f36:	84 23       	and	r24, r20
    1f38:	8c 93       	st	X, r24
    1f3a:	2e c0       	rjmp	.+92     	; 0x1f98 <DIO_voidSetPinValue+0x1ec>

            }
            break;

            case PORTD:
            if(Copy_u8PinValue == HIGH)
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	a1 f4       	brne	.+40     	; 0x1f6a <DIO_voidSetPinValue+0x1be>
            {
                SET_BIT(DIO_PORTD, Copy_u8PinNumber);
    1f42:	a2 e3       	ldi	r26, 0x32	; 50
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e2 e3       	ldi	r30, 0x32	; 50
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	48 2f       	mov	r20, r24
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	02 2e       	mov	r0, r18
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <DIO_voidSetPinValue+0x1b4>
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	0a 94       	dec	r0
    1f62:	e2 f7       	brpl	.-8      	; 0x1f5c <DIO_voidSetPinValue+0x1b0>
    1f64:	84 2b       	or	r24, r20
    1f66:	8c 93       	st	X, r24
    1f68:	17 c0       	rjmp	.+46     	; 0x1f98 <DIO_voidSetPinValue+0x1ec>
            }
            else if(Copy_u8PinValue == LOW)
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	88 23       	and	r24, r24
    1f6e:	a1 f4       	brne	.+40     	; 0x1f98 <DIO_voidSetPinValue+0x1ec>
            {
                CLR_BIT(DIO_PORTD, Copy_u8PinNumber);
    1f70:	a2 e3       	ldi	r26, 0x32	; 50
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e2 e3       	ldi	r30, 0x32	; 50
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	48 2f       	mov	r20, r24
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	02 2e       	mov	r0, r18
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <DIO_voidSetPinValue+0x1e2>
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	0a 94       	dec	r0
    1f90:	e2 f7       	brpl	.-8      	; 0x1f8a <DIO_voidSetPinValue+0x1de>
    1f92:	80 95       	com	r24
    1f94:	84 23       	and	r24, r20
    1f96:	8c 93       	st	X, r24
    }
    else
    {

    }
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <DIO_voidSetPinPullUp>:

void DIO_voidSetPinPullUp (u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PullupState)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	2d 97       	sbiw	r28, 0x0d	; 13
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	6a 83       	std	Y+2, r22	; 0x02
    1fc0:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_u8PortName <= PORTD && Copy_u8PinNumber <= PIN7 && Copy_u8PullupState <= PULLUP)
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	84 30       	cpi	r24, 0x04	; 4
    1fc6:	08 f0       	brcs	.+2      	; 0x1fca <DIO_voidSetPinPullUp+0x22>
    1fc8:	54 c1       	rjmp	.+680    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	88 30       	cpi	r24, 0x08	; 8
    1fce:	08 f0       	brcs	.+2      	; 0x1fd2 <DIO_voidSetPinPullUp+0x2a>
    1fd0:	50 c1       	rjmp	.+672    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	82 30       	cpi	r24, 0x02	; 2
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <DIO_voidSetPinPullUp+0x32>
    1fd8:	4c c1       	rjmp	.+664    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
    {
        switch (Copy_u8PortName)
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	3d 87       	std	Y+13, r19	; 0x0d
    1fe2:	2c 87       	std	Y+12, r18	; 0x0c
    1fe4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fe6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	91 05       	cpc	r25, r1
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <DIO_voidSetPinPullUp+0x48>
    1fee:	62 c0       	rjmp	.+196    	; 0x20b4 <DIO_voidSetPinPullUp+0x10c>
    1ff0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ff2:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ff4:	22 30       	cpi	r18, 0x02	; 2
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <DIO_voidSetPinPullUp+0x5c>
    1ffa:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ffc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	71 f0       	breq	.+28     	; 0x201e <DIO_voidSetPinPullUp+0x76>
    2002:	37 c1       	rjmp	.+622    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
    2004:	2c 85       	ldd	r18, Y+12	; 0x0c
    2006:	3d 85       	ldd	r19, Y+13	; 0x0d
    2008:	22 30       	cpi	r18, 0x02	; 2
    200a:	31 05       	cpc	r19, r1
    200c:	09 f4       	brne	.+2      	; 0x2010 <DIO_voidSetPinPullUp+0x68>
    200e:	9d c0       	rjmp	.+314    	; 0x214a <DIO_voidSetPinPullUp+0x1a2>
    2010:	8c 85       	ldd	r24, Y+12	; 0x0c
    2012:	9d 85       	ldd	r25, Y+13	; 0x0d
    2014:	83 30       	cpi	r24, 0x03	; 3
    2016:	91 05       	cpc	r25, r1
    2018:	09 f4       	brne	.+2      	; 0x201c <DIO_voidSetPinPullUp+0x74>
    201a:	e2 c0       	rjmp	.+452    	; 0x21e0 <DIO_voidSetPinPullUp+0x238>
    201c:	2a c1       	rjmp	.+596    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
        {
            case PORTA:
                switch (Copy_u8PullupState)
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	3b 87       	std	Y+11, r19	; 0x0b
    2026:	2a 87       	std	Y+10, r18	; 0x0a
    2028:	8a 85       	ldd	r24, Y+10	; 0x0a
    202a:	9b 85       	ldd	r25, Y+11	; 0x0b
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	69 f1       	breq	.+90     	; 0x208a <DIO_voidSetPinPullUp+0xe2>
    2030:	2a 85       	ldd	r18, Y+10	; 0x0a
    2032:	3b 85       	ldd	r19, Y+11	; 0x0b
    2034:	21 30       	cpi	r18, 0x01	; 1
    2036:	31 05       	cpc	r19, r1
    2038:	09 f0       	breq	.+2      	; 0x203c <DIO_voidSetPinPullUp+0x94>
    203a:	1b c1       	rjmp	.+566    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
                {
                    case PULLUP:
                        CLR_BIT(DIO_DDRA, Copy_u8PinNumber);
    203c:	aa e3       	ldi	r26, 0x3A	; 58
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	ea e3       	ldi	r30, 0x3A	; 58
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	48 2f       	mov	r20, r24
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <DIO_voidSetPinPullUp+0xb0>
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	2a 95       	dec	r18
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <DIO_voidSetPinPullUp+0xac>
    205c:	80 95       	com	r24
    205e:	84 23       	and	r24, r20
    2060:	8c 93       	st	X, r24
                        SET_BIT(DIO_PORTA, Copy_u8PinNumber);
    2062:	ab e3       	ldi	r26, 0x3B	; 59
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	eb e3       	ldi	r30, 0x3B	; 59
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	48 2f       	mov	r20, r24
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	02 2e       	mov	r0, r18
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <DIO_voidSetPinPullUp+0xd8>
    207c:	88 0f       	add	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	0a 94       	dec	r0
    2082:	e2 f7       	brpl	.-8      	; 0x207c <DIO_voidSetPinPullUp+0xd4>
    2084:	84 2b       	or	r24, r20
    2086:	8c 93       	st	X, r24
    2088:	f4 c0       	rjmp	.+488    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
                    break;

                    case NOPULLUP:
                        CLR_BIT(DIO_PORTA, Copy_u8PinNumber);
    208a:	ab e3       	ldi	r26, 0x3B	; 59
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	eb e3       	ldi	r30, 0x3B	; 59
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	48 2f       	mov	r20, r24
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	02 2e       	mov	r0, r18
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <DIO_voidSetPinPullUp+0x100>
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	0a 94       	dec	r0
    20aa:	e2 f7       	brpl	.-8      	; 0x20a4 <DIO_voidSetPinPullUp+0xfc>
    20ac:	80 95       	com	r24
    20ae:	84 23       	and	r24, r20
    20b0:	8c 93       	st	X, r24
    20b2:	df c0       	rjmp	.+446    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
                    break;
                }
            break;

            case PORTB:
                switch (Copy_u8PullupState)
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	39 87       	std	Y+9, r19	; 0x09
    20bc:	28 87       	std	Y+8, r18	; 0x08
    20be:	88 85       	ldd	r24, Y+8	; 0x08
    20c0:	99 85       	ldd	r25, Y+9	; 0x09
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	69 f1       	breq	.+90     	; 0x2120 <DIO_voidSetPinPullUp+0x178>
    20c6:	28 85       	ldd	r18, Y+8	; 0x08
    20c8:	39 85       	ldd	r19, Y+9	; 0x09
    20ca:	21 30       	cpi	r18, 0x01	; 1
    20cc:	31 05       	cpc	r19, r1
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <DIO_voidSetPinPullUp+0x12a>
    20d0:	d0 c0       	rjmp	.+416    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
                {
                    case PULLUP:
                        CLR_BIT(DIO_DDRB, Copy_u8PinNumber);
    20d2:	a7 e3       	ldi	r26, 0x37	; 55
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e7 e3       	ldi	r30, 0x37	; 55
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	48 2f       	mov	r20, r24
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <DIO_voidSetPinPullUp+0x146>
    20ea:	88 0f       	add	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	2a 95       	dec	r18
    20f0:	e2 f7       	brpl	.-8      	; 0x20ea <DIO_voidSetPinPullUp+0x142>
    20f2:	80 95       	com	r24
    20f4:	84 23       	and	r24, r20
    20f6:	8c 93       	st	X, r24
                        SET_BIT(DIO_PORTB, Copy_u8PinNumber);
    20f8:	a8 e3       	ldi	r26, 0x38	; 56
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e8 e3       	ldi	r30, 0x38	; 56
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	48 2f       	mov	r20, r24
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	02 2e       	mov	r0, r18
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <DIO_voidSetPinPullUp+0x16e>
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	0a 94       	dec	r0
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <DIO_voidSetPinPullUp+0x16a>
    211a:	84 2b       	or	r24, r20
    211c:	8c 93       	st	X, r24
    211e:	a9 c0       	rjmp	.+338    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
                    break;

                    case NOPULLUP:
                        CLR_BIT(DIO_PORTB, Copy_u8PinNumber);
    2120:	a8 e3       	ldi	r26, 0x38	; 56
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e8 e3       	ldi	r30, 0x38	; 56
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	48 2f       	mov	r20, r24
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	02 2e       	mov	r0, r18
    2138:	02 c0       	rjmp	.+4      	; 0x213e <DIO_voidSetPinPullUp+0x196>
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	0a 94       	dec	r0
    2140:	e2 f7       	brpl	.-8      	; 0x213a <DIO_voidSetPinPullUp+0x192>
    2142:	80 95       	com	r24
    2144:	84 23       	and	r24, r20
    2146:	8c 93       	st	X, r24
    2148:	94 c0       	rjmp	.+296    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
                    break;
                }
            break;

            case PORTC:
                switch (Copy_u8PullupState)
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	3f 83       	std	Y+7, r19	; 0x07
    2152:	2e 83       	std	Y+6, r18	; 0x06
    2154:	8e 81       	ldd	r24, Y+6	; 0x06
    2156:	9f 81       	ldd	r25, Y+7	; 0x07
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	69 f1       	breq	.+90     	; 0x21b6 <DIO_voidSetPinPullUp+0x20e>
    215c:	2e 81       	ldd	r18, Y+6	; 0x06
    215e:	3f 81       	ldd	r19, Y+7	; 0x07
    2160:	21 30       	cpi	r18, 0x01	; 1
    2162:	31 05       	cpc	r19, r1
    2164:	09 f0       	breq	.+2      	; 0x2168 <DIO_voidSetPinPullUp+0x1c0>
    2166:	85 c0       	rjmp	.+266    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
                {
                    case PULLUP:
                        CLR_BIT(DIO_DDRC, Copy_u8PinNumber);
    2168:	a4 e3       	ldi	r26, 0x34	; 52
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e4 e3       	ldi	r30, 0x34	; 52
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	48 2f       	mov	r20, r24
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <DIO_voidSetPinPullUp+0x1dc>
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	2a 95       	dec	r18
    2186:	e2 f7       	brpl	.-8      	; 0x2180 <DIO_voidSetPinPullUp+0x1d8>
    2188:	80 95       	com	r24
    218a:	84 23       	and	r24, r20
    218c:	8c 93       	st	X, r24
                        SET_BIT(DIO_PORTC, Copy_u8PinNumber);
    218e:	a5 e3       	ldi	r26, 0x35	; 53
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e5 e3       	ldi	r30, 0x35	; 53
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	48 2f       	mov	r20, r24
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	02 2e       	mov	r0, r18
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <DIO_voidSetPinPullUp+0x204>
    21a8:	88 0f       	add	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	0a 94       	dec	r0
    21ae:	e2 f7       	brpl	.-8      	; 0x21a8 <DIO_voidSetPinPullUp+0x200>
    21b0:	84 2b       	or	r24, r20
    21b2:	8c 93       	st	X, r24
    21b4:	5e c0       	rjmp	.+188    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
                    break;

                    case NOPULLUP:
                        CLR_BIT(DIO_PORTC, Copy_u8PinNumber);
    21b6:	a5 e3       	ldi	r26, 0x35	; 53
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e5 e3       	ldi	r30, 0x35	; 53
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	48 2f       	mov	r20, r24
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	02 2e       	mov	r0, r18
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <DIO_voidSetPinPullUp+0x22c>
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	0a 94       	dec	r0
    21d6:	e2 f7       	brpl	.-8      	; 0x21d0 <DIO_voidSetPinPullUp+0x228>
    21d8:	80 95       	com	r24
    21da:	84 23       	and	r24, r20
    21dc:	8c 93       	st	X, r24
    21de:	49 c0       	rjmp	.+146    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
                    break;
                }
            break;

            case PORTD:
                switch (Copy_u8PullupState)
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	3d 83       	std	Y+5, r19	; 0x05
    21e8:	2c 83       	std	Y+4, r18	; 0x04
    21ea:	8c 81       	ldd	r24, Y+4	; 0x04
    21ec:	9d 81       	ldd	r25, Y+5	; 0x05
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	61 f1       	breq	.+88     	; 0x224a <DIO_voidSetPinPullUp+0x2a2>
    21f2:	2c 81       	ldd	r18, Y+4	; 0x04
    21f4:	3d 81       	ldd	r19, Y+5	; 0x05
    21f6:	21 30       	cpi	r18, 0x01	; 1
    21f8:	31 05       	cpc	r19, r1
    21fa:	d9 f5       	brne	.+118    	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
                {
                    case PULLUP:
                        CLR_BIT(DIO_DDRD, Copy_u8PinNumber);
    21fc:	a1 e3       	ldi	r26, 0x31	; 49
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e1 e3       	ldi	r30, 0x31	; 49
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	48 2f       	mov	r20, r24
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <DIO_voidSetPinPullUp+0x270>
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	2a 95       	dec	r18
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <DIO_voidSetPinPullUp+0x26c>
    221c:	80 95       	com	r24
    221e:	84 23       	and	r24, r20
    2220:	8c 93       	st	X, r24
                        SET_BIT(DIO_PORTD, Copy_u8PinNumber);
    2222:	a2 e3       	ldi	r26, 0x32	; 50
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e2 e3       	ldi	r30, 0x32	; 50
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	48 2f       	mov	r20, r24
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	02 2e       	mov	r0, r18
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <DIO_voidSetPinPullUp+0x298>
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	0a 94       	dec	r0
    2242:	e2 f7       	brpl	.-8      	; 0x223c <DIO_voidSetPinPullUp+0x294>
    2244:	84 2b       	or	r24, r20
    2246:	8c 93       	st	X, r24
    2248:	14 c0       	rjmp	.+40     	; 0x2272 <DIO_voidSetPinPullUp+0x2ca>
                    break;

                    case NOPULLUP:
                        CLR_BIT(DIO_PORTD, Copy_u8PinNumber);
    224a:	a2 e3       	ldi	r26, 0x32	; 50
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	e2 e3       	ldi	r30, 0x32	; 50
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	48 2f       	mov	r20, r24
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	02 2e       	mov	r0, r18
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <DIO_voidSetPinPullUp+0x2c0>
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	0a 94       	dec	r0
    226a:	e2 f7       	brpl	.-8      	; 0x2264 <DIO_voidSetPinPullUp+0x2bc>
    226c:	80 95       	com	r24
    226e:	84 23       	and	r24, r20
    2270:	8c 93       	st	X, r24
    }
    else
    {

    }
}
    2272:	2d 96       	adiw	r28, 0x0d	; 13
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PortName, u8 Copy_u8PinNumber)
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <DIO_u8GetPinValue+0x6>
    228a:	00 d0       	rcall	.+0      	; 0x228c <DIO_u8GetPinValue+0x8>
    228c:	0f 92       	push	r0
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	8a 83       	std	Y+2, r24	; 0x02
    2294:	6b 83       	std	Y+3, r22	; 0x03
    
	u8 DIO_u8StorePinValue = 0;
    2296:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u8PortName <= PORTD && Copy_u8PinNumber <= PIN7)
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	84 30       	cpi	r24, 0x04	; 4
    229c:	08 f0       	brcs	.+2      	; 0x22a0 <DIO_u8GetPinValue+0x1c>
    229e:	6b c0       	rjmp	.+214    	; 0x2376 <DIO_u8GetPinValue+0xf2>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	88 30       	cpi	r24, 0x08	; 8
    22a4:	08 f0       	brcs	.+2      	; 0x22a8 <DIO_u8GetPinValue+0x24>
    22a6:	67 c0       	rjmp	.+206    	; 0x2376 <DIO_u8GetPinValue+0xf2>
    {
        switch (Copy_u8PortName)
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	3d 83       	std	Y+5, r19	; 0x05
    22b0:	2c 83       	std	Y+4, r18	; 0x04
    22b2:	4c 81       	ldd	r20, Y+4	; 0x04
    22b4:	5d 81       	ldd	r21, Y+5	; 0x05
    22b6:	41 30       	cpi	r20, 0x01	; 1
    22b8:	51 05       	cpc	r21, r1
    22ba:	41 f1       	breq	.+80     	; 0x230c <DIO_u8GetPinValue+0x88>
    22bc:	8c 81       	ldd	r24, Y+4	; 0x04
    22be:	9d 81       	ldd	r25, Y+5	; 0x05
    22c0:	82 30       	cpi	r24, 0x02	; 2
    22c2:	91 05       	cpc	r25, r1
    22c4:	34 f4       	brge	.+12     	; 0x22d2 <DIO_u8GetPinValue+0x4e>
    22c6:	2c 81       	ldd	r18, Y+4	; 0x04
    22c8:	3d 81       	ldd	r19, Y+5	; 0x05
    22ca:	21 15       	cp	r18, r1
    22cc:	31 05       	cpc	r19, r1
    22ce:	61 f0       	breq	.+24     	; 0x22e8 <DIO_u8GetPinValue+0x64>
    22d0:	52 c0       	rjmp	.+164    	; 0x2376 <DIO_u8GetPinValue+0xf2>
    22d2:	4c 81       	ldd	r20, Y+4	; 0x04
    22d4:	5d 81       	ldd	r21, Y+5	; 0x05
    22d6:	42 30       	cpi	r20, 0x02	; 2
    22d8:	51 05       	cpc	r21, r1
    22da:	51 f1       	breq	.+84     	; 0x2330 <DIO_u8GetPinValue+0xac>
    22dc:	8c 81       	ldd	r24, Y+4	; 0x04
    22de:	9d 81       	ldd	r25, Y+5	; 0x05
    22e0:	83 30       	cpi	r24, 0x03	; 3
    22e2:	91 05       	cpc	r25, r1
    22e4:	b9 f1       	breq	.+110    	; 0x2354 <DIO_u8GetPinValue+0xd0>
    22e6:	47 c0       	rjmp	.+142    	; 0x2376 <DIO_u8GetPinValue+0xf2>
        {
            case PORTA:
                DIO_u8StorePinValue = GET_BIT(DIO_PINA, Copy_u8PinNumber);
    22e8:	e9 e3       	ldi	r30, 0x39	; 57
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	88 2f       	mov	r24, r24
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	a9 01       	movw	r20, r18
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <DIO_u8GetPinValue+0x7c>
    22fc:	55 95       	asr	r21
    22fe:	47 95       	ror	r20
    2300:	8a 95       	dec	r24
    2302:	e2 f7       	brpl	.-8      	; 0x22fc <DIO_u8GetPinValue+0x78>
    2304:	ca 01       	movw	r24, r20
    2306:	81 70       	andi	r24, 0x01	; 1
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	35 c0       	rjmp	.+106    	; 0x2376 <DIO_u8GetPinValue+0xf2>
            break;

            case PORTB:
                DIO_u8StorePinValue = GET_BIT(DIO_PINB, Copy_u8PinNumber);
    230c:	e6 e3       	ldi	r30, 0x36	; 54
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	88 2f       	mov	r24, r24
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a9 01       	movw	r20, r18
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <DIO_u8GetPinValue+0xa0>
    2320:	55 95       	asr	r21
    2322:	47 95       	ror	r20
    2324:	8a 95       	dec	r24
    2326:	e2 f7       	brpl	.-8      	; 0x2320 <DIO_u8GetPinValue+0x9c>
    2328:	ca 01       	movw	r24, r20
    232a:	81 70       	andi	r24, 0x01	; 1
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	23 c0       	rjmp	.+70     	; 0x2376 <DIO_u8GetPinValue+0xf2>
            break;

            case PORTC:
                DIO_u8StorePinValue = GET_BIT(DIO_PINC, Copy_u8PinNumber);
    2330:	e3 e3       	ldi	r30, 0x33	; 51
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	a9 01       	movw	r20, r18
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <DIO_u8GetPinValue+0xc4>
    2344:	55 95       	asr	r21
    2346:	47 95       	ror	r20
    2348:	8a 95       	dec	r24
    234a:	e2 f7       	brpl	.-8      	; 0x2344 <DIO_u8GetPinValue+0xc0>
    234c:	ca 01       	movw	r24, r20
    234e:	81 70       	andi	r24, 0x01	; 1
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	11 c0       	rjmp	.+34     	; 0x2376 <DIO_u8GetPinValue+0xf2>
            break;

            case PORTD:
                DIO_u8StorePinValue = GET_BIT(DIO_PIND, Copy_u8PinNumber);
    2354:	e0 e3       	ldi	r30, 0x30	; 48
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	a9 01       	movw	r20, r18
    2366:	02 c0       	rjmp	.+4      	; 0x236c <DIO_u8GetPinValue+0xe8>
    2368:	55 95       	asr	r21
    236a:	47 95       	ror	r20
    236c:	8a 95       	dec	r24
    236e:	e2 f7       	brpl	.-8      	; 0x2368 <DIO_u8GetPinValue+0xe4>
    2370:	ca 01       	movw	r24, r20
    2372:	81 70       	andi	r24, 0x01	; 1
    2374:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {

    }
    return(DIO_u8StorePinValue);
    2376:	89 81       	ldd	r24, Y+1	; 0x01
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <DIO_voidSetPortSpecificDirection>:

void DIO_voidSetPortSpecificDirection (u8 Copy_u8PortName, u8 Copy_u8PinDirection)
{
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	00 d0       	rcall	.+0      	; 0x238e <DIO_voidSetPortSpecificDirection+0x6>
    238e:	00 d0       	rcall	.+0      	; 0x2390 <DIO_voidSetPortSpecificDirection+0x8>
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	89 83       	std	Y+1, r24	; 0x01
    2396:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8PortName <= PORTD && Copy_u8PinDirection <= 0XFF)
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	84 30       	cpi	r24, 0x04	; 4
    239c:	90 f5       	brcc	.+100    	; 0x2402 <DIO_voidSetPortSpecificDirection+0x7a>
    {
        switch (Copy_u8PortName)
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	3c 83       	std	Y+4, r19	; 0x04
    23a6:	2b 83       	std	Y+3, r18	; 0x03
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	91 05       	cpc	r25, r1
    23b0:	d1 f0       	breq	.+52     	; 0x23e6 <DIO_voidSetPortSpecificDirection+0x5e>
    23b2:	2b 81       	ldd	r18, Y+3	; 0x03
    23b4:	3c 81       	ldd	r19, Y+4	; 0x04
    23b6:	22 30       	cpi	r18, 0x02	; 2
    23b8:	31 05       	cpc	r19, r1
    23ba:	2c f4       	brge	.+10     	; 0x23c6 <DIO_voidSetPortSpecificDirection+0x3e>
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	61 f0       	breq	.+24     	; 0x23dc <DIO_voidSetPortSpecificDirection+0x54>
    23c4:	1e c0       	rjmp	.+60     	; 0x2402 <DIO_voidSetPortSpecificDirection+0x7a>
    23c6:	2b 81       	ldd	r18, Y+3	; 0x03
    23c8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ca:	22 30       	cpi	r18, 0x02	; 2
    23cc:	31 05       	cpc	r19, r1
    23ce:	81 f0       	breq	.+32     	; 0x23f0 <DIO_voidSetPortSpecificDirection+0x68>
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	83 30       	cpi	r24, 0x03	; 3
    23d6:	91 05       	cpc	r25, r1
    23d8:	81 f0       	breq	.+32     	; 0x23fa <DIO_voidSetPortSpecificDirection+0x72>
    23da:	13 c0       	rjmp	.+38     	; 0x2402 <DIO_voidSetPortSpecificDirection+0x7a>
        {
            case PORTA:
                DIO_DDRA = Copy_u8PinDirection;
    23dc:	ea e3       	ldi	r30, 0x3A	; 58
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	80 83       	st	Z, r24
    23e4:	0e c0       	rjmp	.+28     	; 0x2402 <DIO_voidSetPortSpecificDirection+0x7a>
            break;

            case PORTB:
                DIO_DDRB = Copy_u8PinDirection;
    23e6:	e7 e3       	ldi	r30, 0x37	; 55
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	80 83       	st	Z, r24
    23ee:	09 c0       	rjmp	.+18     	; 0x2402 <DIO_voidSetPortSpecificDirection+0x7a>
            break;

            case PORTC:
                DIO_DDRC = Copy_u8PinDirection;
    23f0:	e4 e3       	ldi	r30, 0x34	; 52
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	80 83       	st	Z, r24
    23f8:	04 c0       	rjmp	.+8      	; 0x2402 <DIO_voidSetPortSpecificDirection+0x7a>
            break;

            case PORTD:
                DIO_DDRD = Copy_u8PinDirection;
    23fa:	e1 e3       	ldi	r30, 0x31	; 49
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	80 83       	st	Z, r24
    }
    else
    {

    }
}
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <DIO_voidSetPortSpecificValue>:

void DIO_voidSetPortSpecificValue (u8 Copy_u8PortName, u8 Copy_u8PortValue)
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	00 d0       	rcall	.+0      	; 0x2416 <DIO_voidSetPortSpecificValue+0x6>
    2416:	00 d0       	rcall	.+0      	; 0x2418 <DIO_voidSetPortSpecificValue+0x8>
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8PortName <= PORTD && Copy_u8PortValue <= 0XFF)
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	84 30       	cpi	r24, 0x04	; 4
    2424:	90 f5       	brcc	.+100    	; 0x248a <DIO_voidSetPortSpecificValue+0x7a>
    {
        switch (Copy_u8PortName)
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	3c 83       	std	Y+4, r19	; 0x04
    242e:	2b 83       	std	Y+3, r18	; 0x03
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	91 05       	cpc	r25, r1
    2438:	d1 f0       	breq	.+52     	; 0x246e <DIO_voidSetPortSpecificValue+0x5e>
    243a:	2b 81       	ldd	r18, Y+3	; 0x03
    243c:	3c 81       	ldd	r19, Y+4	; 0x04
    243e:	22 30       	cpi	r18, 0x02	; 2
    2440:	31 05       	cpc	r19, r1
    2442:	2c f4       	brge	.+10     	; 0x244e <DIO_voidSetPortSpecificValue+0x3e>
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	9c 81       	ldd	r25, Y+4	; 0x04
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	61 f0       	breq	.+24     	; 0x2464 <DIO_voidSetPortSpecificValue+0x54>
    244c:	1e c0       	rjmp	.+60     	; 0x248a <DIO_voidSetPortSpecificValue+0x7a>
    244e:	2b 81       	ldd	r18, Y+3	; 0x03
    2450:	3c 81       	ldd	r19, Y+4	; 0x04
    2452:	22 30       	cpi	r18, 0x02	; 2
    2454:	31 05       	cpc	r19, r1
    2456:	81 f0       	breq	.+32     	; 0x2478 <DIO_voidSetPortSpecificValue+0x68>
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	9c 81       	ldd	r25, Y+4	; 0x04
    245c:	83 30       	cpi	r24, 0x03	; 3
    245e:	91 05       	cpc	r25, r1
    2460:	81 f0       	breq	.+32     	; 0x2482 <DIO_voidSetPortSpecificValue+0x72>
    2462:	13 c0       	rjmp	.+38     	; 0x248a <DIO_voidSetPortSpecificValue+0x7a>
        {
            case PORTA:
                DIO_PORTA = Copy_u8PortValue;
    2464:	eb e3       	ldi	r30, 0x3B	; 59
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	80 83       	st	Z, r24
    246c:	0e c0       	rjmp	.+28     	; 0x248a <DIO_voidSetPortSpecificValue+0x7a>
            break;

            case PORTB:
                DIO_PORTB = Copy_u8PortValue;
    246e:	e8 e3       	ldi	r30, 0x38	; 56
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	80 83       	st	Z, r24
    2476:	09 c0       	rjmp	.+18     	; 0x248a <DIO_voidSetPortSpecificValue+0x7a>
            break;

            case PORTC:
                DIO_PORTC = Copy_u8PortValue;
    2478:	e5 e3       	ldi	r30, 0x35	; 53
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	80 83       	st	Z, r24
    2480:	04 c0       	rjmp	.+8      	; 0x248a <DIO_voidSetPortSpecificValue+0x7a>
            break;

            case PORTD:
                DIO_PORTD = Copy_u8PortValue;
    2482:	e2 e3       	ldi	r30, 0x32	; 50
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	80 83       	st	Z, r24
    }
    else
    {

    }
}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <DIO_voidSetPortDirection>:
void DIO_voidSetPortDirection(u8 Copy_u8PortName, u8 Copy_u8PortValue)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <DIO_voidSetPortDirection+0x6>
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <DIO_voidSetPortDirection+0x8>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8PortName <= PORTD && Copy_u8PortValue <= OUTPUT)
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	84 30       	cpi	r24, 0x04	; 4
    24ac:	08 f0       	brcs	.+2      	; 0x24b0 <DIO_voidSetPortDirection+0x18>
    24ae:	5e c0       	rjmp	.+188    	; 0x256c <DIO_voidSetPortDirection+0xd4>
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	82 30       	cpi	r24, 0x02	; 2
    24b4:	08 f0       	brcs	.+2      	; 0x24b8 <DIO_voidSetPortDirection+0x20>
    24b6:	5a c0       	rjmp	.+180    	; 0x256c <DIO_voidSetPortDirection+0xd4>
    {
        switch (Copy_u8PortName)
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	3c 83       	std	Y+4, r19	; 0x04
    24c0:	2b 83       	std	Y+3, r18	; 0x03
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	9c 81       	ldd	r25, Y+4	; 0x04
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	91 05       	cpc	r25, r1
    24ca:	21 f1       	breq	.+72     	; 0x2514 <DIO_voidSetPortDirection+0x7c>
    24cc:	2b 81       	ldd	r18, Y+3	; 0x03
    24ce:	3c 81       	ldd	r19, Y+4	; 0x04
    24d0:	22 30       	cpi	r18, 0x02	; 2
    24d2:	31 05       	cpc	r19, r1
    24d4:	2c f4       	brge	.+10     	; 0x24e0 <DIO_voidSetPortDirection+0x48>
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	9c 81       	ldd	r25, Y+4	; 0x04
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	61 f0       	breq	.+24     	; 0x24f6 <DIO_voidSetPortDirection+0x5e>
    24de:	46 c0       	rjmp	.+140    	; 0x256c <DIO_voidSetPortDirection+0xd4>
    24e0:	2b 81       	ldd	r18, Y+3	; 0x03
    24e2:	3c 81       	ldd	r19, Y+4	; 0x04
    24e4:	22 30       	cpi	r18, 0x02	; 2
    24e6:	31 05       	cpc	r19, r1
    24e8:	21 f1       	breq	.+72     	; 0x2532 <DIO_voidSetPortDirection+0x9a>
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	83 30       	cpi	r24, 0x03	; 3
    24f0:	91 05       	cpc	r25, r1
    24f2:	71 f1       	breq	.+92     	; 0x2550 <DIO_voidSetPortDirection+0xb8>
    24f4:	3b c0       	rjmp	.+118    	; 0x256c <DIO_voidSetPortDirection+0xd4>
        {
            case PORTA:
                if(Copy_u8PortValue == OUTPUT)
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	81 30       	cpi	r24, 0x01	; 1
    24fa:	29 f4       	brne	.+10     	; 0x2506 <DIO_voidSetPortDirection+0x6e>
                {
                    DIO_DDRA = 0XFF;
    24fc:	ea e3       	ldi	r30, 0x3A	; 58
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	8f ef       	ldi	r24, 0xFF	; 255
    2502:	80 83       	st	Z, r24
    2504:	33 c0       	rjmp	.+102    	; 0x256c <DIO_voidSetPortDirection+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	88 23       	and	r24, r24
    250a:	81 f5       	brne	.+96     	; 0x256c <DIO_voidSetPortDirection+0xd4>
                {
                    DIO_DDRA = 0X00;
    250c:	ea e3       	ldi	r30, 0x3A	; 58
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	10 82       	st	Z, r1
    2512:	2c c0       	rjmp	.+88     	; 0x256c <DIO_voidSetPortDirection+0xd4>
                {

                }
            break;
            case PORTB:
                if(Copy_u8PortValue == OUTPUT)
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	29 f4       	brne	.+10     	; 0x2524 <DIO_voidSetPortDirection+0x8c>
                {
                    DIO_DDRB = 0XFF;
    251a:	e7 e3       	ldi	r30, 0x37	; 55
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	8f ef       	ldi	r24, 0xFF	; 255
    2520:	80 83       	st	Z, r24
    2522:	24 c0       	rjmp	.+72     	; 0x256c <DIO_voidSetPortDirection+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	88 23       	and	r24, r24
    2528:	09 f5       	brne	.+66     	; 0x256c <DIO_voidSetPortDirection+0xd4>
                {
                    DIO_DDRB = 0X00;
    252a:	e7 e3       	ldi	r30, 0x37	; 55
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	10 82       	st	Z, r1
    2530:	1d c0       	rjmp	.+58     	; 0x256c <DIO_voidSetPortDirection+0xd4>
                {

                }
            break;
            case PORTC:
                if(Copy_u8PortValue == OUTPUT)
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	81 30       	cpi	r24, 0x01	; 1
    2536:	29 f4       	brne	.+10     	; 0x2542 <DIO_voidSetPortDirection+0xaa>
                {
                    DIO_DDRC = 0XFF;
    2538:	e4 e3       	ldi	r30, 0x34	; 52
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	8f ef       	ldi	r24, 0xFF	; 255
    253e:	80 83       	st	Z, r24
    2540:	15 c0       	rjmp	.+42     	; 0x256c <DIO_voidSetPortDirection+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	88 23       	and	r24, r24
    2546:	91 f4       	brne	.+36     	; 0x256c <DIO_voidSetPortDirection+0xd4>
                {
                    DIO_DDRC = 0X00;
    2548:	e4 e3       	ldi	r30, 0x34	; 52
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	10 82       	st	Z, r1
    254e:	0e c0       	rjmp	.+28     	; 0x256c <DIO_voidSetPortDirection+0xd4>
                {

                }
            break;
            case PORTD:
                if(Copy_u8PortValue == OUTPUT)
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	81 30       	cpi	r24, 0x01	; 1
    2554:	29 f4       	brne	.+10     	; 0x2560 <DIO_voidSetPortDirection+0xc8>
                {
                    DIO_DDRD = 0XFF;
    2556:	e1 e3       	ldi	r30, 0x31	; 49
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	8f ef       	ldi	r24, 0xFF	; 255
    255c:	80 83       	st	Z, r24
    255e:	06 c0       	rjmp	.+12     	; 0x256c <DIO_voidSetPortDirection+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	88 23       	and	r24, r24
    2564:	19 f4       	brne	.+6      	; 0x256c <DIO_voidSetPortDirection+0xd4>
                {
                    DIO_DDRD = 0X00;
    2566:	e1 e3       	ldi	r30, 0x31	; 49
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	10 82       	st	Z, r1
    }
    else
    {

    }
}
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8PortName, u8 Copy_u8PortValue)
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	00 d0       	rcall	.+0      	; 0x2580 <DIO_voidSetPortValue+0x6>
    2580:	00 d0       	rcall	.+0      	; 0x2582 <DIO_voidSetPortValue+0x8>
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8PortName <= PORTD && Copy_u8PortValue <= HIGH)
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	84 30       	cpi	r24, 0x04	; 4
    258e:	08 f0       	brcs	.+2      	; 0x2592 <DIO_voidSetPortValue+0x18>
    2590:	5e c0       	rjmp	.+188    	; 0x264e <DIO_voidSetPortValue+0xd4>
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	82 30       	cpi	r24, 0x02	; 2
    2596:	08 f0       	brcs	.+2      	; 0x259a <DIO_voidSetPortValue+0x20>
    2598:	5a c0       	rjmp	.+180    	; 0x264e <DIO_voidSetPortValue+0xd4>
    {
        switch (Copy_u8PortName)
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	3c 83       	std	Y+4, r19	; 0x04
    25a2:	2b 83       	std	Y+3, r18	; 0x03
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	81 30       	cpi	r24, 0x01	; 1
    25aa:	91 05       	cpc	r25, r1
    25ac:	21 f1       	breq	.+72     	; 0x25f6 <DIO_voidSetPortValue+0x7c>
    25ae:	2b 81       	ldd	r18, Y+3	; 0x03
    25b0:	3c 81       	ldd	r19, Y+4	; 0x04
    25b2:	22 30       	cpi	r18, 0x02	; 2
    25b4:	31 05       	cpc	r19, r1
    25b6:	2c f4       	brge	.+10     	; 0x25c2 <DIO_voidSetPortValue+0x48>
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	61 f0       	breq	.+24     	; 0x25d8 <DIO_voidSetPortValue+0x5e>
    25c0:	46 c0       	rjmp	.+140    	; 0x264e <DIO_voidSetPortValue+0xd4>
    25c2:	2b 81       	ldd	r18, Y+3	; 0x03
    25c4:	3c 81       	ldd	r19, Y+4	; 0x04
    25c6:	22 30       	cpi	r18, 0x02	; 2
    25c8:	31 05       	cpc	r19, r1
    25ca:	21 f1       	breq	.+72     	; 0x2614 <DIO_voidSetPortValue+0x9a>
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	83 30       	cpi	r24, 0x03	; 3
    25d2:	91 05       	cpc	r25, r1
    25d4:	71 f1       	breq	.+92     	; 0x2632 <DIO_voidSetPortValue+0xb8>
    25d6:	3b c0       	rjmp	.+118    	; 0x264e <DIO_voidSetPortValue+0xd4>
        {
            case PORTA:
                if(Copy_u8PortValue == HIGH)
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	81 30       	cpi	r24, 0x01	; 1
    25dc:	29 f4       	brne	.+10     	; 0x25e8 <DIO_voidSetPortValue+0x6e>
                {
                    DIO_PORTA = 0XFF;
    25de:	eb e3       	ldi	r30, 0x3B	; 59
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	8f ef       	ldi	r24, 0xFF	; 255
    25e4:	80 83       	st	Z, r24
    25e6:	33 c0       	rjmp	.+102    	; 0x264e <DIO_voidSetPortValue+0xd4>
                }
                else if(Copy_u8PortValue == LOW)
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	88 23       	and	r24, r24
    25ec:	81 f5       	brne	.+96     	; 0x264e <DIO_voidSetPortValue+0xd4>
                {
                    DIO_PORTA = 0X00;
    25ee:	eb e3       	ldi	r30, 0x3B	; 59
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	10 82       	st	Z, r1
    25f4:	2c c0       	rjmp	.+88     	; 0x264e <DIO_voidSetPortValue+0xd4>
                {

                }
            break;
            case PORTB:
                if(Copy_u8PortValue == HIGH)
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	81 30       	cpi	r24, 0x01	; 1
    25fa:	29 f4       	brne	.+10     	; 0x2606 <DIO_voidSetPortValue+0x8c>
                {
                    DIO_PORTB = 0XFF;
    25fc:	e8 e3       	ldi	r30, 0x38	; 56
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	8f ef       	ldi	r24, 0xFF	; 255
    2602:	80 83       	st	Z, r24
    2604:	24 c0       	rjmp	.+72     	; 0x264e <DIO_voidSetPortValue+0xd4>
                }
                else if(Copy_u8PortValue == LOW)
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	88 23       	and	r24, r24
    260a:	09 f5       	brne	.+66     	; 0x264e <DIO_voidSetPortValue+0xd4>
                {
                    DIO_PORTB = 0X00;
    260c:	e8 e3       	ldi	r30, 0x38	; 56
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	10 82       	st	Z, r1
    2612:	1d c0       	rjmp	.+58     	; 0x264e <DIO_voidSetPortValue+0xd4>
                {

                }
            break;
            case PORTC:
                if(Copy_u8PortValue == HIGH)
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	81 30       	cpi	r24, 0x01	; 1
    2618:	29 f4       	brne	.+10     	; 0x2624 <DIO_voidSetPortValue+0xaa>
                {
                    DIO_PORTC = 0XFF;
    261a:	e5 e3       	ldi	r30, 0x35	; 53
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	8f ef       	ldi	r24, 0xFF	; 255
    2620:	80 83       	st	Z, r24
    2622:	15 c0       	rjmp	.+42     	; 0x264e <DIO_voidSetPortValue+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	88 23       	and	r24, r24
    2628:	91 f4       	brne	.+36     	; 0x264e <DIO_voidSetPortValue+0xd4>
                {
                    DIO_PORTC = 0X00;
    262a:	e5 e3       	ldi	r30, 0x35	; 53
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	10 82       	st	Z, r1
    2630:	0e c0       	rjmp	.+28     	; 0x264e <DIO_voidSetPortValue+0xd4>
                {

                }
            break;
            case PORTD:
                if(Copy_u8PortValue == HIGH)
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	81 30       	cpi	r24, 0x01	; 1
    2636:	29 f4       	brne	.+10     	; 0x2642 <DIO_voidSetPortValue+0xc8>
                {
                    DIO_PORTD = 0XFF;
    2638:	e2 e3       	ldi	r30, 0x32	; 50
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	8f ef       	ldi	r24, 0xFF	; 255
    263e:	80 83       	st	Z, r24
    2640:	06 c0       	rjmp	.+12     	; 0x264e <DIO_voidSetPortValue+0xd4>
                }
                else if(Copy_u8PortValue == LOW)
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	88 23       	and	r24, r24
    2646:	19 f4       	brne	.+6      	; 0x264e <DIO_voidSetPortValue+0xd4>
                {
                    DIO_PORTD = 0X00;
    2648:	e2 e3       	ldi	r30, 0x32	; 50
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	10 82       	st	Z, r1
    }
    else
    {

    }
}
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	08 95       	ret

0000265c <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue (u8 Copy_u8PortName)
{
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	00 d0       	rcall	.+0      	; 0x2662 <DIO_u8GetPortValue+0x6>
    2662:	00 d0       	rcall	.+0      	; 0x2664 <DIO_u8GetPortValue+0x8>
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	8a 83       	std	Y+2, r24	; 0x02
	u8 DIO_u8StorePinValue = 0x00;
    266a:	19 82       	std	Y+1, r1	; 0x01
    
    if(Copy_u8PortName <= PORTD)
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	84 30       	cpi	r24, 0x04	; 4
    2670:	08 f0       	brcs	.+2      	; 0x2674 <DIO_u8GetPortValue+0x18>
    2672:	3e c0       	rjmp	.+124    	; 0x26f0 <DIO_u8GetPortValue+0x94>
    {
	    switch(Copy_u8PortName)
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	3c 83       	std	Y+4, r19	; 0x04
    267c:	2b 83       	std	Y+3, r18	; 0x03
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	9c 81       	ldd	r25, Y+4	; 0x04
    2682:	81 30       	cpi	r24, 0x01	; 1
    2684:	91 05       	cpc	r25, r1
    2686:	e9 f0       	breq	.+58     	; 0x26c2 <DIO_u8GetPortValue+0x66>
    2688:	2b 81       	ldd	r18, Y+3	; 0x03
    268a:	3c 81       	ldd	r19, Y+4	; 0x04
    268c:	22 30       	cpi	r18, 0x02	; 2
    268e:	31 05       	cpc	r19, r1
    2690:	2c f4       	brge	.+10     	; 0x269c <DIO_u8GetPortValue+0x40>
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	61 f0       	breq	.+24     	; 0x26b2 <DIO_u8GetPortValue+0x56>
    269a:	2a c0       	rjmp	.+84     	; 0x26f0 <DIO_u8GetPortValue+0x94>
    269c:	2b 81       	ldd	r18, Y+3	; 0x03
    269e:	3c 81       	ldd	r19, Y+4	; 0x04
    26a0:	22 30       	cpi	r18, 0x02	; 2
    26a2:	31 05       	cpc	r19, r1
    26a4:	b1 f0       	breq	.+44     	; 0x26d2 <DIO_u8GetPortValue+0x76>
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	83 30       	cpi	r24, 0x03	; 3
    26ac:	91 05       	cpc	r25, r1
    26ae:	c9 f0       	breq	.+50     	; 0x26e2 <DIO_u8GetPortValue+0x86>
    26b0:	1f c0       	rjmp	.+62     	; 0x26f0 <DIO_u8GetPortValue+0x94>
	    {
	    	case PORTA:
	    		if(DIO_PINA == 0XFF)
    26b2:	e9 e3       	ldi	r30, 0x39	; 57
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	8f 3f       	cpi	r24, 0xFF	; 255
    26ba:	d1 f4       	brne	.+52     	; 0x26f0 <DIO_u8GetPortValue+0x94>
	    		{
	    			DIO_u8StorePinValue = 0XFF;
    26bc:	8f ef       	ldi	r24, 0xFF	; 255
    26be:	89 83       	std	Y+1, r24	; 0x01
    26c0:	17 c0       	rjmp	.+46     	; 0x26f0 <DIO_u8GetPortValue+0x94>
                {

                }
	    	break;
	    	case PORTB:
	    		if(DIO_PINB == 0XFF)
    26c2:	e6 e3       	ldi	r30, 0x36	; 54
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	8f 3f       	cpi	r24, 0xFF	; 255
    26ca:	91 f4       	brne	.+36     	; 0x26f0 <DIO_u8GetPortValue+0x94>
	    		{
	    			DIO_u8StorePinValue = 0XFF;
    26cc:	8f ef       	ldi	r24, 0xFF	; 255
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	0f c0       	rjmp	.+30     	; 0x26f0 <DIO_u8GetPortValue+0x94>
                {

                }
	    	break;
	    	case PORTC:
	    		if(DIO_PINC == 0XFF)
    26d2:	e3 e3       	ldi	r30, 0x33	; 51
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	8f 3f       	cpi	r24, 0xFF	; 255
    26da:	51 f4       	brne	.+20     	; 0x26f0 <DIO_u8GetPortValue+0x94>
	    		{
	    			DIO_u8StorePinValue = 0XFF;
    26dc:	8f ef       	ldi	r24, 0xFF	; 255
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	07 c0       	rjmp	.+14     	; 0x26f0 <DIO_u8GetPortValue+0x94>
                {

                }
	    	break;
	    	case PORTD:
	    		if(DIO_PIND == 0XFF)
    26e2:	e0 e3       	ldi	r30, 0x30	; 48
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	8f 3f       	cpi	r24, 0xFF	; 255
    26ea:	11 f4       	brne	.+4      	; 0x26f0 <DIO_u8GetPortValue+0x94>
	    		{
	    			DIO_u8StorePinValue = 0XFF;
    26ec:	8f ef       	ldi	r24, 0xFF	; 255
    26ee:	89 83       	std	Y+1, r24	; 0x01
    else
    {

    }

	return(DIO_u8StorePinValue);
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <DDIO_voidSetPortPullUp>:

void DDIO_voidSetPortPullUp(u8 Copy_u8PortName)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	00 d0       	rcall	.+0      	; 0x2706 <DDIO_voidSetPortPullUp+0x6>
    2706:	0f 92       	push	r0
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8PortName <= PORTD)
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	84 30       	cpi	r24, 0x04	; 4
    2712:	08 f0       	brcs	.+2      	; 0x2716 <DDIO_voidSetPortPullUp+0x16>
    2714:	3e c0       	rjmp	.+124    	; 0x2792 <DDIO_voidSetPortPullUp+0x92>
    {
	    switch(Copy_u8PortName)
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	3b 83       	std	Y+3, r19	; 0x03
    271e:	2a 83       	std	Y+2, r18	; 0x02
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	9b 81       	ldd	r25, Y+3	; 0x03
    2724:	81 30       	cpi	r24, 0x01	; 1
    2726:	91 05       	cpc	r25, r1
    2728:	e9 f0       	breq	.+58     	; 0x2764 <DDIO_voidSetPortPullUp+0x64>
    272a:	2a 81       	ldd	r18, Y+2	; 0x02
    272c:	3b 81       	ldd	r19, Y+3	; 0x03
    272e:	22 30       	cpi	r18, 0x02	; 2
    2730:	31 05       	cpc	r19, r1
    2732:	2c f4       	brge	.+10     	; 0x273e <DDIO_voidSetPortPullUp+0x3e>
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	9b 81       	ldd	r25, Y+3	; 0x03
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	61 f0       	breq	.+24     	; 0x2754 <DDIO_voidSetPortPullUp+0x54>
    273c:	2a c0       	rjmp	.+84     	; 0x2792 <DDIO_voidSetPortPullUp+0x92>
    273e:	2a 81       	ldd	r18, Y+2	; 0x02
    2740:	3b 81       	ldd	r19, Y+3	; 0x03
    2742:	22 30       	cpi	r18, 0x02	; 2
    2744:	31 05       	cpc	r19, r1
    2746:	b1 f0       	breq	.+44     	; 0x2774 <DDIO_voidSetPortPullUp+0x74>
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	9b 81       	ldd	r25, Y+3	; 0x03
    274c:	83 30       	cpi	r24, 0x03	; 3
    274e:	91 05       	cpc	r25, r1
    2750:	c9 f0       	breq	.+50     	; 0x2784 <DDIO_voidSetPortPullUp+0x84>
    2752:	1f c0       	rjmp	.+62     	; 0x2792 <DDIO_voidSetPortPullUp+0x92>
	    {
	    	case PORTA:
	    		DIO_DDRA = 0X00;
    2754:	ea e3       	ldi	r30, 0x3A	; 58
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	10 82       	st	Z, r1
	    		DIO_PORTA = 0XFF;
    275a:	eb e3       	ldi	r30, 0x3B	; 59
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	8f ef       	ldi	r24, 0xFF	; 255
    2760:	80 83       	st	Z, r24
    2762:	17 c0       	rjmp	.+46     	; 0x2792 <DDIO_voidSetPortPullUp+0x92>
	    	break;
	    	case PORTB:
	    		DIO_DDRB = 0X00;
    2764:	e7 e3       	ldi	r30, 0x37	; 55
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	10 82       	st	Z, r1
	    		DIO_PORTB = 0XFF;
    276a:	e8 e3       	ldi	r30, 0x38	; 56
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	8f ef       	ldi	r24, 0xFF	; 255
    2770:	80 83       	st	Z, r24
    2772:	0f c0       	rjmp	.+30     	; 0x2792 <DDIO_voidSetPortPullUp+0x92>
	    	break;
	    	case PORTC:
	    		DIO_DDRC = 0X00;
    2774:	e4 e3       	ldi	r30, 0x34	; 52
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	10 82       	st	Z, r1
	    		DIO_PORTC = 0XFF;
    277a:	e5 e3       	ldi	r30, 0x35	; 53
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	8f ef       	ldi	r24, 0xFF	; 255
    2780:	80 83       	st	Z, r24
    2782:	07 c0       	rjmp	.+14     	; 0x2792 <DDIO_voidSetPortPullUp+0x92>
	    	break;
	    	case PORTD:
	    		DIO_DDRD = 0X00;
    2784:	e1 e3       	ldi	r30, 0x31	; 49
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	10 82       	st	Z, r1
	    		DIO_PORTD = 0XFF;
    278a:	e2 e3       	ldi	r30, 0x32	; 50
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	8f ef       	ldi	r24, 0xFF	; 255
    2790:	80 83       	st	Z, r24
    }
    else
    {
        
    }
}
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <ADC_voidInit>:


         

void ADC_voidInit(void)
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    /*Select The Prescaler = 64*/
    ADCSRA &= ADC_PRESCALER_MASK_CLR;
    27a6:	a6 e2       	ldi	r26, 0x26	; 38
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e6 e2       	ldi	r30, 0x26	; 38
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	88 7f       	andi	r24, 0xF8	; 248
    27b2:	8c 93       	st	X, r24
    ADCSRA |= ADC_PRESCALER_SELECT_VALUE;
    27b4:	a6 e2       	ldi	r26, 0x26	; 38
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e6 e2       	ldi	r30, 0x26	; 38
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	86 60       	ori	r24, 0x06	; 6
    27c0:	8c 93       	st	X, r24
    /*Adjustment*/
    #if ADC_RESULT_ADJUSTMENT == ACD_LEFT_ADJUST
        SET_BIT(ADMUX, ADMUX_ADLAR);
    27c2:	a7 e2       	ldi	r26, 0x27	; 39
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e7 e2       	ldi	r30, 0x27	; 39
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	80 62       	ori	r24, 0x20	; 32
    27ce:	8c 93       	st	X, r24
    #elif ADC_RESULT_ADJUSTMENT == ACD_RIGHT_ADJUST
        CLR_BIT(ADMUX, ADMUX_ADLAR);
    #endif
    /*Default Choose ACD Channel */
    ADMUX &= ADC_Channel_MASK_CLR;
    27d0:	a7 e2       	ldi	r26, 0x27	; 39
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	e7 e2       	ldi	r30, 0x27	; 39
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	80 7e       	andi	r24, 0xE0	; 224
    27dc:	8c 93       	st	X, r24
    ADMUX |= ADC_Channel_0;
    27de:	a7 e2       	ldi	r26, 0x27	; 39
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e7 e2       	ldi	r30, 0x27	; 39
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	8c 93       	st	X, r24
    /*Select Mode Of ADC*/
    #if ADC_MODE_SELECT == ADC_SINGLE_CONVERSION_MODE
        CLR_BIT(ADCSRA, ADCSRA_ADATE);
    27ea:	a6 e2       	ldi	r26, 0x26	; 38
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	e6 e2       	ldi	r30, 0x26	; 38
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	8f 7d       	andi	r24, 0xDF	; 223
    27f6:	8c 93       	st	X, r24
        SET_BIT(ADCSRA, ADCSRA_ADATE);
        SFIOR &= ADC_AUTO_TRIG_SRC_MASK_CLR;
        SFIOR |= ADC_AUTO_TRIG_SRC_FREE_RUNNING_MSK;
    #endif
    /*Referance voltage*/
    ADCSRA &= ADC_REFERANCE_VOLTAGE_MASK_CLR;
    27f8:	a6 e2       	ldi	r26, 0x26	; 38
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e6 e2       	ldi	r30, 0x26	; 38
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	8f 73       	andi	r24, 0x3F	; 63
    2804:	8c 93       	st	X, r24
    ADCSRA |= ADC_REFERANCE_VOLTAGE_SELECT_VALUE;
    2806:	a6 e2       	ldi	r26, 0x26	; 38
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	e6 e2       	ldi	r30, 0x26	; 38
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	80 64       	ori	r24, 0x40	; 64
    2812:	8c 93       	st	X, r24
    /*Enable ADC*/
    SET_BIT(ADCSRA, ADCSRA_ADEN);   
    2814:	a6 e2       	ldi	r26, 0x26	; 38
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	e6 e2       	ldi	r30, 0x26	; 38
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	80 68       	ori	r24, 0x80	; 128
    2820:	8c 93       	st	X, r24
}
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	08 95       	ret

00002828 <ACD_voidStartConversionSynchronous>:




u8 ACD_voidStartConversionSynchronous(u8 Copu_u8ADCChannel)
{
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	0f 92       	push	r0
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	89 83       	std	Y+1, r24	; 0x01
    /* Choose ACD Channel */
    ADMUX &= ADC_Channel_MASK_CLR;
    2834:	a7 e2       	ldi	r26, 0x27	; 39
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	e7 e2       	ldi	r30, 0x27	; 39
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	80 7e       	andi	r24, 0xE0	; 224
    2840:	8c 93       	st	X, r24
    ADMUX |= Copu_u8ADCChannel;
    2842:	a7 e2       	ldi	r26, 0x27	; 39
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e7 e2       	ldi	r30, 0x27	; 39
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	90 81       	ld	r25, Z
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	89 2b       	or	r24, r25
    2850:	8c 93       	st	X, r24
    /*Trigger ADC*/
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    2852:	a6 e2       	ldi	r26, 0x26	; 38
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	e6 e2       	ldi	r30, 0x26	; 38
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	80 64       	ori	r24, 0x40	; 64
    285e:	8c 93       	st	X, r24
    /*Polling (Busy Wait) Till The ADC End Conversion*/
    while(GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
    2860:	e6 e2       	ldi	r30, 0x26	; 38
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	82 95       	swap	r24
    2868:	8f 70       	andi	r24, 0x0F	; 15
    286a:	88 2f       	mov	r24, r24
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	81 70       	andi	r24, 0x01	; 1
    2870:	90 70       	andi	r25, 0x00	; 0
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	a9 f3       	breq	.-22     	; 0x2860 <ACD_voidStartConversionSynchronous+0x38>

    /*Clear ADC Flag*/
    SET_BIT(ADCSRA, ADCSRA_ADIF);
    2876:	a6 e2       	ldi	r26, 0x26	; 38
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e6 e2       	ldi	r30, 0x26	; 38
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	80 61       	ori	r24, 0x10	; 16
    2882:	8c 93       	st	X, r24

    /*Return The Digital Value*/
    #if ADC_RESULT_ADJUSTMENT == ACD_LEFT_ADJUST
        return (ADCH);
    2884:	e5 e2       	ldi	r30, 0x25	; 37
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    #elif ADC_RESULT_ADJUSTMENT == ACD_RIGHT_ADJUST
        return (ADCL);
    #endif
}
    288a:	0f 90       	pop	r0
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <ACD_voidStartConversionASynchronous>:

void(*ADC_NotificationFunction)(u8 *) = NULL_POINTER;
void ACD_voidStartConversionASynchronous(u8 Copu_u8ADCChannel, void(*NotificationFunction)(u8 *))
{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <ACD_voidStartConversionASynchronous+0x6>
    2898:	0f 92       	push	r0
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	89 83       	std	Y+1, r24	; 0x01
    28a0:	7b 83       	std	Y+3, r23	; 0x03
    28a2:	6a 83       	std	Y+2, r22	; 0x02
    ADC_NotificationFunction = NotificationFunction;
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	9b 81       	ldd	r25, Y+3	; 0x03
    28a8:	90 93 9f 00 	sts	0x009F, r25
    28ac:	80 93 9e 00 	sts	0x009E, r24
    /* Choose ACD Channel */
    ADMUX &= ADC_Channel_MASK_CLR;
    28b0:	a7 e2       	ldi	r26, 0x27	; 39
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	e7 e2       	ldi	r30, 0x27	; 39
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	80 7e       	andi	r24, 0xE0	; 224
    28bc:	8c 93       	st	X, r24
    ADMUX |= Copu_u8ADCChannel;
    28be:	a7 e2       	ldi	r26, 0x27	; 39
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e7 e2       	ldi	r30, 0x27	; 39
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	90 81       	ld	r25, Z
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	89 2b       	or	r24, r25
    28cc:	8c 93       	st	X, r24
    /*Enable PIE*/
    SET_BIT(ADCSRA, ADCSRA_ADIE);
    28ce:	a6 e2       	ldi	r26, 0x26	; 38
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e6 e2       	ldi	r30, 0x26	; 38
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	88 60       	ori	r24, 0x08	; 8
    28da:	8c 93       	st	X, r24
    /*Trigger ADC*/
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    28dc:	a6 e2       	ldi	r26, 0x26	; 38
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	e6 e2       	ldi	r30, 0x26	; 38
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	80 64       	ori	r24, 0x40	; 64
    28e8:	8c 93       	st	X, r24
}
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <__vector_16>:

u8 ADC_u8Result = 0;
void __vector_16(void)   __attribute__((signal));
void __vector_16(void)
{
    28f6:	1f 92       	push	r1
    28f8:	0f 92       	push	r0
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	0f 92       	push	r0
    28fe:	11 24       	eor	r1, r1
    2900:	2f 93       	push	r18
    2902:	3f 93       	push	r19
    2904:	4f 93       	push	r20
    2906:	5f 93       	push	r21
    2908:	6f 93       	push	r22
    290a:	7f 93       	push	r23
    290c:	8f 93       	push	r24
    290e:	9f 93       	push	r25
    2910:	af 93       	push	r26
    2912:	bf 93       	push	r27
    2914:	ef 93       	push	r30
    2916:	ff 93       	push	r31
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    if(ADC_NotificationFunction != NULL_POINTER)
    2920:	80 91 9e 00 	lds	r24, 0x009E
    2924:	90 91 9f 00 	lds	r25, 0x009F
    2928:	00 97       	sbiw	r24, 0x00	; 0
    292a:	61 f0       	breq	.+24     	; 0x2944 <__vector_16+0x4e>
    {
        #if ADC_RESULT_ADJUSTMENT == ACD_LEFT_ADJUST
            ADC_u8Result = ADCH;
    292c:	e5 e2       	ldi	r30, 0x25	; 37
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	80 93 a0 00 	sts	0x00A0, r24
            ADC_NotificationFunction(&ADC_u8Result);
    2936:	e0 91 9e 00 	lds	r30, 0x009E
    293a:	f0 91 9f 00 	lds	r31, 0x009F
    293e:	80 ea       	ldi	r24, 0xA0	; 160
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	09 95       	icall
    }
    else
    {
        
    }
}
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	ff 91       	pop	r31
    294a:	ef 91       	pop	r30
    294c:	bf 91       	pop	r27
    294e:	af 91       	pop	r26
    2950:	9f 91       	pop	r25
    2952:	8f 91       	pop	r24
    2954:	7f 91       	pop	r23
    2956:	6f 91       	pop	r22
    2958:	5f 91       	pop	r21
    295a:	4f 91       	pop	r20
    295c:	3f 91       	pop	r19
    295e:	2f 91       	pop	r18
    2960:	0f 90       	pop	r0
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	0f 90       	pop	r0
    2966:	1f 90       	pop	r1
    2968:	18 95       	reti

0000296a <SSD_voidDisplayNumbers>:
                                     0b00000111,
                                     0b01111111,
                                     0b01101111};

void SSD_voidDisplayNumbers (u8 Copy_u8PortName, u8 Copy_u8DisplayNumber, u8 Copy_u8Type)
{
    296a:	df 93       	push	r29
    296c:	cf 93       	push	r28
    296e:	00 d0       	rcall	.+0      	; 0x2970 <SSD_voidDisplayNumbers+0x6>
    2970:	00 d0       	rcall	.+0      	; 0x2972 <SSD_voidDisplayNumbers+0x8>
    2972:	0f 92       	push	r0
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	6a 83       	std	Y+2, r22	; 0x02
    297c:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_u8PortName <= PORTD && Copy_u8DisplayNumber <= 9 && Copy_u8Type <= CommanAnode)
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	84 30       	cpi	r24, 0x04	; 4
    2982:	90 f5       	brcc	.+100    	; 0x29e8 <SSD_voidDisplayNumbers+0x7e>
    2984:	8a 81       	ldd	r24, Y+2	; 0x02
    2986:	8a 30       	cpi	r24, 0x0A	; 10
    2988:	78 f5       	brcc	.+94     	; 0x29e8 <SSD_voidDisplayNumbers+0x7e>
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	82 30       	cpi	r24, 0x02	; 2
    298e:	60 f5       	brcc	.+88     	; 0x29e8 <SSD_voidDisplayNumbers+0x7e>
    {
        switch (Copy_u8PortName)
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	88 2f       	mov	r24, r24
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	39 f5       	brne	.+78     	; 0x29e8 <SSD_voidDisplayNumbers+0x7e>
        {
            case PORTA:
                    switch(Copy_u8Type)
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	28 2f       	mov	r18, r24
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	3d 83       	std	Y+5, r19	; 0x05
    29a2:	2c 83       	std	Y+4, r18	; 0x04
    29a4:	8c 81       	ldd	r24, Y+4	; 0x04
    29a6:	9d 81       	ldd	r25, Y+5	; 0x05
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	31 f0       	breq	.+12     	; 0x29b8 <SSD_voidDisplayNumbers+0x4e>
    29ac:	2c 81       	ldd	r18, Y+4	; 0x04
    29ae:	3d 81       	ldd	r19, Y+5	; 0x05
    29b0:	21 30       	cpi	r18, 0x01	; 1
    29b2:	31 05       	cpc	r19, r1
    29b4:	61 f0       	breq	.+24     	; 0x29ce <SSD_voidDisplayNumbers+0x64>
    29b6:	18 c0       	rjmp	.+48     	; 0x29e8 <SSD_voidDisplayNumbers+0x7e>
                    {
                        case CommanCathod:
                            DIO_voidSetPortSpecificValue(PORTA, Global_u8ArrayStoreNumbers[Copy_u8DisplayNumber]);
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	88 2f       	mov	r24, r24
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	fc 01       	movw	r30, r24
    29c0:	e8 59       	subi	r30, 0x98	; 152
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	90 81       	ld	r25, Z
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	69 2f       	mov	r22, r25
    29ca:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_voidSetPortSpecificValue>
                        case CommanAnode:
                            DIO_voidSetPortSpecificValue(PORTA, ~Global_u8ArrayStoreNumbers[Copy_u8DisplayNumber]);
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	88 2f       	mov	r24, r24
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	fc 01       	movw	r30, r24
    29d6:	e8 59       	subi	r30, 0x98	; 152
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	98 2f       	mov	r25, r24
    29de:	90 95       	com	r25
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	69 2f       	mov	r22, r25
    29e4:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_voidSetPortSpecificValue>
    else
    {
        
    }   
           
}
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <SMD_voidInit>:
u16 Local_u16TurnsNumber = 0;



void SMD_voidInit(void)
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    DIO_voidSetPortSpecificDirection(SMD_PORT, SMD_PORT_PINS);
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	6f e0       	ldi	r22, 0x0F	; 15
    2a04:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_voidSetPortSpecificDirection>
}
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <SMD_voidContralFullStep>:
void SMD_voidContralFullStep (u16 Copy_u16Angle)
{
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	ae 97       	sbiw	r28, 0x2e	; 46
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	de bf       	out	0x3e, r29	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	cd bf       	out	0x3d, r28	; 61
    2a22:	9e a7       	std	Y+46, r25	; 0x2e
    2a24:	8d a7       	std	Y+45, r24	; 0x2d
    
    Local_u16TurnsNumber = Copy_u16Angle / StrideAngle_OneStep;
    2a26:	80 91 a1 00 	lds	r24, 0x00A1
    2a2a:	28 2f       	mov	r18, r24
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a30:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a32:	b9 01       	movw	r22, r18
    2a34:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodhi4>
    2a38:	cb 01       	movw	r24, r22
    2a3a:	90 93 a3 00 	sts	0x00A3, r25
    2a3e:	80 93 a2 00 	sts	0x00A2, r24
    u16 Local_u16LoopCounter = 0;
    2a42:	1c a6       	std	Y+44, r1	; 0x2c
    2a44:	1b a6       	std	Y+43, r1	; 0x2b
    for(Local_u16LoopCounter = 0; Local_u16LoopCounter <= Local_u16TurnsNumber / 4; Local_u16LoopCounter++)
    2a46:	1c a6       	std	Y+44, r1	; 0x2c
    2a48:	1b a6       	std	Y+43, r1	; 0x2b
    2a4a:	ab c1       	rjmp	.+854    	; 0x2da2 <SMD_voidContralFullStep+0x394>
    {
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	41 e0       	ldi	r20, 0x01	; 1
    2a52:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	61 e0       	ldi	r22, 0x01	; 1
    2a5a:	40 e0       	ldi	r20, 0x00	; 0
    2a5c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	62 e0       	ldi	r22, 0x02	; 2
    2a64:	40 e0       	ldi	r20, 0x00	; 0
    2a66:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	63 e0       	ldi	r22, 0x03	; 3
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	a0 e2       	ldi	r26, 0x20	; 32
    2a7a:	b1 e4       	ldi	r27, 0x41	; 65
    2a7c:	8f a3       	std	Y+39, r24	; 0x27
    2a7e:	98 a7       	std	Y+40, r25	; 0x28
    2a80:	a9 a7       	std	Y+41, r26	; 0x29
    2a82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a84:	6f a1       	ldd	r22, Y+39	; 0x27
    2a86:	78 a5       	ldd	r23, Y+40	; 0x28
    2a88:	89 a5       	ldd	r24, Y+41	; 0x29
    2a8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	4a ef       	ldi	r20, 0xFA	; 250
    2a92:	54 e4       	ldi	r21, 0x44	; 68
    2a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	8b a3       	std	Y+35, r24	; 0x23
    2a9e:	9c a3       	std	Y+36, r25	; 0x24
    2aa0:	ad a3       	std	Y+37, r26	; 0x25
    2aa2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2aa4:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa6:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa8:	8d a1       	ldd	r24, Y+37	; 0x25
    2aaa:	9e a1       	ldd	r25, Y+38	; 0x26
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e8       	ldi	r20, 0x80	; 128
    2ab2:	5f e3       	ldi	r21, 0x3F	; 63
    2ab4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab8:	88 23       	and	r24, r24
    2aba:	2c f4       	brge	.+10     	; 0x2ac6 <SMD_voidContralFullStep+0xb8>
		__ticks = 1;
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	9a a3       	std	Y+34, r25	; 0x22
    2ac2:	89 a3       	std	Y+33, r24	; 0x21
    2ac4:	3f c0       	rjmp	.+126    	; 0x2b44 <SMD_voidContralFullStep+0x136>
	else if (__tmp > 65535)
    2ac6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ac8:	7c a1       	ldd	r23, Y+36	; 0x24
    2aca:	8d a1       	ldd	r24, Y+37	; 0x25
    2acc:	9e a1       	ldd	r25, Y+38	; 0x26
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	3f ef       	ldi	r19, 0xFF	; 255
    2ad2:	4f e7       	ldi	r20, 0x7F	; 127
    2ad4:	57 e4       	ldi	r21, 0x47	; 71
    2ad6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ada:	18 16       	cp	r1, r24
    2adc:	4c f5       	brge	.+82     	; 0x2b30 <SMD_voidContralFullStep+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ade:	6f a1       	ldd	r22, Y+39	; 0x27
    2ae0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ae2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ae4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e2       	ldi	r20, 0x20	; 32
    2aec:	51 e4       	ldi	r21, 0x41	; 65
    2aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	bc 01       	movw	r22, r24
    2af8:	cd 01       	movw	r24, r26
    2afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9a a3       	std	Y+34, r25	; 0x22
    2b04:	89 a3       	std	Y+33, r24	; 0x21
    2b06:	0f c0       	rjmp	.+30     	; 0x2b26 <SMD_voidContralFullStep+0x118>
    2b08:	88 ec       	ldi	r24, 0xC8	; 200
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	98 a3       	std	Y+32, r25	; 0x20
    2b0e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b12:	98 a1       	ldd	r25, Y+32	; 0x20
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <SMD_voidContralFullStep+0x106>
    2b18:	98 a3       	std	Y+32, r25	; 0x20
    2b1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	9a a3       	std	Y+34, r25	; 0x22
    2b24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b26:	89 a1       	ldd	r24, Y+33	; 0x21
    2b28:	9a a1       	ldd	r25, Y+34	; 0x22
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	69 f7       	brne	.-38     	; 0x2b08 <SMD_voidContralFullStep+0xfa>
    2b2e:	14 c0       	rjmp	.+40     	; 0x2b58 <SMD_voidContralFullStep+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b30:	6b a1       	ldd	r22, Y+35	; 0x23
    2b32:	7c a1       	ldd	r23, Y+36	; 0x24
    2b34:	8d a1       	ldd	r24, Y+37	; 0x25
    2b36:	9e a1       	ldd	r25, Y+38	; 0x26
    2b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	9a a3       	std	Y+34, r25	; 0x22
    2b42:	89 a3       	std	Y+33, r24	; 0x21
    2b44:	89 a1       	ldd	r24, Y+33	; 0x21
    2b46:	9a a1       	ldd	r25, Y+34	; 0x22
    2b48:	9e 8f       	std	Y+30, r25	; 0x1e
    2b4a:	8d 8f       	std	Y+29, r24	; 0x1d
    2b4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	f1 f7       	brne	.-4      	; 0x2b50 <SMD_voidContralFullStep+0x142>
    2b54:	9e 8f       	std	Y+30, r25	; 0x1e
    2b56:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	40 e0       	ldi	r20, 0x00	; 0
    2b5e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, HIGH);
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	61 e0       	ldi	r22, 0x01	; 1
    2b66:	41 e0       	ldi	r20, 0x01	; 1
    2b68:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	62 e0       	ldi	r22, 0x02	; 2
    2b70:	40 e0       	ldi	r20, 0x00	; 0
    2b72:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	63 e0       	ldi	r22, 0x03	; 3
    2b7a:	40 e0       	ldi	r20, 0x00	; 0
    2b7c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	a0 e2       	ldi	r26, 0x20	; 32
    2b86:	b1 e4       	ldi	r27, 0x41	; 65
    2b88:	89 8f       	std	Y+25, r24	; 0x19
    2b8a:	9a 8f       	std	Y+26, r25	; 0x1a
    2b8c:	ab 8f       	std	Y+27, r26	; 0x1b
    2b8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b90:	69 8d       	ldd	r22, Y+25	; 0x19
    2b92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	4a ef       	ldi	r20, 0xFA	; 250
    2b9e:	54 e4       	ldi	r21, 0x44	; 68
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	8d 8b       	std	Y+21, r24	; 0x15
    2baa:	9e 8b       	std	Y+22, r25	; 0x16
    2bac:	af 8b       	std	Y+23, r26	; 0x17
    2bae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e8       	ldi	r20, 0x80	; 128
    2bbe:	5f e3       	ldi	r21, 0x3F	; 63
    2bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc4:	88 23       	and	r24, r24
    2bc6:	2c f4       	brge	.+10     	; 0x2bd2 <SMD_voidContralFullStep+0x1c4>
		__ticks = 1;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	9c 8b       	std	Y+20, r25	; 0x14
    2bce:	8b 8b       	std	Y+19, r24	; 0x13
    2bd0:	3f c0       	rjmp	.+126    	; 0x2c50 <SMD_voidContralFullStep+0x242>
	else if (__tmp > 65535)
    2bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	3f ef       	ldi	r19, 0xFF	; 255
    2bde:	4f e7       	ldi	r20, 0x7F	; 127
    2be0:	57 e4       	ldi	r21, 0x47	; 71
    2be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be6:	18 16       	cp	r1, r24
    2be8:	4c f5       	brge	.+82     	; 0x2c3c <SMD_voidContralFullStep+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bea:	69 8d       	ldd	r22, Y+25	; 0x19
    2bec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e2       	ldi	r20, 0x20	; 32
    2bf8:	51 e4       	ldi	r21, 0x41	; 65
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9c 8b       	std	Y+20, r25	; 0x14
    2c10:	8b 8b       	std	Y+19, r24	; 0x13
    2c12:	0f c0       	rjmp	.+30     	; 0x2c32 <SMD_voidContralFullStep+0x224>
    2c14:	88 ec       	ldi	r24, 0xC8	; 200
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9a 8b       	std	Y+18, r25	; 0x12
    2c1a:	89 8b       	std	Y+17, r24	; 0x11
    2c1c:	89 89       	ldd	r24, Y+17	; 0x11
    2c1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <SMD_voidContralFullStep+0x212>
    2c24:	9a 8b       	std	Y+18, r25	; 0x12
    2c26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c28:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	9c 8b       	std	Y+20, r25	; 0x14
    2c30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c32:	8b 89       	ldd	r24, Y+19	; 0x13
    2c34:	9c 89       	ldd	r25, Y+20	; 0x14
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	69 f7       	brne	.-38     	; 0x2c14 <SMD_voidContralFullStep+0x206>
    2c3a:	14 c0       	rjmp	.+40     	; 0x2c64 <SMD_voidContralFullStep+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c40:	8f 89       	ldd	r24, Y+23	; 0x17
    2c42:	98 8d       	ldd	r25, Y+24	; 0x18
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	9c 8b       	std	Y+20, r25	; 0x14
    2c4e:	8b 8b       	std	Y+19, r24	; 0x13
    2c50:	8b 89       	ldd	r24, Y+19	; 0x13
    2c52:	9c 89       	ldd	r25, Y+20	; 0x14
    2c54:	98 8b       	std	Y+16, r25	; 0x10
    2c56:	8f 87       	std	Y+15, r24	; 0x0f
    2c58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c5a:	98 89       	ldd	r25, Y+16	; 0x10
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <SMD_voidContralFullStep+0x24e>
    2c60:	98 8b       	std	Y+16, r25	; 0x10
    2c62:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	60 e0       	ldi	r22, 0x00	; 0
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	61 e0       	ldi	r22, 0x01	; 1
    2c72:	40 e0       	ldi	r20, 0x00	; 0
    2c74:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, HIGH);
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	62 e0       	ldi	r22, 0x02	; 2
    2c7c:	41 e0       	ldi	r20, 0x01	; 1
    2c7e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	63 e0       	ldi	r22, 0x03	; 3
    2c86:	40 e0       	ldi	r20, 0x00	; 0
    2c88:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	a0 e2       	ldi	r26, 0x20	; 32
    2c92:	b1 e4       	ldi	r27, 0x41	; 65
    2c94:	8b 87       	std	Y+11, r24	; 0x0b
    2c96:	9c 87       	std	Y+12, r25	; 0x0c
    2c98:	ad 87       	std	Y+13, r26	; 0x0d
    2c9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	4a ef       	ldi	r20, 0xFA	; 250
    2caa:	54 e4       	ldi	r21, 0x44	; 68
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	8f 83       	std	Y+7, r24	; 0x07
    2cb6:	98 87       	std	Y+8, r25	; 0x08
    2cb8:	a9 87       	std	Y+9, r26	; 0x09
    2cba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cbe:	78 85       	ldd	r23, Y+8	; 0x08
    2cc0:	89 85       	ldd	r24, Y+9	; 0x09
    2cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e8       	ldi	r20, 0x80	; 128
    2cca:	5f e3       	ldi	r21, 0x3F	; 63
    2ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd0:	88 23       	and	r24, r24
    2cd2:	2c f4       	brge	.+10     	; 0x2cde <SMD_voidContralFullStep+0x2d0>
		__ticks = 1;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
    2cdc:	3f c0       	rjmp	.+126    	; 0x2d5c <SMD_voidContralFullStep+0x34e>
	else if (__tmp > 65535)
    2cde:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce0:	78 85       	ldd	r23, Y+8	; 0x08
    2ce2:	89 85       	ldd	r24, Y+9	; 0x09
    2ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	3f ef       	ldi	r19, 0xFF	; 255
    2cea:	4f e7       	ldi	r20, 0x7F	; 127
    2cec:	57 e4       	ldi	r21, 0x47	; 71
    2cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf2:	18 16       	cp	r1, r24
    2cf4:	4c f5       	brge	.+82     	; 0x2d48 <SMD_voidContralFullStep+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e2       	ldi	r20, 0x20	; 32
    2d04:	51 e4       	ldi	r21, 0x41	; 65
    2d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	9e 83       	std	Y+6, r25	; 0x06
    2d1c:	8d 83       	std	Y+5, r24	; 0x05
    2d1e:	0f c0       	rjmp	.+30     	; 0x2d3e <SMD_voidContralFullStep+0x330>
    2d20:	88 ec       	ldi	r24, 0xC8	; 200
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	9c 83       	std	Y+4, r25	; 0x04
    2d26:	8b 83       	std	Y+3, r24	; 0x03
    2d28:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <SMD_voidContralFullStep+0x31e>
    2d30:	9c 83       	std	Y+4, r25	; 0x04
    2d32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d34:	8d 81       	ldd	r24, Y+5	; 0x05
    2d36:	9e 81       	ldd	r25, Y+6	; 0x06
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	9e 83       	std	Y+6, r25	; 0x06
    2d3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d40:	9e 81       	ldd	r25, Y+6	; 0x06
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	69 f7       	brne	.-38     	; 0x2d20 <SMD_voidContralFullStep+0x312>
    2d46:	14 c0       	rjmp	.+40     	; 0x2d70 <SMD_voidContralFullStep+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d48:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4a:	78 85       	ldd	r23, Y+8	; 0x08
    2d4c:	89 85       	ldd	r24, Y+9	; 0x09
    2d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	9e 83       	std	Y+6, r25	; 0x06
    2d5a:	8d 83       	std	Y+5, r24	; 0x05
    2d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d60:	9a 83       	std	Y+2, r25	; 0x02
    2d62:	89 83       	std	Y+1, r24	; 0x01
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	9a 81       	ldd	r25, Y+2	; 0x02
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <SMD_voidContralFullStep+0x35a>
    2d6c:	9a 83       	std	Y+2, r25	; 0x02
    2d6e:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	40 e0       	ldi	r20, 0x00	; 0
    2d76:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	61 e0       	ldi	r22, 0x01	; 1
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	62 e0       	ldi	r22, 0x02	; 2
    2d88:	40 e0       	ldi	r20, 0x00	; 0
    2d8a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	63 e0       	ldi	r22, 0x03	; 3
    2d92:	41 e0       	ldi	r20, 0x01	; 1
    2d94:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
void SMD_voidContralFullStep (u16 Copy_u16Angle)
{
    
    Local_u16TurnsNumber = Copy_u16Angle / StrideAngle_OneStep;
    u16 Local_u16LoopCounter = 0;
    for(Local_u16LoopCounter = 0; Local_u16LoopCounter <= Local_u16TurnsNumber / 4; Local_u16LoopCounter++)
    2d98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	9c a7       	std	Y+44, r25	; 0x2c
    2da0:	8b a7       	std	Y+43, r24	; 0x2b
    2da2:	80 91 a2 00 	lds	r24, 0x00A2
    2da6:	90 91 a3 00 	lds	r25, 0x00A3
    2daa:	9c 01       	movw	r18, r24
    2dac:	36 95       	lsr	r19
    2dae:	27 95       	ror	r18
    2db0:	36 95       	lsr	r19
    2db2:	27 95       	ror	r18
    2db4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2db6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2db8:	28 17       	cp	r18, r24
    2dba:	39 07       	cpc	r19, r25
    2dbc:	08 f0       	brcs	.+2      	; 0x2dc0 <SMD_voidContralFullStep+0x3b2>
    2dbe:	46 ce       	rjmp	.-884    	; 0x2a4c <SMD_voidContralFullStep+0x3e>
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    }
}
    2dc0:	ae 96       	adiw	r28, 0x2e	; 46
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <SMD_voidContralHalfStep>:
void SMD_voidContralHalfStep (u16 Copy_u16Angle)
{
    2dd2:	0f 93       	push	r16
    2dd4:	1f 93       	push	r17
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	c6 56       	subi	r28, 0x66	; 102
    2de0:	d0 40       	sbci	r29, 0x00	; 0
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	fe 01       	movw	r30, r28
    2dee:	eb 59       	subi	r30, 0x9B	; 155
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	91 83       	std	Z+1, r25	; 0x01
    2df4:	80 83       	st	Z, r24
    
    Local_u16TurnsNumber = Copy_u16Angle / StrideAngle_OneStep;
    2df6:	80 91 a1 00 	lds	r24, 0x00A1
    2dfa:	28 2f       	mov	r18, r24
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	fe 01       	movw	r30, r28
    2e00:	eb 59       	subi	r30, 0x9B	; 155
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	80 81       	ld	r24, Z
    2e06:	91 81       	ldd	r25, Z+1	; 0x01
    2e08:	b9 01       	movw	r22, r18
    2e0a:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodhi4>
    2e0e:	cb 01       	movw	r24, r22
    2e10:	90 93 a3 00 	sts	0x00A3, r25
    2e14:	80 93 a2 00 	sts	0x00A2, r24
    u16 Local_u16LoopCounter = 0;
    2e18:	fe 01       	movw	r30, r28
    2e1a:	ed 59       	subi	r30, 0x9D	; 157
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	11 82       	std	Z+1, r1	; 0x01
    2e20:	10 82       	st	Z, r1
    for(Local_u16LoopCounter = 0; Local_u16LoopCounter <= Local_u16TurnsNumber / 8; Local_u16LoopCounter++)
    2e22:	fe 01       	movw	r30, r28
    2e24:	ed 59       	subi	r30, 0x9D	; 157
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	11 82       	std	Z+1, r1	; 0x01
    2e2a:	10 82       	st	Z, r1
    2e2c:	5f c4       	rjmp	.+2238   	; 0x36ec <SMD_voidContralHalfStep+0x91a>
    {
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	41 e0       	ldi	r20, 0x01	; 1
    2e34:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	61 e0       	ldi	r22, 0x01	; 1
    2e3c:	40 e0       	ldi	r20, 0x00	; 0
    2e3e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	62 e0       	ldi	r22, 0x02	; 2
    2e46:	40 e0       	ldi	r20, 0x00	; 0
    2e48:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	63 e0       	ldi	r22, 0x03	; 3
    2e50:	40 e0       	ldi	r20, 0x00	; 0
    2e52:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    2e56:	fe 01       	movw	r30, r28
    2e58:	e1 5a       	subi	r30, 0xA1	; 161
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	a0 e2       	ldi	r26, 0x20	; 32
    2e62:	b1 e4       	ldi	r27, 0x41	; 65
    2e64:	80 83       	st	Z, r24
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	a2 83       	std	Z+2, r26	; 0x02
    2e6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6c:	8e 01       	movw	r16, r28
    2e6e:	05 5a       	subi	r16, 0xA5	; 165
    2e70:	1f 4f       	sbci	r17, 0xFF	; 255
    2e72:	fe 01       	movw	r30, r28
    2e74:	e1 5a       	subi	r30, 0xA1	; 161
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	60 81       	ld	r22, Z
    2e7a:	71 81       	ldd	r23, Z+1	; 0x01
    2e7c:	82 81       	ldd	r24, Z+2	; 0x02
    2e7e:	93 81       	ldd	r25, Z+3	; 0x03
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	4a ef       	ldi	r20, 0xFA	; 250
    2e86:	54 e4       	ldi	r21, 0x44	; 68
    2e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	f8 01       	movw	r30, r16
    2e92:	80 83       	st	Z, r24
    2e94:	91 83       	std	Z+1, r25	; 0x01
    2e96:	a2 83       	std	Z+2, r26	; 0x02
    2e98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e5 5a       	subi	r30, 0xA5	; 165
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	60 81       	ld	r22, Z
    2ea2:	71 81       	ldd	r23, Z+1	; 0x01
    2ea4:	82 81       	ldd	r24, Z+2	; 0x02
    2ea6:	93 81       	ldd	r25, Z+3	; 0x03
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	40 e8       	ldi	r20, 0x80	; 128
    2eae:	5f e3       	ldi	r21, 0x3F	; 63
    2eb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eb4:	88 23       	and	r24, r24
    2eb6:	44 f4       	brge	.+16     	; 0x2ec8 <SMD_voidContralHalfStep+0xf6>
		__ticks = 1;
    2eb8:	fe 01       	movw	r30, r28
    2eba:	e7 5a       	subi	r30, 0xA7	; 167
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	91 83       	std	Z+1, r25	; 0x01
    2ec4:	80 83       	st	Z, r24
    2ec6:	64 c0       	rjmp	.+200    	; 0x2f90 <SMD_voidContralHalfStep+0x1be>
	else if (__tmp > 65535)
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e5 5a       	subi	r30, 0xA5	; 165
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	60 81       	ld	r22, Z
    2ed0:	71 81       	ldd	r23, Z+1	; 0x01
    2ed2:	82 81       	ldd	r24, Z+2	; 0x02
    2ed4:	93 81       	ldd	r25, Z+3	; 0x03
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	3f ef       	ldi	r19, 0xFF	; 255
    2eda:	4f e7       	ldi	r20, 0x7F	; 127
    2edc:	57 e4       	ldi	r21, 0x47	; 71
    2ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee2:	18 16       	cp	r1, r24
    2ee4:	0c f0       	brlt	.+2      	; 0x2ee8 <SMD_voidContralHalfStep+0x116>
    2ee6:	43 c0       	rjmp	.+134    	; 0x2f6e <SMD_voidContralHalfStep+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e1 5a       	subi	r30, 0xA1	; 161
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	60 81       	ld	r22, Z
    2ef0:	71 81       	ldd	r23, Z+1	; 0x01
    2ef2:	82 81       	ldd	r24, Z+2	; 0x02
    2ef4:	93 81       	ldd	r25, Z+3	; 0x03
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e2       	ldi	r20, 0x20	; 32
    2efc:	51 e4       	ldi	r21, 0x41	; 65
    2efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	8e 01       	movw	r16, r28
    2f08:	07 5a       	subi	r16, 0xA7	; 167
    2f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	f8 01       	movw	r30, r16
    2f1a:	91 83       	std	Z+1, r25	; 0x01
    2f1c:	80 83       	st	Z, r24
    2f1e:	1f c0       	rjmp	.+62     	; 0x2f5e <SMD_voidContralHalfStep+0x18c>
    2f20:	fe 01       	movw	r30, r28
    2f22:	e9 5a       	subi	r30, 0xA9	; 169
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	88 ec       	ldi	r24, 0xC8	; 200
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	80 83       	st	Z, r24
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e9 5a       	subi	r30, 0xA9	; 169
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	80 81       	ld	r24, Z
    2f36:	91 81       	ldd	r25, Z+1	; 0x01
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <SMD_voidContralHalfStep+0x166>
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e9 5a       	subi	r30, 0xA9	; 169
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	91 83       	std	Z+1, r25	; 0x01
    2f44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f46:	de 01       	movw	r26, r28
    2f48:	a7 5a       	subi	r26, 0xA7	; 167
    2f4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	e7 5a       	subi	r30, 0xA7	; 167
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	80 81       	ld	r24, Z
    2f54:	91 81       	ldd	r25, Z+1	; 0x01
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	11 96       	adiw	r26, 0x01	; 1
    2f5a:	9c 93       	st	X, r25
    2f5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e7 5a       	subi	r30, 0xA7	; 167
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	d1 f6       	brne	.-76     	; 0x2f20 <SMD_voidContralHalfStep+0x14e>
    2f6c:	27 c0       	rjmp	.+78     	; 0x2fbc <SMD_voidContralHalfStep+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f6e:	8e 01       	movw	r16, r28
    2f70:	07 5a       	subi	r16, 0xA7	; 167
    2f72:	1f 4f       	sbci	r17, 0xFF	; 255
    2f74:	fe 01       	movw	r30, r28
    2f76:	e5 5a       	subi	r30, 0xA5	; 165
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	60 81       	ld	r22, Z
    2f7c:	71 81       	ldd	r23, Z+1	; 0x01
    2f7e:	82 81       	ldd	r24, Z+2	; 0x02
    2f80:	93 81       	ldd	r25, Z+3	; 0x03
    2f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	f8 01       	movw	r30, r16
    2f8c:	91 83       	std	Z+1, r25	; 0x01
    2f8e:	80 83       	st	Z, r24
    2f90:	de 01       	movw	r26, r28
    2f92:	ab 5a       	subi	r26, 0xAB	; 171
    2f94:	bf 4f       	sbci	r27, 0xFF	; 255
    2f96:	fe 01       	movw	r30, r28
    2f98:	e7 5a       	subi	r30, 0xA7	; 167
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	8d 93       	st	X+, r24
    2fa2:	9c 93       	st	X, r25
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	eb 5a       	subi	r30, 0xAB	; 171
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 81       	ld	r24, Z
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <SMD_voidContralHalfStep+0x1dc>
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	eb 5a       	subi	r30, 0xAB	; 171
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	91 83       	std	Z+1, r25	; 0x01
    2fba:	80 83       	st	Z, r24
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	60 e0       	ldi	r22, 0x00	; 0
    2fc0:	41 e0       	ldi	r20, 0x01	; 1
    2fc2:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, HIGH);
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	61 e0       	ldi	r22, 0x01	; 1
    2fca:	41 e0       	ldi	r20, 0x01	; 1
    2fcc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	62 e0       	ldi	r22, 0x02	; 2
    2fd4:	40 e0       	ldi	r20, 0x00	; 0
    2fd6:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	63 e0       	ldi	r22, 0x03	; 3
    2fde:	40 e0       	ldi	r20, 0x00	; 0
    2fe0:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	ef 5a       	subi	r30, 0xAF	; 175
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	a0 e2       	ldi	r26, 0x20	; 32
    2ff0:	b1 e4       	ldi	r27, 0x41	; 65
    2ff2:	80 83       	st	Z, r24
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	a2 83       	std	Z+2, r26	; 0x02
    2ff8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffa:	8e 01       	movw	r16, r28
    2ffc:	03 5b       	subi	r16, 0xB3	; 179
    2ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    3000:	fe 01       	movw	r30, r28
    3002:	ef 5a       	subi	r30, 0xAF	; 175
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	60 81       	ld	r22, Z
    3008:	71 81       	ldd	r23, Z+1	; 0x01
    300a:	82 81       	ldd	r24, Z+2	; 0x02
    300c:	93 81       	ldd	r25, Z+3	; 0x03
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	4a ef       	ldi	r20, 0xFA	; 250
    3014:	54 e4       	ldi	r21, 0x44	; 68
    3016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	f8 01       	movw	r30, r16
    3020:	80 83       	st	Z, r24
    3022:	91 83       	std	Z+1, r25	; 0x01
    3024:	a2 83       	std	Z+2, r26	; 0x02
    3026:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3028:	fe 01       	movw	r30, r28
    302a:	e3 5b       	subi	r30, 0xB3	; 179
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	60 81       	ld	r22, Z
    3030:	71 81       	ldd	r23, Z+1	; 0x01
    3032:	82 81       	ldd	r24, Z+2	; 0x02
    3034:	93 81       	ldd	r25, Z+3	; 0x03
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	40 e8       	ldi	r20, 0x80	; 128
    303c:	5f e3       	ldi	r21, 0x3F	; 63
    303e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3042:	88 23       	and	r24, r24
    3044:	44 f4       	brge	.+16     	; 0x3056 <SMD_voidContralHalfStep+0x284>
		__ticks = 1;
    3046:	fe 01       	movw	r30, r28
    3048:	e5 5b       	subi	r30, 0xB5	; 181
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	91 83       	std	Z+1, r25	; 0x01
    3052:	80 83       	st	Z, r24
    3054:	64 c0       	rjmp	.+200    	; 0x311e <SMD_voidContralHalfStep+0x34c>
	else if (__tmp > 65535)
    3056:	fe 01       	movw	r30, r28
    3058:	e3 5b       	subi	r30, 0xB3	; 179
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	60 81       	ld	r22, Z
    305e:	71 81       	ldd	r23, Z+1	; 0x01
    3060:	82 81       	ldd	r24, Z+2	; 0x02
    3062:	93 81       	ldd	r25, Z+3	; 0x03
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	3f ef       	ldi	r19, 0xFF	; 255
    3068:	4f e7       	ldi	r20, 0x7F	; 127
    306a:	57 e4       	ldi	r21, 0x47	; 71
    306c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3070:	18 16       	cp	r1, r24
    3072:	0c f0       	brlt	.+2      	; 0x3076 <SMD_voidContralHalfStep+0x2a4>
    3074:	43 c0       	rjmp	.+134    	; 0x30fc <SMD_voidContralHalfStep+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3076:	fe 01       	movw	r30, r28
    3078:	ef 5a       	subi	r30, 0xAF	; 175
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	60 81       	ld	r22, Z
    307e:	71 81       	ldd	r23, Z+1	; 0x01
    3080:	82 81       	ldd	r24, Z+2	; 0x02
    3082:	93 81       	ldd	r25, Z+3	; 0x03
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	40 e2       	ldi	r20, 0x20	; 32
    308a:	51 e4       	ldi	r21, 0x41	; 65
    308c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	8e 01       	movw	r16, r28
    3096:	05 5b       	subi	r16, 0xB5	; 181
    3098:	1f 4f       	sbci	r17, 0xFF	; 255
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	f8 01       	movw	r30, r16
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	80 83       	st	Z, r24
    30ac:	1f c0       	rjmp	.+62     	; 0x30ec <SMD_voidContralHalfStep+0x31a>
    30ae:	fe 01       	movw	r30, r28
    30b0:	e7 5b       	subi	r30, 0xB7	; 183
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	88 ec       	ldi	r24, 0xC8	; 200
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	91 83       	std	Z+1, r25	; 0x01
    30ba:	80 83       	st	Z, r24
    30bc:	fe 01       	movw	r30, r28
    30be:	e7 5b       	subi	r30, 0xB7	; 183
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	80 81       	ld	r24, Z
    30c4:	91 81       	ldd	r25, Z+1	; 0x01
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <SMD_voidContralHalfStep+0x2f4>
    30ca:	fe 01       	movw	r30, r28
    30cc:	e7 5b       	subi	r30, 0xB7	; 183
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	91 83       	std	Z+1, r25	; 0x01
    30d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d4:	de 01       	movw	r26, r28
    30d6:	a5 5b       	subi	r26, 0xB5	; 181
    30d8:	bf 4f       	sbci	r27, 0xFF	; 255
    30da:	fe 01       	movw	r30, r28
    30dc:	e5 5b       	subi	r30, 0xB5	; 181
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	80 81       	ld	r24, Z
    30e2:	91 81       	ldd	r25, Z+1	; 0x01
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	11 96       	adiw	r26, 0x01	; 1
    30e8:	9c 93       	st	X, r25
    30ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ec:	fe 01       	movw	r30, r28
    30ee:	e5 5b       	subi	r30, 0xB5	; 181
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	80 81       	ld	r24, Z
    30f4:	91 81       	ldd	r25, Z+1	; 0x01
    30f6:	00 97       	sbiw	r24, 0x00	; 0
    30f8:	d1 f6       	brne	.-76     	; 0x30ae <SMD_voidContralHalfStep+0x2dc>
    30fa:	27 c0       	rjmp	.+78     	; 0x314a <SMD_voidContralHalfStep+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fc:	8e 01       	movw	r16, r28
    30fe:	05 5b       	subi	r16, 0xB5	; 181
    3100:	1f 4f       	sbci	r17, 0xFF	; 255
    3102:	fe 01       	movw	r30, r28
    3104:	e3 5b       	subi	r30, 0xB3	; 179
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	f8 01       	movw	r30, r16
    311a:	91 83       	std	Z+1, r25	; 0x01
    311c:	80 83       	st	Z, r24
    311e:	de 01       	movw	r26, r28
    3120:	a9 5b       	subi	r26, 0xB9	; 185
    3122:	bf 4f       	sbci	r27, 0xFF	; 255
    3124:	fe 01       	movw	r30, r28
    3126:	e5 5b       	subi	r30, 0xB5	; 181
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 81       	ld	r24, Z
    312c:	91 81       	ldd	r25, Z+1	; 0x01
    312e:	8d 93       	st	X+, r24
    3130:	9c 93       	st	X, r25
    3132:	fe 01       	movw	r30, r28
    3134:	e9 5b       	subi	r30, 0xB9	; 185
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	80 81       	ld	r24, Z
    313a:	91 81       	ldd	r25, Z+1	; 0x01
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	f1 f7       	brne	.-4      	; 0x313c <SMD_voidContralHalfStep+0x36a>
    3140:	fe 01       	movw	r30, r28
    3142:	e9 5b       	subi	r30, 0xB9	; 185
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	91 83       	std	Z+1, r25	; 0x01
    3148:	80 83       	st	Z, r24
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	60 e0       	ldi	r22, 0x00	; 0
    314e:	40 e0       	ldi	r20, 0x00	; 0
    3150:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, HIGH);
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	61 e0       	ldi	r22, 0x01	; 1
    3158:	41 e0       	ldi	r20, 0x01	; 1
    315a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    315e:	80 e0       	ldi	r24, 0x00	; 0
    3160:	62 e0       	ldi	r22, 0x02	; 2
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	63 e0       	ldi	r22, 0x03	; 3
    316c:	40 e0       	ldi	r20, 0x00	; 0
    316e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    3172:	fe 01       	movw	r30, r28
    3174:	ed 5b       	subi	r30, 0xBD	; 189
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	a0 e2       	ldi	r26, 0x20	; 32
    317e:	b1 e4       	ldi	r27, 0x41	; 65
    3180:	80 83       	st	Z, r24
    3182:	91 83       	std	Z+1, r25	; 0x01
    3184:	a2 83       	std	Z+2, r26	; 0x02
    3186:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3188:	8e 01       	movw	r16, r28
    318a:	01 5c       	subi	r16, 0xC1	; 193
    318c:	1f 4f       	sbci	r17, 0xFF	; 255
    318e:	fe 01       	movw	r30, r28
    3190:	ed 5b       	subi	r30, 0xBD	; 189
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	60 81       	ld	r22, Z
    3196:	71 81       	ldd	r23, Z+1	; 0x01
    3198:	82 81       	ldd	r24, Z+2	; 0x02
    319a:	93 81       	ldd	r25, Z+3	; 0x03
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	4a ef       	ldi	r20, 0xFA	; 250
    31a2:	54 e4       	ldi	r21, 0x44	; 68
    31a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	f8 01       	movw	r30, r16
    31ae:	80 83       	st	Z, r24
    31b0:	91 83       	std	Z+1, r25	; 0x01
    31b2:	a2 83       	std	Z+2, r26	; 0x02
    31b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31b6:	fe 01       	movw	r30, r28
    31b8:	ff 96       	adiw	r30, 0x3f	; 63
    31ba:	60 81       	ld	r22, Z
    31bc:	71 81       	ldd	r23, Z+1	; 0x01
    31be:	82 81       	ldd	r24, Z+2	; 0x02
    31c0:	93 81       	ldd	r25, Z+3	; 0x03
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	40 e8       	ldi	r20, 0x80	; 128
    31c8:	5f e3       	ldi	r21, 0x3F	; 63
    31ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ce:	88 23       	and	r24, r24
    31d0:	2c f4       	brge	.+10     	; 0x31dc <SMD_voidContralHalfStep+0x40a>
		__ticks = 1;
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	9e af       	std	Y+62, r25	; 0x3e
    31d8:	8d af       	std	Y+61, r24	; 0x3d
    31da:	46 c0       	rjmp	.+140    	; 0x3268 <SMD_voidContralHalfStep+0x496>
	else if (__tmp > 65535)
    31dc:	fe 01       	movw	r30, r28
    31de:	ff 96       	adiw	r30, 0x3f	; 63
    31e0:	60 81       	ld	r22, Z
    31e2:	71 81       	ldd	r23, Z+1	; 0x01
    31e4:	82 81       	ldd	r24, Z+2	; 0x02
    31e6:	93 81       	ldd	r25, Z+3	; 0x03
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	3f ef       	ldi	r19, 0xFF	; 255
    31ec:	4f e7       	ldi	r20, 0x7F	; 127
    31ee:	57 e4       	ldi	r21, 0x47	; 71
    31f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31f4:	18 16       	cp	r1, r24
    31f6:	64 f5       	brge	.+88     	; 0x3250 <SMD_voidContralHalfStep+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f8:	fe 01       	movw	r30, r28
    31fa:	ed 5b       	subi	r30, 0xBD	; 189
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	60 81       	ld	r22, Z
    3200:	71 81       	ldd	r23, Z+1	; 0x01
    3202:	82 81       	ldd	r24, Z+2	; 0x02
    3204:	93 81       	ldd	r25, Z+3	; 0x03
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	40 e2       	ldi	r20, 0x20	; 32
    320c:	51 e4       	ldi	r21, 0x41	; 65
    320e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	bc 01       	movw	r22, r24
    3218:	cd 01       	movw	r24, r26
    321a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	9e af       	std	Y+62, r25	; 0x3e
    3224:	8d af       	std	Y+61, r24	; 0x3d
    3226:	0f c0       	rjmp	.+30     	; 0x3246 <SMD_voidContralHalfStep+0x474>
    3228:	88 ec       	ldi	r24, 0xC8	; 200
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	9c af       	std	Y+60, r25	; 0x3c
    322e:	8b af       	std	Y+59, r24	; 0x3b
    3230:	8b ad       	ldd	r24, Y+59	; 0x3b
    3232:	9c ad       	ldd	r25, Y+60	; 0x3c
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <SMD_voidContralHalfStep+0x462>
    3238:	9c af       	std	Y+60, r25	; 0x3c
    323a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323c:	8d ad       	ldd	r24, Y+61	; 0x3d
    323e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	9e af       	std	Y+62, r25	; 0x3e
    3244:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3246:	8d ad       	ldd	r24, Y+61	; 0x3d
    3248:	9e ad       	ldd	r25, Y+62	; 0x3e
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	69 f7       	brne	.-38     	; 0x3228 <SMD_voidContralHalfStep+0x456>
    324e:	16 c0       	rjmp	.+44     	; 0x327c <SMD_voidContralHalfStep+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3250:	fe 01       	movw	r30, r28
    3252:	ff 96       	adiw	r30, 0x3f	; 63
    3254:	60 81       	ld	r22, Z
    3256:	71 81       	ldd	r23, Z+1	; 0x01
    3258:	82 81       	ldd	r24, Z+2	; 0x02
    325a:	93 81       	ldd	r25, Z+3	; 0x03
    325c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	9e af       	std	Y+62, r25	; 0x3e
    3266:	8d af       	std	Y+61, r24	; 0x3d
    3268:	8d ad       	ldd	r24, Y+61	; 0x3d
    326a:	9e ad       	ldd	r25, Y+62	; 0x3e
    326c:	9a af       	std	Y+58, r25	; 0x3a
    326e:	89 af       	std	Y+57, r24	; 0x39
    3270:	89 ad       	ldd	r24, Y+57	; 0x39
    3272:	9a ad       	ldd	r25, Y+58	; 0x3a
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	f1 f7       	brne	.-4      	; 0x3274 <SMD_voidContralHalfStep+0x4a2>
    3278:	9a af       	std	Y+58, r25	; 0x3a
    327a:	89 af       	std	Y+57, r24	; 0x39
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	40 e0       	ldi	r20, 0x00	; 0
    3282:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, HIGH);
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	61 e0       	ldi	r22, 0x01	; 1
    328a:	41 e0       	ldi	r20, 0x01	; 1
    328c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, HIGH);
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	62 e0       	ldi	r22, 0x02	; 2
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	63 e0       	ldi	r22, 0x03	; 3
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	a0 e2       	ldi	r26, 0x20	; 32
    32aa:	b1 e4       	ldi	r27, 0x41	; 65
    32ac:	8d ab       	std	Y+53, r24	; 0x35
    32ae:	9e ab       	std	Y+54, r25	; 0x36
    32b0:	af ab       	std	Y+55, r26	; 0x37
    32b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b4:	6d a9       	ldd	r22, Y+53	; 0x35
    32b6:	7e a9       	ldd	r23, Y+54	; 0x36
    32b8:	8f a9       	ldd	r24, Y+55	; 0x37
    32ba:	98 ad       	ldd	r25, Y+56	; 0x38
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	4a ef       	ldi	r20, 0xFA	; 250
    32c2:	54 e4       	ldi	r21, 0x44	; 68
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	89 ab       	std	Y+49, r24	; 0x31
    32ce:	9a ab       	std	Y+50, r25	; 0x32
    32d0:	ab ab       	std	Y+51, r26	; 0x33
    32d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32d4:	69 a9       	ldd	r22, Y+49	; 0x31
    32d6:	7a a9       	ldd	r23, Y+50	; 0x32
    32d8:	8b a9       	ldd	r24, Y+51	; 0x33
    32da:	9c a9       	ldd	r25, Y+52	; 0x34
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e8       	ldi	r20, 0x80	; 128
    32e2:	5f e3       	ldi	r21, 0x3F	; 63
    32e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32e8:	88 23       	and	r24, r24
    32ea:	2c f4       	brge	.+10     	; 0x32f6 <SMD_voidContralHalfStep+0x524>
		__ticks = 1;
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	98 ab       	std	Y+48, r25	; 0x30
    32f2:	8f a7       	std	Y+47, r24	; 0x2f
    32f4:	3f c0       	rjmp	.+126    	; 0x3374 <SMD_voidContralHalfStep+0x5a2>
	else if (__tmp > 65535)
    32f6:	69 a9       	ldd	r22, Y+49	; 0x31
    32f8:	7a a9       	ldd	r23, Y+50	; 0x32
    32fa:	8b a9       	ldd	r24, Y+51	; 0x33
    32fc:	9c a9       	ldd	r25, Y+52	; 0x34
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	3f ef       	ldi	r19, 0xFF	; 255
    3302:	4f e7       	ldi	r20, 0x7F	; 127
    3304:	57 e4       	ldi	r21, 0x47	; 71
    3306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    330a:	18 16       	cp	r1, r24
    330c:	4c f5       	brge	.+82     	; 0x3360 <SMD_voidContralHalfStep+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330e:	6d a9       	ldd	r22, Y+53	; 0x35
    3310:	7e a9       	ldd	r23, Y+54	; 0x36
    3312:	8f a9       	ldd	r24, Y+55	; 0x37
    3314:	98 ad       	ldd	r25, Y+56	; 0x38
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e2       	ldi	r20, 0x20	; 32
    331c:	51 e4       	ldi	r21, 0x41	; 65
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	bc 01       	movw	r22, r24
    3328:	cd 01       	movw	r24, r26
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	98 ab       	std	Y+48, r25	; 0x30
    3334:	8f a7       	std	Y+47, r24	; 0x2f
    3336:	0f c0       	rjmp	.+30     	; 0x3356 <SMD_voidContralHalfStep+0x584>
    3338:	88 ec       	ldi	r24, 0xC8	; 200
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	9e a7       	std	Y+46, r25	; 0x2e
    333e:	8d a7       	std	Y+45, r24	; 0x2d
    3340:	8d a5       	ldd	r24, Y+45	; 0x2d
    3342:	9e a5       	ldd	r25, Y+46	; 0x2e
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <SMD_voidContralHalfStep+0x572>
    3348:	9e a7       	std	Y+46, r25	; 0x2e
    334a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334c:	8f a5       	ldd	r24, Y+47	; 0x2f
    334e:	98 a9       	ldd	r25, Y+48	; 0x30
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	98 ab       	std	Y+48, r25	; 0x30
    3354:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3356:	8f a5       	ldd	r24, Y+47	; 0x2f
    3358:	98 a9       	ldd	r25, Y+48	; 0x30
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	69 f7       	brne	.-38     	; 0x3338 <SMD_voidContralHalfStep+0x566>
    335e:	14 c0       	rjmp	.+40     	; 0x3388 <SMD_voidContralHalfStep+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3360:	69 a9       	ldd	r22, Y+49	; 0x31
    3362:	7a a9       	ldd	r23, Y+50	; 0x32
    3364:	8b a9       	ldd	r24, Y+51	; 0x33
    3366:	9c a9       	ldd	r25, Y+52	; 0x34
    3368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	98 ab       	std	Y+48, r25	; 0x30
    3372:	8f a7       	std	Y+47, r24	; 0x2f
    3374:	8f a5       	ldd	r24, Y+47	; 0x2f
    3376:	98 a9       	ldd	r25, Y+48	; 0x30
    3378:	9c a7       	std	Y+44, r25	; 0x2c
    337a:	8b a7       	std	Y+43, r24	; 0x2b
    337c:	8b a5       	ldd	r24, Y+43	; 0x2b
    337e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <SMD_voidContralHalfStep+0x5ae>
    3384:	9c a7       	std	Y+44, r25	; 0x2c
    3386:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	60 e0       	ldi	r22, 0x00	; 0
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	61 e0       	ldi	r22, 0x01	; 1
    3396:	40 e0       	ldi	r20, 0x00	; 0
    3398:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, HIGH);
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	62 e0       	ldi	r22, 0x02	; 2
    33a0:	41 e0       	ldi	r20, 0x01	; 1
    33a2:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	63 e0       	ldi	r22, 0x03	; 3
    33aa:	40 e0       	ldi	r20, 0x00	; 0
    33ac:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	a0 e2       	ldi	r26, 0x20	; 32
    33b6:	b1 e4       	ldi	r27, 0x41	; 65
    33b8:	8f a3       	std	Y+39, r24	; 0x27
    33ba:	98 a7       	std	Y+40, r25	; 0x28
    33bc:	a9 a7       	std	Y+41, r26	; 0x29
    33be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c0:	6f a1       	ldd	r22, Y+39	; 0x27
    33c2:	78 a5       	ldd	r23, Y+40	; 0x28
    33c4:	89 a5       	ldd	r24, Y+41	; 0x29
    33c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	4a ef       	ldi	r20, 0xFA	; 250
    33ce:	54 e4       	ldi	r21, 0x44	; 68
    33d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	8b a3       	std	Y+35, r24	; 0x23
    33da:	9c a3       	std	Y+36, r25	; 0x24
    33dc:	ad a3       	std	Y+37, r26	; 0x25
    33de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33e0:	6b a1       	ldd	r22, Y+35	; 0x23
    33e2:	7c a1       	ldd	r23, Y+36	; 0x24
    33e4:	8d a1       	ldd	r24, Y+37	; 0x25
    33e6:	9e a1       	ldd	r25, Y+38	; 0x26
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e8       	ldi	r20, 0x80	; 128
    33ee:	5f e3       	ldi	r21, 0x3F	; 63
    33f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33f4:	88 23       	and	r24, r24
    33f6:	2c f4       	brge	.+10     	; 0x3402 <SMD_voidContralHalfStep+0x630>
		__ticks = 1;
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	9a a3       	std	Y+34, r25	; 0x22
    33fe:	89 a3       	std	Y+33, r24	; 0x21
    3400:	3f c0       	rjmp	.+126    	; 0x3480 <SMD_voidContralHalfStep+0x6ae>
	else if (__tmp > 65535)
    3402:	6b a1       	ldd	r22, Y+35	; 0x23
    3404:	7c a1       	ldd	r23, Y+36	; 0x24
    3406:	8d a1       	ldd	r24, Y+37	; 0x25
    3408:	9e a1       	ldd	r25, Y+38	; 0x26
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	3f ef       	ldi	r19, 0xFF	; 255
    340e:	4f e7       	ldi	r20, 0x7F	; 127
    3410:	57 e4       	ldi	r21, 0x47	; 71
    3412:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3416:	18 16       	cp	r1, r24
    3418:	4c f5       	brge	.+82     	; 0x346c <SMD_voidContralHalfStep+0x69a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    341a:	6f a1       	ldd	r22, Y+39	; 0x27
    341c:	78 a5       	ldd	r23, Y+40	; 0x28
    341e:	89 a5       	ldd	r24, Y+41	; 0x29
    3420:	9a a5       	ldd	r25, Y+42	; 0x2a
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	40 e2       	ldi	r20, 0x20	; 32
    3428:	51 e4       	ldi	r21, 0x41	; 65
    342a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	bc 01       	movw	r22, r24
    3434:	cd 01       	movw	r24, r26
    3436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	9a a3       	std	Y+34, r25	; 0x22
    3440:	89 a3       	std	Y+33, r24	; 0x21
    3442:	0f c0       	rjmp	.+30     	; 0x3462 <SMD_voidContralHalfStep+0x690>
    3444:	88 ec       	ldi	r24, 0xC8	; 200
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	98 a3       	std	Y+32, r25	; 0x20
    344a:	8f 8f       	std	Y+31, r24	; 0x1f
    344c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    344e:	98 a1       	ldd	r25, Y+32	; 0x20
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	f1 f7       	brne	.-4      	; 0x3450 <SMD_voidContralHalfStep+0x67e>
    3454:	98 a3       	std	Y+32, r25	; 0x20
    3456:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3458:	89 a1       	ldd	r24, Y+33	; 0x21
    345a:	9a a1       	ldd	r25, Y+34	; 0x22
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	9a a3       	std	Y+34, r25	; 0x22
    3460:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3462:	89 a1       	ldd	r24, Y+33	; 0x21
    3464:	9a a1       	ldd	r25, Y+34	; 0x22
    3466:	00 97       	sbiw	r24, 0x00	; 0
    3468:	69 f7       	brne	.-38     	; 0x3444 <SMD_voidContralHalfStep+0x672>
    346a:	14 c0       	rjmp	.+40     	; 0x3494 <SMD_voidContralHalfStep+0x6c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    346c:	6b a1       	ldd	r22, Y+35	; 0x23
    346e:	7c a1       	ldd	r23, Y+36	; 0x24
    3470:	8d a1       	ldd	r24, Y+37	; 0x25
    3472:	9e a1       	ldd	r25, Y+38	; 0x26
    3474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	9a a3       	std	Y+34, r25	; 0x22
    347e:	89 a3       	std	Y+33, r24	; 0x21
    3480:	89 a1       	ldd	r24, Y+33	; 0x21
    3482:	9a a1       	ldd	r25, Y+34	; 0x22
    3484:	9e 8f       	std	Y+30, r25	; 0x1e
    3486:	8d 8f       	std	Y+29, r24	; 0x1d
    3488:	8d 8d       	ldd	r24, Y+29	; 0x1d
    348a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	f1 f7       	brne	.-4      	; 0x348c <SMD_voidContralHalfStep+0x6ba>
    3490:	9e 8f       	std	Y+30, r25	; 0x1e
    3492:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	40 e0       	ldi	r20, 0x00	; 0
    349a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	61 e0       	ldi	r22, 0x01	; 1
    34a2:	40 e0       	ldi	r20, 0x00	; 0
    34a4:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, HIGH);
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	62 e0       	ldi	r22, 0x02	; 2
    34ac:	41 e0       	ldi	r20, 0x01	; 1
    34ae:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	63 e0       	ldi	r22, 0x03	; 3
    34b6:	41 e0       	ldi	r20, 0x01	; 1
    34b8:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	a0 e2       	ldi	r26, 0x20	; 32
    34c2:	b1 e4       	ldi	r27, 0x41	; 65
    34c4:	89 8f       	std	Y+25, r24	; 0x19
    34c6:	9a 8f       	std	Y+26, r25	; 0x1a
    34c8:	ab 8f       	std	Y+27, r26	; 0x1b
    34ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34cc:	69 8d       	ldd	r22, Y+25	; 0x19
    34ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	4a ef       	ldi	r20, 0xFA	; 250
    34da:	54 e4       	ldi	r21, 0x44	; 68
    34dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	8d 8b       	std	Y+21, r24	; 0x15
    34e6:	9e 8b       	std	Y+22, r25	; 0x16
    34e8:	af 8b       	std	Y+23, r26	; 0x17
    34ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34ec:	6d 89       	ldd	r22, Y+21	; 0x15
    34ee:	7e 89       	ldd	r23, Y+22	; 0x16
    34f0:	8f 89       	ldd	r24, Y+23	; 0x17
    34f2:	98 8d       	ldd	r25, Y+24	; 0x18
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e8       	ldi	r20, 0x80	; 128
    34fa:	5f e3       	ldi	r21, 0x3F	; 63
    34fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3500:	88 23       	and	r24, r24
    3502:	2c f4       	brge	.+10     	; 0x350e <SMD_voidContralHalfStep+0x73c>
		__ticks = 1;
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	9c 8b       	std	Y+20, r25	; 0x14
    350a:	8b 8b       	std	Y+19, r24	; 0x13
    350c:	3f c0       	rjmp	.+126    	; 0x358c <SMD_voidContralHalfStep+0x7ba>
	else if (__tmp > 65535)
    350e:	6d 89       	ldd	r22, Y+21	; 0x15
    3510:	7e 89       	ldd	r23, Y+22	; 0x16
    3512:	8f 89       	ldd	r24, Y+23	; 0x17
    3514:	98 8d       	ldd	r25, Y+24	; 0x18
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	3f ef       	ldi	r19, 0xFF	; 255
    351a:	4f e7       	ldi	r20, 0x7F	; 127
    351c:	57 e4       	ldi	r21, 0x47	; 71
    351e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3522:	18 16       	cp	r1, r24
    3524:	4c f5       	brge	.+82     	; 0x3578 <SMD_voidContralHalfStep+0x7a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3526:	69 8d       	ldd	r22, Y+25	; 0x19
    3528:	7a 8d       	ldd	r23, Y+26	; 0x1a
    352a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    352c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	40 e2       	ldi	r20, 0x20	; 32
    3534:	51 e4       	ldi	r21, 0x41	; 65
    3536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	bc 01       	movw	r22, r24
    3540:	cd 01       	movw	r24, r26
    3542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	9c 8b       	std	Y+20, r25	; 0x14
    354c:	8b 8b       	std	Y+19, r24	; 0x13
    354e:	0f c0       	rjmp	.+30     	; 0x356e <SMD_voidContralHalfStep+0x79c>
    3550:	88 ec       	ldi	r24, 0xC8	; 200
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	9a 8b       	std	Y+18, r25	; 0x12
    3556:	89 8b       	std	Y+17, r24	; 0x11
    3558:	89 89       	ldd	r24, Y+17	; 0x11
    355a:	9a 89       	ldd	r25, Y+18	; 0x12
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <SMD_voidContralHalfStep+0x78a>
    3560:	9a 8b       	std	Y+18, r25	; 0x12
    3562:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3564:	8b 89       	ldd	r24, Y+19	; 0x13
    3566:	9c 89       	ldd	r25, Y+20	; 0x14
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	9c 8b       	std	Y+20, r25	; 0x14
    356c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    356e:	8b 89       	ldd	r24, Y+19	; 0x13
    3570:	9c 89       	ldd	r25, Y+20	; 0x14
    3572:	00 97       	sbiw	r24, 0x00	; 0
    3574:	69 f7       	brne	.-38     	; 0x3550 <SMD_voidContralHalfStep+0x77e>
    3576:	14 c0       	rjmp	.+40     	; 0x35a0 <SMD_voidContralHalfStep+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3578:	6d 89       	ldd	r22, Y+21	; 0x15
    357a:	7e 89       	ldd	r23, Y+22	; 0x16
    357c:	8f 89       	ldd	r24, Y+23	; 0x17
    357e:	98 8d       	ldd	r25, Y+24	; 0x18
    3580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	9c 8b       	std	Y+20, r25	; 0x14
    358a:	8b 8b       	std	Y+19, r24	; 0x13
    358c:	8b 89       	ldd	r24, Y+19	; 0x13
    358e:	9c 89       	ldd	r25, Y+20	; 0x14
    3590:	98 8b       	std	Y+16, r25	; 0x10
    3592:	8f 87       	std	Y+15, r24	; 0x0f
    3594:	8f 85       	ldd	r24, Y+15	; 0x0f
    3596:	98 89       	ldd	r25, Y+16	; 0x10
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	f1 f7       	brne	.-4      	; 0x3598 <SMD_voidContralHalfStep+0x7c6>
    359c:	98 8b       	std	Y+16, r25	; 0x10
    359e:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	60 e0       	ldi	r22, 0x00	; 0
    35a4:	40 e0       	ldi	r20, 0x00	; 0
    35a6:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	61 e0       	ldi	r22, 0x01	; 1
    35ae:	40 e0       	ldi	r20, 0x00	; 0
    35b0:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	62 e0       	ldi	r22, 0x02	; 2
    35b8:	40 e0       	ldi	r20, 0x00	; 0
    35ba:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    35be:	80 e0       	ldi	r24, 0x00	; 0
    35c0:	63 e0       	ldi	r22, 0x03	; 3
    35c2:	41 e0       	ldi	r20, 0x01	; 1
    35c4:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	a0 e2       	ldi	r26, 0x20	; 32
    35ce:	b1 e4       	ldi	r27, 0x41	; 65
    35d0:	8b 87       	std	Y+11, r24	; 0x0b
    35d2:	9c 87       	std	Y+12, r25	; 0x0c
    35d4:	ad 87       	std	Y+13, r26	; 0x0d
    35d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    35da:	7c 85       	ldd	r23, Y+12	; 0x0c
    35dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    35de:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	4a ef       	ldi	r20, 0xFA	; 250
    35e6:	54 e4       	ldi	r21, 0x44	; 68
    35e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	8f 83       	std	Y+7, r24	; 0x07
    35f2:	98 87       	std	Y+8, r25	; 0x08
    35f4:	a9 87       	std	Y+9, r26	; 0x09
    35f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35f8:	6f 81       	ldd	r22, Y+7	; 0x07
    35fa:	78 85       	ldd	r23, Y+8	; 0x08
    35fc:	89 85       	ldd	r24, Y+9	; 0x09
    35fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	40 e8       	ldi	r20, 0x80	; 128
    3606:	5f e3       	ldi	r21, 0x3F	; 63
    3608:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    360c:	88 23       	and	r24, r24
    360e:	2c f4       	brge	.+10     	; 0x361a <SMD_voidContralHalfStep+0x848>
		__ticks = 1;
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	9e 83       	std	Y+6, r25	; 0x06
    3616:	8d 83       	std	Y+5, r24	; 0x05
    3618:	3f c0       	rjmp	.+126    	; 0x3698 <SMD_voidContralHalfStep+0x8c6>
	else if (__tmp > 65535)
    361a:	6f 81       	ldd	r22, Y+7	; 0x07
    361c:	78 85       	ldd	r23, Y+8	; 0x08
    361e:	89 85       	ldd	r24, Y+9	; 0x09
    3620:	9a 85       	ldd	r25, Y+10	; 0x0a
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	3f ef       	ldi	r19, 0xFF	; 255
    3626:	4f e7       	ldi	r20, 0x7F	; 127
    3628:	57 e4       	ldi	r21, 0x47	; 71
    362a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    362e:	18 16       	cp	r1, r24
    3630:	4c f5       	brge	.+82     	; 0x3684 <SMD_voidContralHalfStep+0x8b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3632:	6b 85       	ldd	r22, Y+11	; 0x0b
    3634:	7c 85       	ldd	r23, Y+12	; 0x0c
    3636:	8d 85       	ldd	r24, Y+13	; 0x0d
    3638:	9e 85       	ldd	r25, Y+14	; 0x0e
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	40 e2       	ldi	r20, 0x20	; 32
    3640:	51 e4       	ldi	r21, 0x41	; 65
    3642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	bc 01       	movw	r22, r24
    364c:	cd 01       	movw	r24, r26
    364e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	9e 83       	std	Y+6, r25	; 0x06
    3658:	8d 83       	std	Y+5, r24	; 0x05
    365a:	0f c0       	rjmp	.+30     	; 0x367a <SMD_voidContralHalfStep+0x8a8>
    365c:	88 ec       	ldi	r24, 0xC8	; 200
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	9c 83       	std	Y+4, r25	; 0x04
    3662:	8b 83       	std	Y+3, r24	; 0x03
    3664:	8b 81       	ldd	r24, Y+3	; 0x03
    3666:	9c 81       	ldd	r25, Y+4	; 0x04
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <SMD_voidContralHalfStep+0x896>
    366c:	9c 83       	std	Y+4, r25	; 0x04
    366e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3670:	8d 81       	ldd	r24, Y+5	; 0x05
    3672:	9e 81       	ldd	r25, Y+6	; 0x06
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	9e 83       	std	Y+6, r25	; 0x06
    3678:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    367a:	8d 81       	ldd	r24, Y+5	; 0x05
    367c:	9e 81       	ldd	r25, Y+6	; 0x06
    367e:	00 97       	sbiw	r24, 0x00	; 0
    3680:	69 f7       	brne	.-38     	; 0x365c <SMD_voidContralHalfStep+0x88a>
    3682:	14 c0       	rjmp	.+40     	; 0x36ac <SMD_voidContralHalfStep+0x8da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3684:	6f 81       	ldd	r22, Y+7	; 0x07
    3686:	78 85       	ldd	r23, Y+8	; 0x08
    3688:	89 85       	ldd	r24, Y+9	; 0x09
    368a:	9a 85       	ldd	r25, Y+10	; 0x0a
    368c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	9e 83       	std	Y+6, r25	; 0x06
    3696:	8d 83       	std	Y+5, r24	; 0x05
    3698:	8d 81       	ldd	r24, Y+5	; 0x05
    369a:	9e 81       	ldd	r25, Y+6	; 0x06
    369c:	9a 83       	std	Y+2, r25	; 0x02
    369e:	89 83       	std	Y+1, r24	; 0x01
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	9a 81       	ldd	r25, Y+2	; 0x02
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <SMD_voidContralHalfStep+0x8d2>
    36a8:	9a 83       	std	Y+2, r25	; 0x02
    36aa:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	60 e0       	ldi	r22, 0x00	; 0
    36b0:	41 e0       	ldi	r20, 0x01	; 1
    36b2:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	61 e0       	ldi	r22, 0x01	; 1
    36ba:	40 e0       	ldi	r20, 0x00	; 0
    36bc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	62 e0       	ldi	r22, 0x02	; 2
    36c4:	40 e0       	ldi	r20, 0x00	; 0
    36c6:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	63 e0       	ldi	r22, 0x03	; 3
    36ce:	41 e0       	ldi	r20, 0x01	; 1
    36d0:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
void SMD_voidContralHalfStep (u16 Copy_u16Angle)
{
    
    Local_u16TurnsNumber = Copy_u16Angle / StrideAngle_OneStep;
    u16 Local_u16LoopCounter = 0;
    for(Local_u16LoopCounter = 0; Local_u16LoopCounter <= Local_u16TurnsNumber / 8; Local_u16LoopCounter++)
    36d4:	de 01       	movw	r26, r28
    36d6:	ad 59       	subi	r26, 0x9D	; 157
    36d8:	bf 4f       	sbci	r27, 0xFF	; 255
    36da:	fe 01       	movw	r30, r28
    36dc:	ed 59       	subi	r30, 0x9D	; 157
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	80 81       	ld	r24, Z
    36e2:	91 81       	ldd	r25, Z+1	; 0x01
    36e4:	01 96       	adiw	r24, 0x01	; 1
    36e6:	11 96       	adiw	r26, 0x01	; 1
    36e8:	9c 93       	st	X, r25
    36ea:	8e 93       	st	-X, r24
    36ec:	80 91 a2 00 	lds	r24, 0x00A2
    36f0:	90 91 a3 00 	lds	r25, 0x00A3
    36f4:	9c 01       	movw	r18, r24
    36f6:	36 95       	lsr	r19
    36f8:	27 95       	ror	r18
    36fa:	36 95       	lsr	r19
    36fc:	27 95       	ror	r18
    36fe:	36 95       	lsr	r19
    3700:	27 95       	ror	r18
    3702:	fe 01       	movw	r30, r28
    3704:	ed 59       	subi	r30, 0x9D	; 157
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	80 81       	ld	r24, Z
    370a:	91 81       	ldd	r25, Z+1	; 0x01
    370c:	28 17       	cp	r18, r24
    370e:	39 07       	cpc	r19, r25
    3710:	08 f0       	brcs	.+2      	; 0x3714 <SMD_voidContralHalfStep+0x942>
    3712:	8d cb       	rjmp	.-2278   	; 0x2e2e <SMD_voidContralHalfStep+0x5c>
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    }
}
    3714:	ca 59       	subi	r28, 0x9A	; 154
    3716:	df 4f       	sbci	r29, 0xFF	; 255
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	f8 94       	cli
    371c:	de bf       	out	0x3e, r29	; 62
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	cd bf       	out	0x3d, r28	; 61
    3722:	cf 91       	pop	r28
    3724:	df 91       	pop	r29
    3726:	1f 91       	pop	r17
    3728:	0f 91       	pop	r16
    372a:	08 95       	ret

0000372c <SMD_voidStop>:

void SMD_voidStop(void)
{
    372c:	df 93       	push	r29
    372e:	cf 93       	push	r28
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
    DIO_voidSetPortSpecificDirection(SMD_PORT, 0x00);
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	60 e0       	ldi	r22, 0x00	; 0
    3738:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_voidSetPortSpecificDirection>
}
    373c:	cf 91       	pop	r28
    373e:	df 91       	pop	r29
    3740:	08 95       	ret

00003742 <LM35_voidInit>:
#include "LM35_private.h"
#include "LM35_config.h"


void LM35_voidInit(void)
{
    3742:	df 93       	push	r29
    3744:	cf 93       	push	r28
    3746:	cd b7       	in	r28, 0x3d	; 61
    3748:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(LM35_PORT, LM35_CHANNEL, INPUT);
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	40 e0       	ldi	r20, 0x00	; 0
    3750:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
	ADC_voidInit();
    3754:	0e 94 cf 13 	call	0x279e	; 0x279e <ADC_voidInit>
}
    3758:	cf 91       	pop	r28
    375a:	df 91       	pop	r29
    375c:	08 95       	ret

0000375e <LM35_u8GetTempratureSynchronous>:

static u8 StepSize = (u8)(5000UL / 256UL);
u8 LM35_u8GetTempratureSynchronous (void)
{
    375e:	df 93       	push	r29
    3760:	cf 93       	push	r28
    3762:	00 d0       	rcall	.+0      	; 0x3764 <LM35_u8GetTempratureSynchronous+0x6>
    3764:	00 d0       	rcall	.+0      	; 0x3766 <LM35_u8GetTempratureSynchronous+0x8>
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8DigitalValue  = 0;
    376a:	1c 82       	std	Y+4, r1	; 0x04
	u16 Local_u8AnalogValue  = 0;
    376c:	1b 82       	std	Y+3, r1	; 0x03
    376e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8TempValue     = 0;
    3770:	19 82       	std	Y+1, r1	; 0x01
	
	Local_u8DigitalValue = ACD_voidStartConversionSynchronous(ADC_Channel_0);
    3772:	80 e0       	ldi	r24, 0x00	; 0
    3774:	0e 94 14 14 	call	0x2828	; 0x2828 <ACD_voidStartConversionSynchronous>
    3778:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8AnalogValue  = (u16) ((u8)Local_u8DigitalValue * (u8)StepSize);
    377a:	8c 81       	ldd	r24, Y+4	; 0x04
    377c:	28 2f       	mov	r18, r24
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	80 91 72 00 	lds	r24, 0x0072
    3784:	88 2f       	mov	r24, r24
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	ac 01       	movw	r20, r24
    378a:	24 9f       	mul	r18, r20
    378c:	c0 01       	movw	r24, r0
    378e:	25 9f       	mul	r18, r21
    3790:	90 0d       	add	r25, r0
    3792:	34 9f       	mul	r19, r20
    3794:	90 0d       	add	r25, r0
    3796:	11 24       	eor	r1, r1
    3798:	9b 83       	std	Y+3, r25	; 0x03
    379a:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8TempValue    = (u8)((u32)Local_u8AnalogValue / 10UL);
    379c:	8a 81       	ldd	r24, Y+2	; 0x02
    379e:	9b 81       	ldd	r25, Y+3	; 0x03
    37a0:	2a e0       	ldi	r18, 0x0A	; 10
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	b9 01       	movw	r22, r18
    37a6:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodhi4>
    37aa:	cb 01       	movw	r24, r22
    37ac:	89 83       	std	Y+1, r24	; 0x01

	return(Local_u8TempValue);
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    37b0:	0f 90       	pop	r0
    37b2:	0f 90       	pop	r0
    37b4:	0f 90       	pop	r0
    37b6:	0f 90       	pop	r0
    37b8:	cf 91       	pop	r28
    37ba:	df 91       	pop	r29
    37bc:	08 95       	ret

000037be <LM35_u8GetTempratureASynchronous>:

u8 TempValue   = 255;
void LM35_u8GetTempratureASynchronous(u8 *Ref_u8Digital)
{
    37be:	df 93       	push	r29
    37c0:	cf 93       	push	r28
    37c2:	00 d0       	rcall	.+0      	; 0x37c4 <LM35_u8GetTempratureASynchronous+0x6>
    37c4:	00 d0       	rcall	.+0      	; 0x37c6 <LM35_u8GetTempratureASynchronous+0x8>
    37c6:	0f 92       	push	r0
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
    37cc:	9d 83       	std	Y+5, r25	; 0x05
    37ce:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8DigitalValue  = 0;
    37d0:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u8AnalogValue  = 0;
    37d2:	1a 82       	std	Y+2, r1	; 0x02
    37d4:	19 82       	std	Y+1, r1	; 0x01
	Local_u8AnalogValue = (u16) ((u8)(*Ref_u8Digital)) * (u8)StepSize;
    37d6:	ec 81       	ldd	r30, Y+4	; 0x04
    37d8:	fd 81       	ldd	r31, Y+5	; 0x05
    37da:	80 81       	ld	r24, Z
    37dc:	28 2f       	mov	r18, r24
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	80 91 72 00 	lds	r24, 0x0072
    37e4:	88 2f       	mov	r24, r24
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	ac 01       	movw	r20, r24
    37ea:	24 9f       	mul	r18, r20
    37ec:	c0 01       	movw	r24, r0
    37ee:	25 9f       	mul	r18, r21
    37f0:	90 0d       	add	r25, r0
    37f2:	34 9f       	mul	r19, r20
    37f4:	90 0d       	add	r25, r0
    37f6:	11 24       	eor	r1, r1
    37f8:	9a 83       	std	Y+2, r25	; 0x02
    37fa:	89 83       	std	Y+1, r24	; 0x01
	TempValue = (u8)((u32)Local_u8AnalogValue / 10UL);
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
    37fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3800:	2a e0       	ldi	r18, 0x0A	; 10
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	b9 01       	movw	r22, r18
    3806:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodhi4>
    380a:	cb 01       	movw	r24, r22
    380c:	80 93 73 00 	sts	0x0073, r24

}
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	0f 90       	pop	r0
    3818:	0f 90       	pop	r0
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	08 95       	ret

00003820 <LM35_ASynchronous>:

u8 LM35_ASynchronous (void)
{
    3820:	df 93       	push	r29
    3822:	cf 93       	push	r28
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
	ACD_voidStartConversionASynchronous(ADC_Channel_0, &LM35_u8GetTempratureASynchronous);
    3828:	2f ed       	ldi	r18, 0xDF	; 223
    382a:	3b e1       	ldi	r19, 0x1B	; 27
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	b9 01       	movw	r22, r18
    3830:	0e 94 49 14 	call	0x2892	; 0x2892 <ACD_voidStartConversionASynchronous>
	return(TempValue);
    3834:	80 91 73 00 	lds	r24, 0x0073
}
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <voidSendCommand>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

static void voidSendCommand(u8 Copy_u8Command)
{
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
    3846:	2f 97       	sbiw	r28, 0x0f	; 15
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	f8 94       	cli
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	8f 87       	std	Y+15, r24	; 0x0f
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_Rw, LOW);
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	60 e0       	ldi	r22, 0x00	; 0
    3858:	40 e0       	ldi	r20, 0x00	; 0
    385a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_RS, LOW);
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	61 e0       	ldi	r22, 0x01	; 1
    3862:	40 e0       	ldi	r20, 0x00	; 0
    3864:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>

    DIO_voidSetPortSpecificValue(LCD_DATA_PORT, Copy_u8Command);
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	6f 85       	ldd	r22, Y+15	; 0x0f
    386c:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_voidSetPortSpecificValue>

    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, LOW);
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	62 e0       	ldi	r22, 0x02	; 2
    3874:	40 e0       	ldi	r20, 0x00	; 0
    3876:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, HIGH);
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	62 e0       	ldi	r22, 0x02	; 2
    387e:	41 e0       	ldi	r20, 0x01	; 1
    3880:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	a0 e0       	ldi	r26, 0x00	; 0
    388a:	b0 e4       	ldi	r27, 0x40	; 64
    388c:	8b 87       	std	Y+11, r24	; 0x0b
    388e:	9c 87       	std	Y+12, r25	; 0x0c
    3890:	ad 87       	std	Y+13, r26	; 0x0d
    3892:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3894:	6b 85       	ldd	r22, Y+11	; 0x0b
    3896:	7c 85       	ldd	r23, Y+12	; 0x0c
    3898:	8d 85       	ldd	r24, Y+13	; 0x0d
    389a:	9e 85       	ldd	r25, Y+14	; 0x0e
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	4a ef       	ldi	r20, 0xFA	; 250
    38a2:	54 e4       	ldi	r21, 0x44	; 68
    38a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	8f 83       	std	Y+7, r24	; 0x07
    38ae:	98 87       	std	Y+8, r25	; 0x08
    38b0:	a9 87       	std	Y+9, r26	; 0x09
    38b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38b4:	6f 81       	ldd	r22, Y+7	; 0x07
    38b6:	78 85       	ldd	r23, Y+8	; 0x08
    38b8:	89 85       	ldd	r24, Y+9	; 0x09
    38ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 e8       	ldi	r20, 0x80	; 128
    38c2:	5f e3       	ldi	r21, 0x3F	; 63
    38c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38c8:	88 23       	and	r24, r24
    38ca:	2c f4       	brge	.+10     	; 0x38d6 <voidSendCommand+0x98>
		__ticks = 1;
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	9e 83       	std	Y+6, r25	; 0x06
    38d2:	8d 83       	std	Y+5, r24	; 0x05
    38d4:	3f c0       	rjmp	.+126    	; 0x3954 <voidSendCommand+0x116>
	else if (__tmp > 65535)
    38d6:	6f 81       	ldd	r22, Y+7	; 0x07
    38d8:	78 85       	ldd	r23, Y+8	; 0x08
    38da:	89 85       	ldd	r24, Y+9	; 0x09
    38dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	3f ef       	ldi	r19, 0xFF	; 255
    38e2:	4f e7       	ldi	r20, 0x7F	; 127
    38e4:	57 e4       	ldi	r21, 0x47	; 71
    38e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ea:	18 16       	cp	r1, r24
    38ec:	4c f5       	brge	.+82     	; 0x3940 <voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    38f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e2       	ldi	r20, 0x20	; 32
    38fc:	51 e4       	ldi	r21, 0x41	; 65
    38fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	bc 01       	movw	r22, r24
    3908:	cd 01       	movw	r24, r26
    390a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	9e 83       	std	Y+6, r25	; 0x06
    3914:	8d 83       	std	Y+5, r24	; 0x05
    3916:	0f c0       	rjmp	.+30     	; 0x3936 <voidSendCommand+0xf8>
    3918:	88 ec       	ldi	r24, 0xC8	; 200
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	9c 83       	std	Y+4, r25	; 0x04
    391e:	8b 83       	std	Y+3, r24	; 0x03
    3920:	8b 81       	ldd	r24, Y+3	; 0x03
    3922:	9c 81       	ldd	r25, Y+4	; 0x04
    3924:	01 97       	sbiw	r24, 0x01	; 1
    3926:	f1 f7       	brne	.-4      	; 0x3924 <voidSendCommand+0xe6>
    3928:	9c 83       	std	Y+4, r25	; 0x04
    392a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    392c:	8d 81       	ldd	r24, Y+5	; 0x05
    392e:	9e 81       	ldd	r25, Y+6	; 0x06
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	9e 83       	std	Y+6, r25	; 0x06
    3934:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3936:	8d 81       	ldd	r24, Y+5	; 0x05
    3938:	9e 81       	ldd	r25, Y+6	; 0x06
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	69 f7       	brne	.-38     	; 0x3918 <voidSendCommand+0xda>
    393e:	14 c0       	rjmp	.+40     	; 0x3968 <voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3940:	6f 81       	ldd	r22, Y+7	; 0x07
    3942:	78 85       	ldd	r23, Y+8	; 0x08
    3944:	89 85       	ldd	r24, Y+9	; 0x09
    3946:	9a 85       	ldd	r25, Y+10	; 0x0a
    3948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	9e 83       	std	Y+6, r25	; 0x06
    3952:	8d 83       	std	Y+5, r24	; 0x05
    3954:	8d 81       	ldd	r24, Y+5	; 0x05
    3956:	9e 81       	ldd	r25, Y+6	; 0x06
    3958:	9a 83       	std	Y+2, r25	; 0x02
    395a:	89 83       	std	Y+1, r24	; 0x01
    395c:	89 81       	ldd	r24, Y+1	; 0x01
    395e:	9a 81       	ldd	r25, Y+2	; 0x02
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	f1 f7       	brne	.-4      	; 0x3960 <voidSendCommand+0x122>
    3964:	9a 83       	std	Y+2, r25	; 0x02
    3966:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, LOW);
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	62 e0       	ldi	r22, 0x02	; 2
    396c:	40 e0       	ldi	r20, 0x00	; 0
    396e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
}
    3972:	2f 96       	adiw	r28, 0x0f	; 15
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	cf 91       	pop	r28
    3980:	df 91       	pop	r29
    3982:	08 95       	ret

00003984 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	cd b7       	in	r28, 0x3d	; 61
    398a:	de b7       	in	r29, 0x3e	; 62
    398c:	2f 97       	sbiw	r28, 0x0f	; 15
    398e:	0f b6       	in	r0, 0x3f	; 63
    3990:	f8 94       	cli
    3992:	de bf       	out	0x3e, r29	; 62
    3994:	0f be       	out	0x3f, r0	; 63
    3996:	cd bf       	out	0x3d, r28	; 61
    3998:	8f 87       	std	Y+15, r24	; 0x0f

    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_RS, HIGH);
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	61 e0       	ldi	r22, 0x01	; 1
    399e:	41 e0       	ldi	r20, 0x01	; 1
    39a0:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_Rw, LOW);
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	60 e0       	ldi	r22, 0x00	; 0
    39a8:	40 e0       	ldi	r20, 0x00	; 0
    39aa:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    

    DIO_voidSetPortSpecificValue(LCD_DATA_PORT, Copy_u8Data);
    39ae:	80 e0       	ldi	r24, 0x00	; 0
    39b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    39b2:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_voidSetPortSpecificValue>

    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, LOW);
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	62 e0       	ldi	r22, 0x02	; 2
    39ba:	40 e0       	ldi	r20, 0x00	; 0
    39bc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, HIGH);
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	62 e0       	ldi	r22, 0x02	; 2
    39c4:	41 e0       	ldi	r20, 0x01	; 1
    39c6:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	a0 e0       	ldi	r26, 0x00	; 0
    39d0:	b0 e4       	ldi	r27, 0x40	; 64
    39d2:	8b 87       	std	Y+11, r24	; 0x0b
    39d4:	9c 87       	std	Y+12, r25	; 0x0c
    39d6:	ad 87       	std	Y+13, r26	; 0x0d
    39d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39da:	6b 85       	ldd	r22, Y+11	; 0x0b
    39dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    39de:	8d 85       	ldd	r24, Y+13	; 0x0d
    39e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	4a ef       	ldi	r20, 0xFA	; 250
    39e8:	54 e4       	ldi	r21, 0x44	; 68
    39ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	8f 83       	std	Y+7, r24	; 0x07
    39f4:	98 87       	std	Y+8, r25	; 0x08
    39f6:	a9 87       	std	Y+9, r26	; 0x09
    39f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39fa:	6f 81       	ldd	r22, Y+7	; 0x07
    39fc:	78 85       	ldd	r23, Y+8	; 0x08
    39fe:	89 85       	ldd	r24, Y+9	; 0x09
    3a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	40 e8       	ldi	r20, 0x80	; 128
    3a08:	5f e3       	ldi	r21, 0x3F	; 63
    3a0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a0e:	88 23       	and	r24, r24
    3a10:	2c f4       	brge	.+10     	; 0x3a1c <LCD_voidSendData+0x98>
		__ticks = 1;
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	9e 83       	std	Y+6, r25	; 0x06
    3a18:	8d 83       	std	Y+5, r24	; 0x05
    3a1a:	3f c0       	rjmp	.+126    	; 0x3a9a <LCD_voidSendData+0x116>
	else if (__tmp > 65535)
    3a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1e:	78 85       	ldd	r23, Y+8	; 0x08
    3a20:	89 85       	ldd	r24, Y+9	; 0x09
    3a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	3f ef       	ldi	r19, 0xFF	; 255
    3a28:	4f e7       	ldi	r20, 0x7F	; 127
    3a2a:	57 e4       	ldi	r21, 0x47	; 71
    3a2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a30:	18 16       	cp	r1, r24
    3a32:	4c f5       	brge	.+82     	; 0x3a86 <LCD_voidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	40 e2       	ldi	r20, 0x20	; 32
    3a42:	51 e4       	ldi	r21, 0x41	; 65
    3a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a48:	dc 01       	movw	r26, r24
    3a4a:	cb 01       	movw	r24, r22
    3a4c:	bc 01       	movw	r22, r24
    3a4e:	cd 01       	movw	r24, r26
    3a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a54:	dc 01       	movw	r26, r24
    3a56:	cb 01       	movw	r24, r22
    3a58:	9e 83       	std	Y+6, r25	; 0x06
    3a5a:	8d 83       	std	Y+5, r24	; 0x05
    3a5c:	0f c0       	rjmp	.+30     	; 0x3a7c <LCD_voidSendData+0xf8>
    3a5e:	88 ec       	ldi	r24, 0xC8	; 200
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	9c 83       	std	Y+4, r25	; 0x04
    3a64:	8b 83       	std	Y+3, r24	; 0x03
    3a66:	8b 81       	ldd	r24, Y+3	; 0x03
    3a68:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6a:	01 97       	sbiw	r24, 0x01	; 1
    3a6c:	f1 f7       	brne	.-4      	; 0x3a6a <LCD_voidSendData+0xe6>
    3a6e:	9c 83       	std	Y+4, r25	; 0x04
    3a70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a72:	8d 81       	ldd	r24, Y+5	; 0x05
    3a74:	9e 81       	ldd	r25, Y+6	; 0x06
    3a76:	01 97       	sbiw	r24, 0x01	; 1
    3a78:	9e 83       	std	Y+6, r25	; 0x06
    3a7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a80:	00 97       	sbiw	r24, 0x00	; 0
    3a82:	69 f7       	brne	.-38     	; 0x3a5e <LCD_voidSendData+0xda>
    3a84:	14 c0       	rjmp	.+40     	; 0x3aae <LCD_voidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a86:	6f 81       	ldd	r22, Y+7	; 0x07
    3a88:	78 85       	ldd	r23, Y+8	; 0x08
    3a8a:	89 85       	ldd	r24, Y+9	; 0x09
    3a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	9e 83       	std	Y+6, r25	; 0x06
    3a98:	8d 83       	std	Y+5, r24	; 0x05
    3a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9e:	9a 83       	std	Y+2, r25	; 0x02
    3aa0:	89 83       	std	Y+1, r24	; 0x01
    3aa2:	89 81       	ldd	r24, Y+1	; 0x01
    3aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa6:	01 97       	sbiw	r24, 0x01	; 1
    3aa8:	f1 f7       	brne	.-4      	; 0x3aa6 <LCD_voidSendData+0x122>
    3aaa:	9a 83       	std	Y+2, r25	; 0x02
    3aac:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, LOW);
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	62 e0       	ldi	r22, 0x02	; 2
    3ab2:	40 e0       	ldi	r20, 0x00	; 0
    3ab4:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>

}
    3ab8:	2f 96       	adiw	r28, 0x0f	; 15
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	f8 94       	cli
    3abe:	de bf       	out	0x3e, r29	; 62
    3ac0:	0f be       	out	0x3f, r0	; 63
    3ac2:	cd bf       	out	0x3d, r28	; 61
    3ac4:	cf 91       	pop	r28
    3ac6:	df 91       	pop	r29
    3ac8:	08 95       	ret

00003aca <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    3aca:	df 93       	push	r29
    3acc:	cf 93       	push	r28
    3ace:	cd b7       	in	r28, 0x3d	; 61
    3ad0:	de b7       	in	r29, 0x3e	; 62
    3ad2:	2d 97       	sbiw	r28, 0x0d	; 13
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de bf       	out	0x3e, r29	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd bf       	out	0x3d, r28	; 61
    3ade:	9d 87       	std	Y+13, r25	; 0x0d
    3ae0:	8c 87       	std	Y+12, r24	; 0x0c
	 u8 Local_u8SpllitedNumber[10];
	 s8 Local_s8LoopCounter = 0;
    3ae2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u32Number == 0)
    3ae4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ae6:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ae8:	00 97       	sbiw	r24, 0x00	; 0
    3aea:	19 f5       	brne	.+70     	; 0x3b32 <LCD_voidSendNumber+0x68>
	{
		LCD_voidSendData('0');
    3aec:	80 e3       	ldi	r24, 0x30	; 48
    3aee:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_voidSendData>
    3af2:	1f c0       	rjmp	.+62     	; 0x3b32 <LCD_voidSendNumber+0x68>
	}
    while (Copy_u32Number != 0)
    {
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
    3af4:	89 81       	ldd	r24, Y+1	; 0x01
    3af6:	e8 2f       	mov	r30, r24
    3af8:	ff 27       	eor	r31, r31
    3afa:	e7 fd       	sbrc	r30, 7
    3afc:	f0 95       	com	r31
    3afe:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b00:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b02:	2a e0       	ldi	r18, 0x0A	; 10
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	b9 01       	movw	r22, r18
    3b08:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodhi4>
    3b0c:	28 2f       	mov	r18, r24
    3b0e:	ce 01       	movw	r24, r28
    3b10:	02 96       	adiw	r24, 0x02	; 2
    3b12:	e8 0f       	add	r30, r24
    3b14:	f9 1f       	adc	r31, r25
    3b16:	20 83       	st	Z, r18
        Copy_u32Number /= 10;
    3b18:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b1c:	2a e0       	ldi	r18, 0x0A	; 10
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	b9 01       	movw	r22, r18
    3b22:	0e 94 ef 20 	call	0x41de	; 0x41de <__udivmodhi4>
    3b26:	cb 01       	movw	r24, r22
    3b28:	9d 87       	std	Y+13, r25	; 0x0d
    3b2a:	8c 87       	std	Y+12, r24	; 0x0c
        Local_s8LoopCounter++;
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	8f 5f       	subi	r24, 0xFF	; 255
    3b30:	89 83       	std	Y+1, r24	; 0x01
	 s8 Local_s8LoopCounter = 0;
	if(Copy_u32Number == 0)
	{
		LCD_voidSendData('0');
	}
    while (Copy_u32Number != 0)
    3b32:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b34:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b36:	00 97       	sbiw	r24, 0x00	; 0
    3b38:	e9 f6       	brne	.-70     	; 0x3af4 <LCD_voidSendNumber+0x2a>
    {
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
    3b3a:	89 81       	ldd	r24, Y+1	; 0x01
    3b3c:	81 50       	subi	r24, 0x01	; 1
    3b3e:	89 83       	std	Y+1, r24	; 0x01
    3b40:	11 c0       	rjmp	.+34     	; 0x3b64 <LCD_voidSendNumber+0x9a>
    while (Local_s8LoopCounter >= 0)
    {
        LCD_voidSendData(Local_u8SpllitedNumber[Local_s8LoopCounter] + '0');
    3b42:	89 81       	ldd	r24, Y+1	; 0x01
    3b44:	28 2f       	mov	r18, r24
    3b46:	33 27       	eor	r19, r19
    3b48:	27 fd       	sbrc	r18, 7
    3b4a:	30 95       	com	r19
    3b4c:	ce 01       	movw	r24, r28
    3b4e:	02 96       	adiw	r24, 0x02	; 2
    3b50:	fc 01       	movw	r30, r24
    3b52:	e2 0f       	add	r30, r18
    3b54:	f3 1f       	adc	r31, r19
    3b56:	80 81       	ld	r24, Z
    3b58:	80 5d       	subi	r24, 0xD0	; 208
    3b5a:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_voidSendData>
        Local_s8LoopCounter--;
    3b5e:	89 81       	ldd	r24, Y+1	; 0x01
    3b60:	81 50       	subi	r24, 0x01	; 1
    3b62:	89 83       	std	Y+1, r24	; 0x01
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
    while (Local_s8LoopCounter >= 0)
    3b64:	89 81       	ldd	r24, Y+1	; 0x01
    3b66:	88 23       	and	r24, r24
    3b68:	64 f7       	brge	.-40     	; 0x3b42 <LCD_voidSendNumber+0x78>
    {
        LCD_voidSendData(Local_u8SpllitedNumber[Local_s8LoopCounter] + '0');
        Local_s8LoopCounter--;
    }
    
}
    3b6a:	2d 96       	adiw	r28, 0x0d	; 13
    3b6c:	0f b6       	in	r0, 0x3f	; 63
    3b6e:	f8 94       	cli
    3b70:	de bf       	out	0x3e, r29	; 62
    3b72:	0f be       	out	0x3f, r0	; 63
    3b74:	cd bf       	out	0x3d, r28	; 61
    3b76:	cf 91       	pop	r28
    3b78:	df 91       	pop	r29
    3b7a:	08 95       	ret

00003b7c <LCD_voidGotoXY>:

void LCD_voidGotoXY(u8 Copy_u8X, u8 Copy_u8Y)
{
    3b7c:	df 93       	push	r29
    3b7e:	cf 93       	push	r28
    3b80:	00 d0       	rcall	.+0      	; 0x3b82 <LCD_voidGotoXY+0x6>
    3b82:	0f 92       	push	r0
    3b84:	cd b7       	in	r28, 0x3d	; 61
    3b86:	de b7       	in	r29, 0x3e	; 62
    3b88:	8a 83       	std	Y+2, r24	; 0x02
    3b8a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Address = 0;
    3b8c:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u8X == 0)
    3b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b90:	88 23       	and	r24, r24
    3b92:	19 f4       	brne	.+6      	; 0x3b9a <LCD_voidGotoXY+0x1e>
    {
        Local_u8Address = Copy_u8Y;
    3b94:	8b 81       	ldd	r24, Y+3	; 0x03
    3b96:	89 83       	std	Y+1, r24	; 0x01
    3b98:	06 c0       	rjmp	.+12     	; 0x3ba6 <LCD_voidGotoXY+0x2a>
    }
    else if(Copy_u8X == 1)
    3b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9c:	81 30       	cpi	r24, 0x01	; 1
    3b9e:	19 f4       	brne	.+6      	; 0x3ba6 <LCD_voidGotoXY+0x2a>
    {
        Local_u8Address = Copy_u8Y + 0x40;
    3ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba2:	80 5c       	subi	r24, 0xC0	; 192
    3ba4:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {

    }
    SET_BIT(Local_u8Address, 7);
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	80 68       	ori	r24, 0x80	; 128
    3baa:	89 83       	std	Y+1, r24	; 0x01
    voidSendCommand(Local_u8Address);
    3bac:	89 81       	ldd	r24, Y+1	; 0x01
    3bae:	0e 94 1f 1c 	call	0x383e	; 0x383e <voidSendCommand>
}
    3bb2:	0f 90       	pop	r0
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	cf 91       	pop	r28
    3bba:	df 91       	pop	r29
    3bbc:	08 95       	ret

00003bbe <LCD_voidSendSrting>:

void LCD_voidSendSrting(const u8 * Ref_pu8String)
{
    3bbe:	df 93       	push	r29
    3bc0:	cf 93       	push	r28
    3bc2:	00 d0       	rcall	.+0      	; 0x3bc4 <LCD_voidSendSrting+0x6>
    3bc4:	0f 92       	push	r0
    3bc6:	cd b7       	in	r28, 0x3d	; 61
    3bc8:	de b7       	in	r29, 0x3e	; 62
    3bca:	9b 83       	std	Y+3, r25	; 0x03
    3bcc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopCounter = 0;
    3bce:	19 82       	std	Y+1, r1	; 0x01
    3bd0:	0e c0       	rjmp	.+28     	; 0x3bee <LCD_voidSendSrting+0x30>
	while(Ref_pu8String[Local_u8LoopCounter] != NULL_TERMINATOR)
    {
		LCD_voidSendData(Ref_pu8String[Local_u8LoopCounter]);
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	28 2f       	mov	r18, r24
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bda:	9b 81       	ldd	r25, Y+3	; 0x03
    3bdc:	fc 01       	movw	r30, r24
    3bde:	e2 0f       	add	r30, r18
    3be0:	f3 1f       	adc	r31, r19
    3be2:	80 81       	ld	r24, Z
    3be4:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_voidSendData>
		Local_u8LoopCounter++;
    3be8:	89 81       	ldd	r24, Y+1	; 0x01
    3bea:	8f 5f       	subi	r24, 0xFF	; 255
    3bec:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendSrting(const u8 * Ref_pu8String)
{
	u8 Local_u8LoopCounter = 0;
	while(Ref_pu8String[Local_u8LoopCounter] != NULL_TERMINATOR)
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
    3bf0:	28 2f       	mov	r18, r24
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	e2 0f       	add	r30, r18
    3bfc:	f3 1f       	adc	r31, r19
    3bfe:	80 81       	ld	r24, Z
    3c00:	88 23       	and	r24, r24
    3c02:	39 f7       	brne	.-50     	; 0x3bd2 <LCD_voidSendSrting+0x14>
    {
		LCD_voidSendData(Ref_pu8String[Local_u8LoopCounter]);
		Local_u8LoopCounter++;
	}
}
    3c04:	0f 90       	pop	r0
    3c06:	0f 90       	pop	r0
    3c08:	0f 90       	pop	r0
    3c0a:	cf 91       	pop	r28
    3c0c:	df 91       	pop	r29
    3c0e:	08 95       	ret

00003c10 <LCD_voidSendCustomCharacter>:

void LCD_voidSendCustomCharacter(u8 * Ref_pu8CharacterArray, u8 Copy_u8PatternNumber, u8 Copy_u8XPosition, u8 Copy_u8YPosition)
{
    3c10:	df 93       	push	r29
    3c12:	cf 93       	push	r28
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
    3c18:	27 97       	sbiw	r28, 0x07	; 7
    3c1a:	0f b6       	in	r0, 0x3f	; 63
    3c1c:	f8 94       	cli
    3c1e:	de bf       	out	0x3e, r29	; 62
    3c20:	0f be       	out	0x3f, r0	; 63
    3c22:	cd bf       	out	0x3d, r28	; 61
    3c24:	9c 83       	std	Y+4, r25	; 0x04
    3c26:	8b 83       	std	Y+3, r24	; 0x03
    3c28:	6d 83       	std	Y+5, r22	; 0x05
    3c2a:	4e 83       	std	Y+6, r20	; 0x06
    3c2c:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8LoopCounter = 0;
    3c2e:	1a 82       	std	Y+2, r1	; 0x02
    /*CALCULATE THE CGRAM ADDRESS OF THE PATTERN = PatternNumber * 8 (The Frist Location)*/
    u8 Local_u8CGRAMAddress = Copy_u8PatternNumber * 8; 
    3c30:	8d 81       	ldd	r24, Y+5	; 0x05
    3c32:	88 2f       	mov	r24, r24
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	88 0f       	add	r24, r24
    3c38:	99 1f       	adc	r25, r25
    3c3a:	88 0f       	add	r24, r24
    3c3c:	99 1f       	adc	r25, r25
    3c3e:	88 0f       	add	r24, r24
    3c40:	99 1f       	adc	r25, r25
    3c42:	89 83       	std	Y+1, r24	; 0x01
    /*SET THE 6th OF THE SET CGRAM ADDRESS*/
    SET_BIT(Local_u8CGRAMAddress, 6);
    3c44:	89 81       	ldd	r24, Y+1	; 0x01
    3c46:	80 64       	ori	r24, 0x40	; 64
    3c48:	89 83       	std	Y+1, r24	; 0x01
    /*SEND THE CGRAM ADDRESS COMMAND TO LCD*/
    voidSendCommand(Local_u8CGRAMAddress);
    3c4a:	89 81       	ldd	r24, Y+1	; 0x01
    3c4c:	0e 94 1f 1c 	call	0x383e	; 0x383e <voidSendCommand>
    /*LOOP ON THE ARRAY AND SEND EASH ELEMENT TO THE LCD TO BE STORED*/
    for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    3c50:	1a 82       	std	Y+2, r1	; 0x02
    3c52:	0e c0       	rjmp	.+28     	; 0x3c70 <LCD_voidSendCustomCharacter+0x60>
    {
        LCD_voidSendData(Ref_pu8CharacterArray[Local_u8LoopCounter]);
    3c54:	8a 81       	ldd	r24, Y+2	; 0x02
    3c56:	28 2f       	mov	r18, r24
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c5e:	fc 01       	movw	r30, r24
    3c60:	e2 0f       	add	r30, r18
    3c62:	f3 1f       	adc	r31, r19
    3c64:	80 81       	ld	r24, Z
    3c66:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_voidSendData>
    /*SET THE 6th OF THE SET CGRAM ADDRESS*/
    SET_BIT(Local_u8CGRAMAddress, 6);
    /*SEND THE CGRAM ADDRESS COMMAND TO LCD*/
    voidSendCommand(Local_u8CGRAMAddress);
    /*LOOP ON THE ARRAY AND SEND EASH ELEMENT TO THE LCD TO BE STORED*/
    for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    3c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6c:	8f 5f       	subi	r24, 0xFF	; 255
    3c6e:	8a 83       	std	Y+2, r24	; 0x02
    3c70:	8a 81       	ldd	r24, Y+2	; 0x02
    3c72:	88 30       	cpi	r24, 0x08	; 8
    3c74:	78 f3       	brcs	.-34     	; 0x3c54 <LCD_voidSendCustomCharacter+0x44>
    {
        LCD_voidSendData(Ref_pu8CharacterArray[Local_u8LoopCounter]);
    }
    /*Send Command To DDRAM To Store The Data*/
    LCD_voidGotoXY(Copy_u8XPosition, Copy_u8YPosition);
    3c76:	8e 81       	ldd	r24, Y+6	; 0x06
    3c78:	6f 81       	ldd	r22, Y+7	; 0x07
    3c7a:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <LCD_voidGotoXY>
    /*Send The Pattern Number To Display*/
    LCD_voidSendData(Copy_u8PatternNumber);
    3c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c80:	0e 94 c2 1c 	call	0x3984	; 0x3984 <LCD_voidSendData>
}
    3c84:	27 96       	adiw	r28, 0x07	; 7
    3c86:	0f b6       	in	r0, 0x3f	; 63
    3c88:	f8 94       	cli
    3c8a:	de bf       	out	0x3e, r29	; 62
    3c8c:	0f be       	out	0x3f, r0	; 63
    3c8e:	cd bf       	out	0x3d, r28	; 61
    3c90:	cf 91       	pop	r28
    3c92:	df 91       	pop	r29
    3c94:	08 95       	ret

00003c96 <LCD_voidInit>:
void LCD_voidInit(void)
{
    3c96:	df 93       	push	r29
    3c98:	cf 93       	push	r28
    3c9a:	cd b7       	in	r28, 0x3d	; 61
    3c9c:	de b7       	in	r29, 0x3e	; 62
    3c9e:	2e 97       	sbiw	r28, 0x0e	; 14
    3ca0:	0f b6       	in	r0, 0x3f	; 63
    3ca2:	f8 94       	cli
    3ca4:	de bf       	out	0x3e, r29	; 62
    3ca6:	0f be       	out	0x3f, r0	; 63
    3ca8:	cd bf       	out	0x3d, r28	; 61
    3caa:	80 e0       	ldi	r24, 0x00	; 0
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	a0 e2       	ldi	r26, 0x20	; 32
    3cb0:	b2 e4       	ldi	r27, 0x42	; 66
    3cb2:	8b 87       	std	Y+11, r24	; 0x0b
    3cb4:	9c 87       	std	Y+12, r25	; 0x0c
    3cb6:	ad 87       	std	Y+13, r26	; 0x0d
    3cb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc2:	20 e0       	ldi	r18, 0x00	; 0
    3cc4:	30 e0       	ldi	r19, 0x00	; 0
    3cc6:	4a ef       	ldi	r20, 0xFA	; 250
    3cc8:	54 e4       	ldi	r21, 0x44	; 68
    3cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	8f 83       	std	Y+7, r24	; 0x07
    3cd4:	98 87       	std	Y+8, r25	; 0x08
    3cd6:	a9 87       	std	Y+9, r26	; 0x09
    3cd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cda:	6f 81       	ldd	r22, Y+7	; 0x07
    3cdc:	78 85       	ldd	r23, Y+8	; 0x08
    3cde:	89 85       	ldd	r24, Y+9	; 0x09
    3ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	40 e8       	ldi	r20, 0x80	; 128
    3ce8:	5f e3       	ldi	r21, 0x3F	; 63
    3cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cee:	88 23       	and	r24, r24
    3cf0:	2c f4       	brge	.+10     	; 0x3cfc <LCD_voidInit+0x66>
		__ticks = 1;
    3cf2:	81 e0       	ldi	r24, 0x01	; 1
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	9e 83       	std	Y+6, r25	; 0x06
    3cf8:	8d 83       	std	Y+5, r24	; 0x05
    3cfa:	3f c0       	rjmp	.+126    	; 0x3d7a <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    3cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    3cfe:	78 85       	ldd	r23, Y+8	; 0x08
    3d00:	89 85       	ldd	r24, Y+9	; 0x09
    3d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	3f ef       	ldi	r19, 0xFF	; 255
    3d08:	4f e7       	ldi	r20, 0x7F	; 127
    3d0a:	57 e4       	ldi	r21, 0x47	; 71
    3d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d10:	18 16       	cp	r1, r24
    3d12:	4c f5       	brge	.+82     	; 0x3d66 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d1c:	20 e0       	ldi	r18, 0x00	; 0
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	40 e2       	ldi	r20, 0x20	; 32
    3d22:	51 e4       	ldi	r21, 0x41	; 65
    3d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	bc 01       	movw	r22, r24
    3d2e:	cd 01       	movw	r24, r26
    3d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	9e 83       	std	Y+6, r25	; 0x06
    3d3a:	8d 83       	std	Y+5, r24	; 0x05
    3d3c:	0f c0       	rjmp	.+30     	; 0x3d5c <LCD_voidInit+0xc6>
    3d3e:	88 ec       	ldi	r24, 0xC8	; 200
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	9c 83       	std	Y+4, r25	; 0x04
    3d44:	8b 83       	std	Y+3, r24	; 0x03
    3d46:	8b 81       	ldd	r24, Y+3	; 0x03
    3d48:	9c 81       	ldd	r25, Y+4	; 0x04
    3d4a:	01 97       	sbiw	r24, 0x01	; 1
    3d4c:	f1 f7       	brne	.-4      	; 0x3d4a <LCD_voidInit+0xb4>
    3d4e:	9c 83       	std	Y+4, r25	; 0x04
    3d50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d52:	8d 81       	ldd	r24, Y+5	; 0x05
    3d54:	9e 81       	ldd	r25, Y+6	; 0x06
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	9e 83       	std	Y+6, r25	; 0x06
    3d5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d60:	00 97       	sbiw	r24, 0x00	; 0
    3d62:	69 f7       	brne	.-38     	; 0x3d3e <LCD_voidInit+0xa8>
    3d64:	14 c0       	rjmp	.+40     	; 0x3d8e <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d66:	6f 81       	ldd	r22, Y+7	; 0x07
    3d68:	78 85       	ldd	r23, Y+8	; 0x08
    3d6a:	89 85       	ldd	r24, Y+9	; 0x09
    3d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d72:	dc 01       	movw	r26, r24
    3d74:	cb 01       	movw	r24, r22
    3d76:	9e 83       	std	Y+6, r25	; 0x06
    3d78:	8d 83       	std	Y+5, r24	; 0x05
    3d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d7e:	9a 83       	std	Y+2, r25	; 0x02
    3d80:	89 83       	std	Y+1, r24	; 0x01
    3d82:	89 81       	ldd	r24, Y+1	; 0x01
    3d84:	9a 81       	ldd	r25, Y+2	; 0x02
    3d86:	01 97       	sbiw	r24, 0x01	; 1
    3d88:	f1 f7       	brne	.-4      	; 0x3d86 <LCD_voidInit+0xf0>
    3d8a:	9a 83       	std	Y+2, r25	; 0x02
    3d8c:	89 83       	std	Y+1, r24	; 0x01
    
    _delay_ms(40);
    /*FUNCTION SET COMMAND*/
    voidSendCommand(LCD_FUNCTION_SET_CMD);
    3d8e:	88 e3       	ldi	r24, 0x38	; 56
    3d90:	0e 94 1f 1c 	call	0x383e	; 0x383e <voidSendCommand>
    /*DISPLAY ON/OFF CONTROL*/
    voidSendCommand(LCD_ON_OFF_CONTROL);
    3d94:	8c e0       	ldi	r24, 0x0C	; 12
    3d96:	0e 94 1f 1c 	call	0x383e	; 0x383e <voidSendCommand>
    /*DISPLAY CLEAR*/
    voidSendCommand(LCD_DISPLAY_CLEAR);
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	0e 94 1f 1c 	call	0x383e	; 0x383e <voidSendCommand>

}
    3da0:	2e 96       	adiw	r28, 0x0e	; 14
    3da2:	0f b6       	in	r0, 0x3f	; 63
    3da4:	f8 94       	cli
    3da6:	de bf       	out	0x3e, r29	; 62
    3da8:	0f be       	out	0x3f, r0	; 63
    3daa:	cd bf       	out	0x3d, r28	; 61
    3dac:	cf 91       	pop	r28
    3dae:	df 91       	pop	r29
    3db0:	08 95       	ret

00003db2 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
    3db2:	df 93       	push	r29
    3db4:	cf 93       	push	r28
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
    voidSendCommand(LCD_DISPLAY_CLEAR);
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	0e 94 1f 1c 	call	0x383e	; 0x383e <voidSendCommand>
}
    3dc0:	cf 91       	pop	r28
    3dc2:	df 91       	pop	r29
    3dc4:	08 95       	ret

00003dc6 <LCD_voidInitPins>:

void LCD_voidInitPins (void)
{
    3dc6:	df 93       	push	r29
    3dc8:	cf 93       	push	r28
    3dca:	cd b7       	in	r28, 0x3d	; 61
    3dcc:	de b7       	in	r29, 0x3e	; 62

    /*Set Data Port To Be OutPut*/
    DIO_voidSetPortDirection(LCD_DATA_PORT, OUTPUT);
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	61 e0       	ldi	r22, 0x01	; 1
    3dd2:	0e 94 4c 12 	call	0x2498	; 0x2498 <DIO_voidSetPortDirection>
    /*Set Contol pin To Be OutPut*/
    DIO_voidSetPortSpecificDirection(LCD_CONTROL_PORT, LCD_SET_CONTROL_PINS);
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	67 e0       	ldi	r22, 0x07	; 7
    3dda:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_voidSetPortSpecificDirection>
}
    3dde:	cf 91       	pop	r28
    3de0:	df 91       	pop	r29
    3de2:	08 95       	ret

00003de4 <KPD_voidInit>:
};



void KPD_voidInit(void)
{
    3de4:	df 93       	push	r29
    3de6:	cf 93       	push	r28
    3de8:	0f 92       	push	r0
    3dea:	cd b7       	in	r28, 0x3d	; 61
    3dec:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8LoopCounter = 0;
    3dee:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < KPD_NUM_OF_COLS; Local_u8LoopCounter++)
    3df0:	19 82       	std	Y+1, r1	; 0x01
    3df2:	33 c0       	rjmp	.+102    	; 0x3e5a <KPD_voidInit+0x76>
	{
		/*Set Rows Pin To Be Input*/
		DIO_voidSetPinDirection(KPD_ROWS_PORT, u8RowsArray[Local_u8LoopCounter], INPUT);
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	88 2f       	mov	r24, r24
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	fc 01       	movw	r30, r24
    3dfc:	ec 58       	subi	r30, 0x8C	; 140
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	90 81       	ld	r25, Z
    3e02:	82 e0       	ldi	r24, 0x02	; 2
    3e04:	69 2f       	mov	r22, r25
    3e06:	40 e0       	ldi	r20, 0x00	; 0
    3e08:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
		/*Set Rows Pin To Be Pullup*/
		DIO_voidSetPinPullUp(KPD_ROWS_PORT, u8RowsArray[Local_u8LoopCounter], PULLUP);
    3e0c:	89 81       	ldd	r24, Y+1	; 0x01
    3e0e:	88 2f       	mov	r24, r24
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	fc 01       	movw	r30, r24
    3e14:	ec 58       	subi	r30, 0x8C	; 140
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	90 81       	ld	r25, Z
    3e1a:	82 e0       	ldi	r24, 0x02	; 2
    3e1c:	69 2f       	mov	r22, r25
    3e1e:	41 e0       	ldi	r20, 0x01	; 1
    3e20:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <DIO_voidSetPinPullUp>
		/*Set Cols Pin To Be Output*/
		DIO_voidSetPinDirection(KPD_COLS_PORT, u8ColsArray[Local_u8LoopCounter], OUTPUT);
    3e24:	89 81       	ldd	r24, Y+1	; 0x01
    3e26:	88 2f       	mov	r24, r24
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	e8 58       	subi	r30, 0x88	; 136
    3e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e30:	90 81       	ld	r25, Z
    3e32:	82 e0       	ldi	r24, 0x02	; 2
    3e34:	69 2f       	mov	r22, r25
    3e36:	41 e0       	ldi	r20, 0x01	; 1
    3e38:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
		/*Set Cols Pin To Be High*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8LoopCounter], HIGH);
    3e3c:	89 81       	ldd	r24, Y+1	; 0x01
    3e3e:	88 2f       	mov	r24, r24
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	fc 01       	movw	r30, r24
    3e44:	e8 58       	subi	r30, 0x88	; 136
    3e46:	ff 4f       	sbci	r31, 0xFF	; 255
    3e48:	90 81       	ld	r25, Z
    3e4a:	82 e0       	ldi	r24, 0x02	; 2
    3e4c:	69 2f       	mov	r22, r25
    3e4e:	41 e0       	ldi	r20, 0x01	; 1
    3e50:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>


void KPD_voidInit(void)
{
	u8 Local_u8LoopCounter = 0;
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < KPD_NUM_OF_COLS; Local_u8LoopCounter++)
    3e54:	89 81       	ldd	r24, Y+1	; 0x01
    3e56:	8f 5f       	subi	r24, 0xFF	; 255
    3e58:	89 83       	std	Y+1, r24	; 0x01
    3e5a:	89 81       	ldd	r24, Y+1	; 0x01
    3e5c:	84 30       	cpi	r24, 0x04	; 4
    3e5e:	50 f2       	brcs	.-108    	; 0x3df4 <KPD_voidInit+0x10>
		DIO_voidSetPinDirection(KPD_COLS_PORT, u8ColsArray[Local_u8LoopCounter], OUTPUT);
		/*Set Cols Pin To Be High*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8LoopCounter], HIGH);

	}
}
    3e60:	0f 90       	pop	r0
    3e62:	cf 91       	pop	r28
    3e64:	df 91       	pop	r29
    3e66:	08 95       	ret

00003e68 <KPD_u8GetPressKey>:




u8 KPD_u8GetPressKey(void)
{
    3e68:	df 93       	push	r29
    3e6a:	cf 93       	push	r28
    3e6c:	00 d0       	rcall	.+0      	; 0x3e6e <KPD_u8GetPressKey+0x6>
    3e6e:	00 d0       	rcall	.+0      	; 0x3e70 <KPD_u8GetPressKey+0x8>
    3e70:	0f 92       	push	r0
    3e72:	cd b7       	in	r28, 0x3d	; 61
    3e74:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8ButtonsArray[KPD_NUM_OF_ROWS][KPD_NUM_OF_COLS] = KPD_VAL;
	u8 Local_u8RowsIndex;
	u8 Local_u8ColsIndex;
	u8 Local_u8RowValue;
	u8 Local_u8Pressedkey = KPD_DEFAULT_VAL;
    3e76:	8f ef       	ldi	r24, 0xFF	; 255
    3e78:	89 83       	std	Y+1, r24	; 0x01
	voidDeactivateColumns();
    3e7a:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <voidDeactivateColumns>
	for(Local_u8ColsIndex = 0; Local_u8ColsIndex < KPD_NUM_OF_COLS; Local_u8ColsIndex++)
    3e7e:	1b 82       	std	Y+3, r1	; 0x03
    3e80:	57 c0       	rjmp	.+174    	; 0x3f30 <KPD_u8GetPressKey+0xc8>
	{
		/*Activate The Current Column*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColsIndex], LOW);
    3e82:	8b 81       	ldd	r24, Y+3	; 0x03
    3e84:	88 2f       	mov	r24, r24
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	fc 01       	movw	r30, r24
    3e8a:	e8 58       	subi	r30, 0x88	; 136
    3e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8e:	90 81       	ld	r25, Z
    3e90:	82 e0       	ldi	r24, 0x02	; 2
    3e92:	69 2f       	mov	r22, r25
    3e94:	40 e0       	ldi	r20, 0x00	; 0
    3e96:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
		/*Read Row Value*/
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < KPD_NUM_OF_ROWS; Local_u8RowsIndex++)
    3e9a:	1c 82       	std	Y+4, r1	; 0x04
    3e9c:	37 c0       	rjmp	.+110    	; 0x3f0c <KPD_u8GetPressKey+0xa4>
		{
			Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, u8RowsArray[Local_u8RowsIndex]);
    3e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3ea0:	88 2f       	mov	r24, r24
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	fc 01       	movw	r30, r24
    3ea6:	ec 58       	subi	r30, 0x8C	; 140
    3ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eaa:	90 81       	ld	r25, Z
    3eac:	82 e0       	ldi	r24, 0x02	; 2
    3eae:	69 2f       	mov	r22, r25
    3eb0:	0e 94 42 11 	call	0x2284	; 0x2284 <DIO_u8GetPinValue>
    3eb4:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_u8RowValue == 0)
    3eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb8:	88 23       	and	r24, r24
    3eba:	29 f5       	brne	.+74     	; 0x3f06 <KPD_u8GetPressKey+0x9e>
			{
				/*Get The Press Key*/
				Local_u8Pressedkey = Local_u8ButtonsArray[Local_u8RowsIndex][Local_u8ColsIndex];
    3ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ebe:	48 2f       	mov	r20, r24
    3ec0:	50 e0       	ldi	r21, 0x00	; 0
    3ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec4:	28 2f       	mov	r18, r24
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	ca 01       	movw	r24, r20
    3eca:	88 0f       	add	r24, r24
    3ecc:	99 1f       	adc	r25, r25
    3ece:	88 0f       	add	r24, r24
    3ed0:	99 1f       	adc	r25, r25
    3ed2:	82 0f       	add	r24, r18
    3ed4:	93 1f       	adc	r25, r19
    3ed6:	fc 01       	movw	r30, r24
    3ed8:	e4 58       	subi	r30, 0x84	; 132
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	80 81       	ld	r24, Z
    3ede:	89 83       	std	Y+1, r24	; 0x01
    3ee0:	0c c0       	rjmp	.+24     	; 0x3efa <KPD_u8GetPressKey+0x92>
				/*Polling Until The Kay Is Released*/
				while (Local_u8RowValue == 0)
				{
					Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, u8RowsArray[Local_u8RowsIndex]);
    3ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ee4:	88 2f       	mov	r24, r24
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	fc 01       	movw	r30, r24
    3eea:	ec 58       	subi	r30, 0x8C	; 140
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	90 81       	ld	r25, Z
    3ef0:	82 e0       	ldi	r24, 0x02	; 2
    3ef2:	69 2f       	mov	r22, r25
    3ef4:	0e 94 42 11 	call	0x2284	; 0x2284 <DIO_u8GetPinValue>
    3ef8:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_u8RowValue == 0)
			{
				/*Get The Press Key*/
				Local_u8Pressedkey = Local_u8ButtonsArray[Local_u8RowsIndex][Local_u8ColsIndex];
				/*Polling Until The Kay Is Released*/
				while (Local_u8RowValue == 0)
    3efa:	8a 81       	ldd	r24, Y+2	; 0x02
    3efc:	88 23       	and	r24, r24
    3efe:	89 f3       	breq	.-30     	; 0x3ee2 <KPD_u8GetPressKey+0x7a>
				{
					Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, u8RowsArray[Local_u8RowsIndex]);
				}

				/*Return The Key*/
				return (Local_u8Pressedkey);
    3f00:	89 81       	ldd	r24, Y+1	; 0x01
    3f02:	8d 83       	std	Y+5, r24	; 0x05
    3f04:	1b c0       	rjmp	.+54     	; 0x3f3c <KPD_u8GetPressKey+0xd4>
	for(Local_u8ColsIndex = 0; Local_u8ColsIndex < KPD_NUM_OF_COLS; Local_u8ColsIndex++)
	{
		/*Activate The Current Column*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColsIndex], LOW);
		/*Read Row Value*/
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < KPD_NUM_OF_ROWS; Local_u8RowsIndex++)
    3f06:	8c 81       	ldd	r24, Y+4	; 0x04
    3f08:	8f 5f       	subi	r24, 0xFF	; 255
    3f0a:	8c 83       	std	Y+4, r24	; 0x04
    3f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f0e:	84 30       	cpi	r24, 0x04	; 4
    3f10:	30 f2       	brcs	.-116    	; 0x3e9e <KPD_u8GetPressKey+0x36>
			}


		}
		/*DeActivate The Current Column*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColsIndex], HIGH);
    3f12:	8b 81       	ldd	r24, Y+3	; 0x03
    3f14:	88 2f       	mov	r24, r24
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	fc 01       	movw	r30, r24
    3f1a:	e8 58       	subi	r30, 0x88	; 136
    3f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1e:	90 81       	ld	r25, Z
    3f20:	82 e0       	ldi	r24, 0x02	; 2
    3f22:	69 2f       	mov	r22, r25
    3f24:	41 e0       	ldi	r20, 0x01	; 1
    3f26:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
	u8 Local_u8RowsIndex;
	u8 Local_u8ColsIndex;
	u8 Local_u8RowValue;
	u8 Local_u8Pressedkey = KPD_DEFAULT_VAL;
	voidDeactivateColumns();
	for(Local_u8ColsIndex = 0; Local_u8ColsIndex < KPD_NUM_OF_COLS; Local_u8ColsIndex++)
    3f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2c:	8f 5f       	subi	r24, 0xFF	; 255
    3f2e:	8b 83       	std	Y+3, r24	; 0x03
    3f30:	8b 81       	ldd	r24, Y+3	; 0x03
    3f32:	84 30       	cpi	r24, 0x04	; 4
    3f34:	08 f4       	brcc	.+2      	; 0x3f38 <KPD_u8GetPressKey+0xd0>
    3f36:	a5 cf       	rjmp	.-182    	; 0x3e82 <KPD_u8GetPressKey+0x1a>
		}
		/*DeActivate The Current Column*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColsIndex], HIGH);
	}
	/*Return The Default Pressed Key*/
	return (Local_u8Pressedkey);
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	8d 83       	std	Y+5, r24	; 0x05
    3f3c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3f3e:	0f 90       	pop	r0
    3f40:	0f 90       	pop	r0
    3f42:	0f 90       	pop	r0
    3f44:	0f 90       	pop	r0
    3f46:	0f 90       	pop	r0
    3f48:	cf 91       	pop	r28
    3f4a:	df 91       	pop	r29
    3f4c:	08 95       	ret

00003f4e <voidDeactivateColumns>:

static void voidDeactivateColumns(void)
{
    3f4e:	df 93       	push	r29
    3f50:	cf 93       	push	r28
    3f52:	0f 92       	push	r0
    3f54:	cd b7       	in	r28, 0x3d	; 61
    3f56:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ColumnsCounter = 0;
    3f58:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter < KPD_NUM_OF_COLS; Local_u8ColumnsCounter++)
    3f5a:	19 82       	std	Y+1, r1	; 0x01
    3f5c:	0f c0       	rjmp	.+30     	; 0x3f7c <voidDeactivateColumns+0x2e>
	{
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColumnsCounter], HIGH);
    3f5e:	89 81       	ldd	r24, Y+1	; 0x01
    3f60:	88 2f       	mov	r24, r24
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	fc 01       	movw	r30, r24
    3f66:	e8 58       	subi	r30, 0x88	; 136
    3f68:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6a:	90 81       	ld	r25, Z
    3f6c:	82 e0       	ldi	r24, 0x02	; 2
    3f6e:	69 2f       	mov	r22, r25
    3f70:	41 e0       	ldi	r20, 0x01	; 1
    3f72:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
}

static void voidDeactivateColumns(void)
{
	u8 Local_u8ColumnsCounter = 0;
	for(Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter < KPD_NUM_OF_COLS; Local_u8ColumnsCounter++)
    3f76:	89 81       	ldd	r24, Y+1	; 0x01
    3f78:	8f 5f       	subi	r24, 0xFF	; 255
    3f7a:	89 83       	std	Y+1, r24	; 0x01
    3f7c:	89 81       	ldd	r24, Y+1	; 0x01
    3f7e:	84 30       	cpi	r24, 0x04	; 4
    3f80:	70 f3       	brcs	.-36     	; 0x3f5e <voidDeactivateColumns+0x10>
	{
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColumnsCounter], HIGH);
	}
}
    3f82:	0f 90       	pop	r0
    3f84:	cf 91       	pop	r28
    3f86:	df 91       	pop	r29
    3f88:	08 95       	ret

00003f8a <main>:
#include "../HAL/LCD/LCD_interface.h"
#include "../MCAL/TIMER/TIMER_interface.h"
#include "../MCAL/GIE/GIE_interface.h"

void main (void)
{
    3f8a:	df 93       	push	r29
    3f8c:	cf 93       	push	r28
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    3f92:	28 97       	sbiw	r28, 0x08	; 8
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	cd bf       	out	0x3d, r28	; 61
	UART_voidInit();
    3f9e:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_voidInit>
	LCD_voidInitPins();
    3fa2:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <LCD_voidInitPins>
	LCD_voidInit();
    3fa6:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <LCD_voidInit>
	TIMER_voidTimer0Init();
    3faa:	0e 94 2b 07 	call	0xe56	; 0xe56 <TIMER_voidTimer0Init>
	TIMER_voidTimer1Init();
    3fae:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <TIMER_voidTimer1Init>
	TIMER_voidTimer1SetTopValue(20000);
    3fb2:	80 e2       	ldi	r24, 0x20	; 32
    3fb4:	9e e4       	ldi	r25, 0x4E	; 78
    3fb6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <TIMER_voidTimer1SetTopValue>
	DIO_voidSetPinDirection(PORTD, PIN0, INPUT);
    3fba:	83 e0       	ldi	r24, 0x03	; 3
    3fbc:	60 e0       	ldi	r22, 0x00	; 0
    3fbe:	40 e0       	ldi	r20, 0x00	; 0
    3fc0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD, PIN1, OUTPUT);
    3fc4:	83 e0       	ldi	r24, 0x03	; 3
    3fc6:	61 e0       	ldi	r22, 0x01	; 1
    3fc8:	41 e0       	ldi	r20, 0x01	; 1
    3fca:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB, PIN3, OUTPUT);
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	63 e0       	ldi	r22, 0x03	; 3
    3fd2:	41 e0       	ldi	r20, 0x01	; 1
    3fd4:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB, PIN4, OUTPUT);
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	64 e0       	ldi	r22, 0x04	; 4
    3fdc:	41 e0       	ldi	r20, 0x01	; 1
    3fde:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB, PIN5, OUTPUT);
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	65 e0       	ldi	r22, 0x05	; 5
    3fe6:	41 e0       	ldi	r20, 0x01	; 1
    3fe8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PORTC, PIN0, OUTPUT);
    3fec:	82 e0       	ldi	r24, 0x02	; 2
    3fee:	60 e0       	ldi	r22, 0x00	; 0
    3ff0:	41 e0       	ldi	r20, 0x01	; 1
    3ff2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC, PIN1, OUTPUT);
    3ff6:	82 e0       	ldi	r24, 0x02	; 2
    3ff8:	61 e0       	ldi	r22, 0x01	; 1
    3ffa:	41 e0       	ldi	r20, 0x01	; 1
    3ffc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC, PIN2, OUTPUT);
    4000:	82 e0       	ldi	r24, 0x02	; 2
    4002:	62 e0       	ldi	r22, 0x02	; 2
    4004:	41 e0       	ldi	r20, 0x01	; 1
    4006:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC, PIN3, OUTPUT);
    400a:	82 e0       	ldi	r24, 0x02	; 2
    400c:	63 e0       	ldi	r22, 0x03	; 3
    400e:	41 e0       	ldi	r20, 0x01	; 1
    4010:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC, PIN4, OUTPUT);
    4014:	82 e0       	ldi	r24, 0x02	; 2
    4016:	64 e0       	ldi	r22, 0x04	; 4
    4018:	41 e0       	ldi	r20, 0x01	; 1
    401a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC, PIN5, OUTPUT);
    401e:	82 e0       	ldi	r24, 0x02	; 2
    4020:	65 e0       	ldi	r22, 0x05	; 5
    4022:	41 e0       	ldi	r20, 0x01	; 1
    4024:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC, PIN6, OUTPUT);
    4028:	82 e0       	ldi	r24, 0x02	; 2
    402a:	66 e0       	ldi	r22, 0x06	; 6
    402c:	41 e0       	ldi	r20, 0x01	; 1
    402e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC, PIN7, OUTPUT);
    4032:	82 e0       	ldi	r24, 0x02	; 2
    4034:	67 e0       	ldi	r22, 0x07	; 7
    4036:	41 e0       	ldi	r20, 0x01	; 1
    4038:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>
	DIO_voidSetPortSpecificValue(PORTC, 0b00000000);
    403c:	82 e0       	ldi	r24, 0x02	; 2
    403e:	60 e0       	ldi	r22, 0x00	; 0
    4040:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_voidSetPortSpecificValue>

	DIO_voidSetPinValue(PORTB, PIN4, HIGH);
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	64 e0       	ldi	r22, 0x04	; 4
    4048:	41 e0       	ldi	r20, 0x01	; 1
    404a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB, PIN5, LOW);
    404e:	81 e0       	ldi	r24, 0x01	; 1
    4050:	65 e0       	ldi	r22, 0x05	; 5
    4052:	40 e0       	ldi	r20, 0x00	; 0
    4054:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(PORTD, PIN5, OUTPUT);
    4058:	83 e0       	ldi	r24, 0x03	; 3
    405a:	65 e0       	ldi	r22, 0x05	; 5
    405c:	41 e0       	ldi	r20, 0x01	; 1
    405e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinDirection>

	u8 Signal = 0;
    4062:	1c 82       	std	Y+4, r1	; 0x04
	u8 Speed = 0;
    4064:	1d 82       	std	Y+5, r1	; 0x05
	u8 TempValue = 0;
    4066:	1e 82       	std	Y+6, r1	; 0x06
	u8 Light = 0;
    4068:	1b 82       	std	Y+3, r1	; 0x03
	u8 LightValue = 0;
    406a:	1f 82       	std	Y+7, r1	; 0x07
	u8 PirState = 0;
    406c:	18 86       	std	Y+8, r1	; 0x08
	while(1)
	{

		u8 Local_u8StoreTemp = 0;
    406e:	1a 82       	std	Y+2, r1	; 0x02
		u8 Local_u8StoreLight = 0;
    4070:	19 82       	std	Y+1, r1	; 0x01
		UART_voidReceiveDataSynchronous(&Signal);
    4072:	ce 01       	movw	r24, r28
    4074:	04 96       	adiw	r24, 0x04	; 4
    4076:	0e 94 2d 06 	call	0xc5a	; 0xc5a <UART_voidReceiveDataSynchronous>

		if(Signal == 'T')
    407a:	8c 81       	ldd	r24, Y+4	; 0x04
    407c:	84 35       	cpi	r24, 0x54	; 84
    407e:	81 f5       	brne	.+96     	; 0x40e0 <main+0x156>
		{
			UART_voidReceiveDataSynchronous(&TempValue);
    4080:	ce 01       	movw	r24, r28
    4082:	06 96       	adiw	r24, 0x06	; 6
    4084:	0e 94 2d 06 	call	0xc5a	; 0xc5a <UART_voidReceiveDataSynchronous>
			Local_u8StoreTemp = TempValue;
    4088:	8e 81       	ldd	r24, Y+6	; 0x06
    408a:	8a 83       	std	Y+2, r24	; 0x02
			LCD_voidSendNumber(Local_u8StoreTemp);
    408c:	8a 81       	ldd	r24, Y+2	; 0x02
    408e:	88 2f       	mov	r24, r24
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	0e 94 65 1d 	call	0x3aca	; 0x3aca <LCD_voidSendNumber>
			UART_voidReceiveDataSynchronous(&Speed);
    4096:	ce 01       	movw	r24, r28
    4098:	05 96       	adiw	r24, 0x05	; 5
    409a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <UART_voidReceiveDataSynchronous>
			if(Local_u8StoreTemp < 25)
    409e:	8a 81       	ldd	r24, Y+2	; 0x02
    40a0:	89 31       	cpi	r24, 0x19	; 25
    40a2:	20 f4       	brcc	.+8      	; 0x40ac <main+0x122>
			{
				TIMER_voidTimer0SetCOMatchValue(20);
    40a4:	84 e1       	ldi	r24, 0x14	; 20
    40a6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TIMER_voidTimer0SetCOMatchValue>
    40aa:	1a c0       	rjmp	.+52     	; 0x40e0 <main+0x156>
			}
			else if(Local_u8StoreTemp >= 25 &&  Local_u8StoreTemp < 30)
    40ac:	8a 81       	ldd	r24, Y+2	; 0x02
    40ae:	89 31       	cpi	r24, 0x19	; 25
    40b0:	38 f0       	brcs	.+14     	; 0x40c0 <main+0x136>
    40b2:	8a 81       	ldd	r24, Y+2	; 0x02
    40b4:	8e 31       	cpi	r24, 0x1E	; 30
    40b6:	20 f4       	brcc	.+8      	; 0x40c0 <main+0x136>
			{
				TIMER_voidTimer0SetCOMatchValue(Speed);
    40b8:	8d 81       	ldd	r24, Y+5	; 0x05
    40ba:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TIMER_voidTimer0SetCOMatchValue>
    40be:	10 c0       	rjmp	.+32     	; 0x40e0 <main+0x156>
			}
			else if(Local_u8StoreTemp >= 30 && Local_u8StoreTemp < 35)
    40c0:	8a 81       	ldd	r24, Y+2	; 0x02
    40c2:	8e 31       	cpi	r24, 0x1E	; 30
    40c4:	38 f0       	brcs	.+14     	; 0x40d4 <main+0x14a>
    40c6:	8a 81       	ldd	r24, Y+2	; 0x02
    40c8:	83 32       	cpi	r24, 0x23	; 35
    40ca:	20 f4       	brcc	.+8      	; 0x40d4 <main+0x14a>
			{
				TIMER_voidTimer0SetCOMatchValue(Speed);
    40cc:	8d 81       	ldd	r24, Y+5	; 0x05
    40ce:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TIMER_voidTimer0SetCOMatchValue>
    40d2:	06 c0       	rjmp	.+12     	; 0x40e0 <main+0x156>
			}
			else if(Local_u8StoreTemp >= 35)
    40d4:	8a 81       	ldd	r24, Y+2	; 0x02
    40d6:	83 32       	cpi	r24, 0x23	; 35
    40d8:	18 f0       	brcs	.+6      	; 0x40e0 <main+0x156>
			{
				TIMER_voidTimer0SetCOMatchValue(Speed);
    40da:	8d 81       	ldd	r24, Y+5	; 0x05
    40dc:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TIMER_voidTimer0SetCOMatchValue>
			}
		}
		if(Signal == 'L')
    40e0:	8c 81       	ldd	r24, Y+4	; 0x04
    40e2:	8c 34       	cpi	r24, 0x4C	; 76
    40e4:	09 f0       	breq	.+2      	; 0x40e8 <main+0x15e>
    40e6:	4f c0       	rjmp	.+158    	; 0x4186 <main+0x1fc>
		{
			UART_voidReceiveDataSynchronous(&LightValue);
    40e8:	ce 01       	movw	r24, r28
    40ea:	07 96       	adiw	r24, 0x07	; 7
    40ec:	0e 94 2d 06 	call	0xc5a	; 0xc5a <UART_voidReceiveDataSynchronous>
			Local_u8StoreLight = LightValue;
    40f0:	8f 81       	ldd	r24, Y+7	; 0x07
    40f2:	89 83       	std	Y+1, r24	; 0x01
			//LCD_voidGotoXY(0, 0);
			//_delay_ms(100);
			//LCD_voidClearDisplay();
			//LCD_voidSendNumber(Local_u8StoreLight);
			if(Local_u8StoreLight < 20)
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	84 31       	cpi	r24, 0x14	; 20
    40f8:	28 f4       	brcc	.+10     	; 0x4104 <main+0x17a>
			{
				DIO_voidSetPortSpecificValue(PORTC, 0b11111111);
    40fa:	82 e0       	ldi	r24, 0x02	; 2
    40fc:	6f ef       	ldi	r22, 0xFF	; 255
    40fe:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_voidSetPortSpecificValue>
    4102:	41 c0       	rjmp	.+130    	; 0x4186 <main+0x1fc>

			}
			else if(Local_u8StoreLight >= 20 && Local_u8StoreLight < 70)
    4104:	89 81       	ldd	r24, Y+1	; 0x01
    4106:	84 31       	cpi	r24, 0x14	; 20
    4108:	40 f0       	brcs	.+16     	; 0x411a <main+0x190>
    410a:	89 81       	ldd	r24, Y+1	; 0x01
    410c:	86 34       	cpi	r24, 0x46	; 70
    410e:	28 f4       	brcc	.+10     	; 0x411a <main+0x190>
			{
				DIO_voidSetPortSpecificValue(PORTC, 0b00111111);
    4110:	82 e0       	ldi	r24, 0x02	; 2
    4112:	6f e3       	ldi	r22, 0x3F	; 63
    4114:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_voidSetPortSpecificValue>
    4118:	36 c0       	rjmp	.+108    	; 0x4186 <main+0x1fc>
			}

			else if(Local_u8StoreLight >= 70 && Local_u8StoreLight < 120)
    411a:	89 81       	ldd	r24, Y+1	; 0x01
    411c:	86 34       	cpi	r24, 0x46	; 70
    411e:	40 f0       	brcs	.+16     	; 0x4130 <main+0x1a6>
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	88 37       	cpi	r24, 0x78	; 120
    4124:	28 f4       	brcc	.+10     	; 0x4130 <main+0x1a6>
			{
				DIO_voidSetPortSpecificValue(PORTC, 0b00011111);
    4126:	82 e0       	ldi	r24, 0x02	; 2
    4128:	6f e1       	ldi	r22, 0x1F	; 31
    412a:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_voidSetPortSpecificValue>
    412e:	2b c0       	rjmp	.+86     	; 0x4186 <main+0x1fc>
			}

			else if(Local_u8StoreLight >= 120 && Local_u8StoreLight < 170)
    4130:	89 81       	ldd	r24, Y+1	; 0x01
    4132:	88 37       	cpi	r24, 0x78	; 120
    4134:	40 f0       	brcs	.+16     	; 0x4146 <main+0x1bc>
    4136:	89 81       	ldd	r24, Y+1	; 0x01
    4138:	8a 3a       	cpi	r24, 0xAA	; 170
    413a:	28 f4       	brcc	.+10     	; 0x4146 <main+0x1bc>
			{
				DIO_voidSetPortSpecificValue(PORTC, 0b00001111);
    413c:	82 e0       	ldi	r24, 0x02	; 2
    413e:	6f e0       	ldi	r22, 0x0F	; 15
    4140:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_voidSetPortSpecificValue>
    4144:	20 c0       	rjmp	.+64     	; 0x4186 <main+0x1fc>

			}
			else if(Local_u8StoreLight >= 170 && Local_u8StoreLight < 210)
    4146:	89 81       	ldd	r24, Y+1	; 0x01
    4148:	8a 3a       	cpi	r24, 0xAA	; 170
    414a:	40 f0       	brcs	.+16     	; 0x415c <main+0x1d2>
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	82 3d       	cpi	r24, 0xD2	; 210
    4150:	28 f4       	brcc	.+10     	; 0x415c <main+0x1d2>
			{
				DIO_voidSetPortSpecificValue(PORTC, 0b00000111);
    4152:	82 e0       	ldi	r24, 0x02	; 2
    4154:	67 e0       	ldi	r22, 0x07	; 7
    4156:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_voidSetPortSpecificValue>
    415a:	15 c0       	rjmp	.+42     	; 0x4186 <main+0x1fc>
			}
			else if(Local_u8StoreLight >= 210 && Local_u8StoreLight < 230)
    415c:	89 81       	ldd	r24, Y+1	; 0x01
    415e:	82 3d       	cpi	r24, 0xD2	; 210
    4160:	40 f0       	brcs	.+16     	; 0x4172 <main+0x1e8>
    4162:	89 81       	ldd	r24, Y+1	; 0x01
    4164:	86 3e       	cpi	r24, 0xE6	; 230
    4166:	28 f4       	brcc	.+10     	; 0x4172 <main+0x1e8>
			{
				DIO_voidSetPortSpecificValue(PORTC, 0b00000011);
    4168:	82 e0       	ldi	r24, 0x02	; 2
    416a:	63 e0       	ldi	r22, 0x03	; 3
    416c:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_voidSetPortSpecificValue>
    4170:	0a c0       	rjmp	.+20     	; 0x4186 <main+0x1fc>
			}

			else if(Local_u8StoreLight >= 230 && Local_u8StoreLight < 255)
    4172:	89 81       	ldd	r24, Y+1	; 0x01
    4174:	86 3e       	cpi	r24, 0xE6	; 230
    4176:	38 f0       	brcs	.+14     	; 0x4186 <main+0x1fc>
    4178:	89 81       	ldd	r24, Y+1	; 0x01
    417a:	8f 3f       	cpi	r24, 0xFF	; 255
    417c:	21 f0       	breq	.+8      	; 0x4186 <main+0x1fc>
			{
				DIO_voidSetPortSpecificValue(PORTC, 0b00000000);
    417e:	82 e0       	ldi	r24, 0x02	; 2
    4180:	60 e0       	ldi	r22, 0x00	; 0
    4182:	0e 94 08 12 	call	0x2410	; 0x2410 <DIO_voidSetPortSpecificValue>
			}

		}
		if(Signal == 'F')
    4186:	8c 81       	ldd	r24, Y+4	; 0x04
    4188:	86 34       	cpi	r24, 0x46	; 70
    418a:	c1 f4       	brne	.+48     	; 0x41bc <main+0x232>
		{
			UART_voidReceiveDataSynchronous(&Speed);
    418c:	ce 01       	movw	r24, r28
    418e:	05 96       	adiw	r24, 0x05	; 5
    4190:	0e 94 2d 06 	call	0xc5a	; 0xc5a <UART_voidReceiveDataSynchronous>
			if(Speed == 255)
    4194:	8d 81       	ldd	r24, Y+5	; 0x05
    4196:	8f 3f       	cpi	r24, 0xFF	; 255
    4198:	21 f4       	brne	.+8      	; 0x41a2 <main+0x218>
			{
				TIMER_voidTimer0SetCOMatchValue(Speed);
    419a:	8d 81       	ldd	r24, Y+5	; 0x05
    419c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TIMER_voidTimer0SetCOMatchValue>
    41a0:	0d c0       	rjmp	.+26     	; 0x41bc <main+0x232>
			}
			else if(Speed == 150)
    41a2:	8d 81       	ldd	r24, Y+5	; 0x05
    41a4:	86 39       	cpi	r24, 0x96	; 150
    41a6:	21 f4       	brne	.+8      	; 0x41b0 <main+0x226>
			{
				TIMER_voidTimer0SetCOMatchValue(Speed);
    41a8:	8d 81       	ldd	r24, Y+5	; 0x05
    41aa:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TIMER_voidTimer0SetCOMatchValue>
    41ae:	06 c0       	rjmp	.+12     	; 0x41bc <main+0x232>
			}
			else if(Speed == 70)
    41b0:	8d 81       	ldd	r24, Y+5	; 0x05
    41b2:	86 34       	cpi	r24, 0x46	; 70
    41b4:	19 f4       	brne	.+6      	; 0x41bc <main+0x232>
			{
				TIMER_voidTimer0SetCOMatchValue(Speed);
    41b6:	8d 81       	ldd	r24, Y+5	; 0x05
    41b8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TIMER_voidTimer0SetCOMatchValue>
			}
		}
		if(Signal == 'O')
    41bc:	8c 81       	ldd	r24, Y+4	; 0x04
    41be:	8f 34       	cpi	r24, 0x4F	; 79
    41c0:	09 f0       	breq	.+2      	; 0x41c4 <main+0x23a>
    41c2:	55 cf       	rjmp	.-342    	; 0x406e <main+0xe4>
		{
			UART_voidReceiveDataSynchronous(&PirState);
    41c4:	ce 01       	movw	r24, r28
    41c6:	08 96       	adiw	r24, 0x08	; 8
    41c8:	0e 94 2d 06 	call	0xc5a	; 0xc5a <UART_voidReceiveDataSynchronous>
			if(PirState == HIGH)
    41cc:	88 85       	ldd	r24, Y+8	; 0x08
    41ce:	81 30       	cpi	r24, 0x01	; 1
    41d0:	09 f0       	breq	.+2      	; 0x41d4 <main+0x24a>
    41d2:	4d cf       	rjmp	.-358    	; 0x406e <main+0xe4>
			{
				TIMER_voidTimer1SetCompareMatchTime(1500);
    41d4:	8c ed       	ldi	r24, 0xDC	; 220
    41d6:	95 e0       	ldi	r25, 0x05	; 5
    41d8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <TIMER_voidTimer1SetCompareMatchTime>
    41dc:	48 cf       	rjmp	.-368    	; 0x406e <main+0xe4>

000041de <__udivmodhi4>:
    41de:	aa 1b       	sub	r26, r26
    41e0:	bb 1b       	sub	r27, r27
    41e2:	51 e1       	ldi	r21, 0x11	; 17
    41e4:	07 c0       	rjmp	.+14     	; 0x41f4 <__udivmodhi4_ep>

000041e6 <__udivmodhi4_loop>:
    41e6:	aa 1f       	adc	r26, r26
    41e8:	bb 1f       	adc	r27, r27
    41ea:	a6 17       	cp	r26, r22
    41ec:	b7 07       	cpc	r27, r23
    41ee:	10 f0       	brcs	.+4      	; 0x41f4 <__udivmodhi4_ep>
    41f0:	a6 1b       	sub	r26, r22
    41f2:	b7 0b       	sbc	r27, r23

000041f4 <__udivmodhi4_ep>:
    41f4:	88 1f       	adc	r24, r24
    41f6:	99 1f       	adc	r25, r25
    41f8:	5a 95       	dec	r21
    41fa:	a9 f7       	brne	.-22     	; 0x41e6 <__udivmodhi4_loop>
    41fc:	80 95       	com	r24
    41fe:	90 95       	com	r25
    4200:	bc 01       	movw	r22, r24
    4202:	cd 01       	movw	r24, r26
    4204:	08 95       	ret

00004206 <__prologue_saves__>:
    4206:	2f 92       	push	r2
    4208:	3f 92       	push	r3
    420a:	4f 92       	push	r4
    420c:	5f 92       	push	r5
    420e:	6f 92       	push	r6
    4210:	7f 92       	push	r7
    4212:	8f 92       	push	r8
    4214:	9f 92       	push	r9
    4216:	af 92       	push	r10
    4218:	bf 92       	push	r11
    421a:	cf 92       	push	r12
    421c:	df 92       	push	r13
    421e:	ef 92       	push	r14
    4220:	ff 92       	push	r15
    4222:	0f 93       	push	r16
    4224:	1f 93       	push	r17
    4226:	cf 93       	push	r28
    4228:	df 93       	push	r29
    422a:	cd b7       	in	r28, 0x3d	; 61
    422c:	de b7       	in	r29, 0x3e	; 62
    422e:	ca 1b       	sub	r28, r26
    4230:	db 0b       	sbc	r29, r27
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	f8 94       	cli
    4236:	de bf       	out	0x3e, r29	; 62
    4238:	0f be       	out	0x3f, r0	; 63
    423a:	cd bf       	out	0x3d, r28	; 61
    423c:	09 94       	ijmp

0000423e <__epilogue_restores__>:
    423e:	2a 88       	ldd	r2, Y+18	; 0x12
    4240:	39 88       	ldd	r3, Y+17	; 0x11
    4242:	48 88       	ldd	r4, Y+16	; 0x10
    4244:	5f 84       	ldd	r5, Y+15	; 0x0f
    4246:	6e 84       	ldd	r6, Y+14	; 0x0e
    4248:	7d 84       	ldd	r7, Y+13	; 0x0d
    424a:	8c 84       	ldd	r8, Y+12	; 0x0c
    424c:	9b 84       	ldd	r9, Y+11	; 0x0b
    424e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4250:	b9 84       	ldd	r11, Y+9	; 0x09
    4252:	c8 84       	ldd	r12, Y+8	; 0x08
    4254:	df 80       	ldd	r13, Y+7	; 0x07
    4256:	ee 80       	ldd	r14, Y+6	; 0x06
    4258:	fd 80       	ldd	r15, Y+5	; 0x05
    425a:	0c 81       	ldd	r16, Y+4	; 0x04
    425c:	1b 81       	ldd	r17, Y+3	; 0x03
    425e:	aa 81       	ldd	r26, Y+2	; 0x02
    4260:	b9 81       	ldd	r27, Y+1	; 0x01
    4262:	ce 0f       	add	r28, r30
    4264:	d1 1d       	adc	r29, r1
    4266:	0f b6       	in	r0, 0x3f	; 63
    4268:	f8 94       	cli
    426a:	de bf       	out	0x3e, r29	; 62
    426c:	0f be       	out	0x3f, r0	; 63
    426e:	cd bf       	out	0x3d, r28	; 61
    4270:	ed 01       	movw	r28, r26
    4272:	08 95       	ret

00004274 <_exit>:
    4274:	f8 94       	cli

00004276 <__stop_program>:
    4276:	ff cf       	rjmp	.-2      	; 0x4276 <__stop_program>
