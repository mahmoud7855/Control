
Transmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005bbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000170  00800060  00005bbe  00005c52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  008001d0  008001d0  00005dc2  2**0
                  ALLOC
  3 .stab         00006480  00000000  00000000  00005dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020cb  00000000  00000000  0000c244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000e30f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000e44f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000e5bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000110f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00012000  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0001228d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012a5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	fb e5       	ldi	r31, 0x5B	; 91
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <main>
      8a:	0c 94 dd 2d 	jmp	0x5bba	; 0x5bba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 2d 	jmp	0x5b4c	; 0x5b4c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e9       	ldi	r26, 0x97	; 151
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 2d 	jmp	0x5b84	; 0x5b84 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 2d 	jmp	0x5b9c	; 0x5b9c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 2d 	jmp	0x5b9c	; 0x5b9c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 2d 	jmp	0x5b4c	; 0x5b4c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e9       	ldi	r24, 0x97	; 151
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 2d 	jmp	0x5b84	; 0x5b84 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ce 2d 	jmp	0x5b9c	; 0x5b9c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ce 2d 	jmp	0x5b9c	; 0x5b9c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ce 2d 	jmp	0x5b9c	; 0x5b9c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b6 2d 	jmp	0x5b6c	; 0x5b6c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d2 2d 	jmp	0x5ba4	; 0x5ba4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_voidInit>:
#include "UART_config.h"
#include "UART_interface.h"
#include "UART_private.h"

void UART_voidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8UCSRCTemp = 0;
     b50:	19 82       	std	Y+1, r1	; 0x01
    #if(TX_CIRCUIT == ENABLE)
        SET_BIT(UCSRB, UCSRB_TXEN);
     b52:	aa e2       	ldi	r26, 0x2A	; 42
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ea e2       	ldi	r30, 0x2A	; 42
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	88 60       	ori	r24, 0x08	; 8
     b5e:	8c 93       	st	X, r24
    #elif(TX_CIRCUIT == DISABLE)
        CLR_BIT(UCSRB, UCSRB_TXEN);
    #endif

    #if(RX_CIRCUIT == ENABLE)
        SET_BIT(UCSRB, UCSRB_RXEN);
     b60:	aa e2       	ldi	r26, 0x2A	; 42
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ea e2       	ldi	r30, 0x2A	; 42
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 61       	ori	r24, 0x10	; 16
     b6c:	8c 93       	st	X, r24
        CLR_BIT(Local_u8UCSRCTemp, UCSRA_UCSZ0);
        SET_BIT(Local_u8UCSRCTemp, UCSRA_UCSZ1);
        CLR_BIT(UCSRB, UCSRB_UCSZ2);

    #elif(UART_Character_SIZE == _8_BIT)
        SET_BIT(UBRRH, UBRRH_URSEL);
     b6e:	a0 e4       	ldi	r26, 0x40	; 64
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e0 e4       	ldi	r30, 0x40	; 64
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	80 68       	ori	r24, 0x80	; 128
     b7a:	8c 93       	st	X, r24
        SET_BIT(Local_u8UCSRCTemp, UCSRC_UCSZ0);
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	82 60       	ori	r24, 0x02	; 2
     b80:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp, UCSRC_UCSZ1);
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	84 60       	ori	r24, 0x04	; 4
     b86:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(UCSRB, UCSRB_UCSZ2);
     b88:	aa e2       	ldi	r26, 0x2A	; 42
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ea e2       	ldi	r30, 0x2A	; 42
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	8b 7f       	andi	r24, 0xFB	; 251
     b94:	8c 93       	st	X, r24
        SET_BIT(UCSRB, UCSRB_UCSZ2);
    #endif

    /*Parity Mode Select*/
    #if(PARITY_MODE == DISABLE)
        SET_BIT(Local_u8UCSRCTemp, UCSRC_URSEL);
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	80 68       	ori	r24, 0x80	; 128
     b9a:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(Local_u8UCSRCTemp, UCSRC_UPM0);
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	8f 7e       	andi	r24, 0xEF	; 239
     ba0:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(Local_u8UCSRCTemp, UCSRC_UPM1);
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	8f 7d       	andi	r24, 0xDF	; 223
     ba6:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp, UCSRC_UPM1);
    #endif

    /*Stop Bit Select*/
    #if(STOP_BIT_SELECT == _1_BIT)
        SET_BIT(Local_u8UCSRCTemp, UCSRC_URSEL);
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	80 68       	ori	r24, 0x80	; 128
     bac:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(Local_u8UCSRCTemp, UCSRC_USBS);
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	87 7f       	andi	r24, 0xF7	; 247
     bb2:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp, UCSRC_URSEL);
        SET_BIT(Local_u8UCSRCTemp, UCSRC_USBS);
    #endif
    /*USART Mode Select*/
    #if(USART_MODE_SELECT == ASYNCHRONOUS)
        SET_BIT(Local_u8UCSRCTemp, UCSRC_URSEL);
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(Local_u8UCSRCTemp, UCSRC_UMSEL);
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	8f 7b       	andi	r24, 0xBF	; 191
     bbe:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp, UCSRC_UMSEL);
    #endif

    /*Boud Rate Select*/
    #if(BOUD_RATE == BOUD_9600)
        CLR_BIT(UBRRH, UBRRH_URSEL);
     bc0:	a0 e4       	ldi	r26, 0x40	; 64
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e0 e4       	ldi	r30, 0x40	; 64
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	8c 93       	st	X, r24
        UBRRL = 51;
     bce:	e9 e2       	ldi	r30, 0x29	; 41
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	83 e3       	ldi	r24, 0x33	; 51
     bd4:	80 83       	st	Z, r24
        UBRRH = 0;
     bd6:	e0 e4       	ldi	r30, 0x40	; 64
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	10 82       	st	Z, r1

    /*Transmission Speed*/
    #if(TRANSMISSION_SPEED == DOUBLE_SPEED)
        SET_BIT(UCSRA, UCSRA_U2X);
    #elif(TRANSMISSION_SPEED == NO_DOUBLE_SPEED)
        CLR_BIT(UCSRA, UCSRA_U2X);
     bdc:	ab e2       	ldi	r26, 0x2B	; 43
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	eb e2       	ldi	r30, 0x2B	; 43
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8d 7f       	andi	r24, 0xFD	; 253
     be8:	8c 93       	st	X, r24
    #endif
    UCSRC = Local_u8UCSRCTemp;
     bea:	e0 e4       	ldi	r30, 0x40	; 64
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	80 83       	st	Z, r24
}
     bf2:	0f 90       	pop	r0
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <UART_TransmitData>:

u8 TransmitedData = 0;
void UART_TransmitData(u16 Copy_u8Data)
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <UART_TransmitData+0x6>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	9a 83       	std	Y+2, r25	; 0x02
     c06:	89 83       	std	Y+1, r24	; 0x01
    while(GET_BIT(UCSRA, UCSRA_UDRE) == 0);
     c08:	eb e2       	ldi	r30, 0x2B	; 43
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	82 95       	swap	r24
     c10:	86 95       	lsr	r24
     c12:	87 70       	andi	r24, 0x07	; 7
     c14:	88 2f       	mov	r24, r24
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	81 70       	andi	r24, 0x01	; 1
     c1a:	90 70       	andi	r25, 0x00	; 0
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	a1 f3       	breq	.-24     	; 0xc08 <UART_TransmitData+0xe>
    UDR = Copy_u8Data;
     c20:	ec e2       	ldi	r30, 0x2C	; 44
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	80 83       	st	Z, r24
    while (GET_BIT(UCSRA, UCSRA_TXC) == 0);
     c28:	eb e2       	ldi	r30, 0x2B	; 43
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	82 95       	swap	r24
     c30:	86 95       	lsr	r24
     c32:	86 95       	lsr	r24
     c34:	83 70       	andi	r24, 0x03	; 3
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	81 70       	andi	r24, 0x01	; 1
     c3c:	90 70       	andi	r25, 0x00	; 0
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	99 f3       	breq	.-26     	; 0xc28 <UART_TransmitData+0x2e>
    SET_BIT(UCSRA, UCSRA_TXC);
     c42:	ab e2       	ldi	r26, 0x2B	; 43
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	eb e2       	ldi	r30, 0x2B	; 43
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	80 64       	ori	r24, 0x40	; 64
     c4e:	8c 93       	st	X, r24
}
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <UART_voidReceiveDataSynchronous>:

void UART_voidReceiveDataSynchronous(u8 * Ref_pu8ReceivedData)
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <UART_voidReceiveDataSynchronous+0x6>
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
    while (GET_BIT(UCSRA, UCSRA_RXC) == 0);
     c68:	eb e2       	ldi	r30, 0x2B	; 43
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	88 23       	and	r24, r24
     c70:	dc f7       	brge	.-10     	; 0xc68 <UART_voidReceiveDataSynchronous+0xe>
    *Ref_pu8ReceivedData = UDR;
     c72:	ec e2       	ldi	r30, 0x2C	; 44
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	e9 81       	ldd	r30, Y+1	; 0x01
     c7a:	fa 81       	ldd	r31, Y+2	; 0x02
     c7c:	80 83       	st	Z, r24
    
}
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <UART_TransmitNumber>:

void UART_TransmitNumber(u32 Copy_u32Number)
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	2d 97       	sbiw	r28, 0x0d	; 13
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	9d 87       	std	Y+13, r25	; 0x0d
     c9e:	8c 87       	std	Y+12, r24	; 0x0c
    u8 Local_u8SpllitedNumber[10];
    s8 Local_s8LoopCounter = 0;
     ca0:	19 82       	std	Y+1, r1	; 0x01
     ca2:	1f c0       	rjmp	.+62     	; 0xce2 <UART_TransmitNumber+0x5a>

    while (Copy_u32Number != 0)
    {
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	e8 2f       	mov	r30, r24
     ca8:	ff 27       	eor	r31, r31
     caa:	e7 fd       	sbrc	r30, 7
     cac:	f0 95       	com	r31
     cae:	8c 85       	ldd	r24, Y+12	; 0x0c
     cb0:	9d 85       	ldd	r25, Y+13	; 0x0d
     cb2:	2a e0       	ldi	r18, 0x0A	; 10
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	b9 01       	movw	r22, r18
     cb8:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__udivmodhi4>
     cbc:	28 2f       	mov	r18, r24
     cbe:	ce 01       	movw	r24, r28
     cc0:	02 96       	adiw	r24, 0x02	; 2
     cc2:	e8 0f       	add	r30, r24
     cc4:	f9 1f       	adc	r31, r25
     cc6:	20 83       	st	Z, r18
        Copy_u32Number /= 10;
     cc8:	8c 85       	ldd	r24, Y+12	; 0x0c
     cca:	9d 85       	ldd	r25, Y+13	; 0x0d
     ccc:	2a e0       	ldi	r18, 0x0A	; 10
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	b9 01       	movw	r22, r18
     cd2:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__udivmodhi4>
     cd6:	cb 01       	movw	r24, r22
     cd8:	9d 87       	std	Y+13, r25	; 0x0d
     cda:	8c 87       	std	Y+12, r24	; 0x0c
        Local_s8LoopCounter++;
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	8f 5f       	subi	r24, 0xFF	; 255
     ce0:	89 83       	std	Y+1, r24	; 0x01
void UART_TransmitNumber(u32 Copy_u32Number)
{
    u8 Local_u8SpllitedNumber[10];
    s8 Local_s8LoopCounter = 0;

    while (Copy_u32Number != 0)
     ce2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ce4:	9d 85       	ldd	r25, Y+13	; 0x0d
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	e9 f6       	brne	.-70     	; 0xca4 <UART_TransmitNumber+0x1c>
    {
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	81 50       	subi	r24, 0x01	; 1
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	13 c0       	rjmp	.+38     	; 0xd18 <UART_TransmitNumber+0x90>
    while (Local_s8LoopCounter >= 0)
    {
        UART_TransmitData(Local_u8SpllitedNumber[Local_s8LoopCounter] + '0');
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	28 2f       	mov	r18, r24
     cf6:	33 27       	eor	r19, r19
     cf8:	27 fd       	sbrc	r18, 7
     cfa:	30 95       	com	r19
     cfc:	ce 01       	movw	r24, r28
     cfe:	02 96       	adiw	r24, 0x02	; 2
     d00:	fc 01       	movw	r30, r24
     d02:	e2 0f       	add	r30, r18
     d04:	f3 1f       	adc	r31, r19
     d06:	80 81       	ld	r24, Z
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	c0 96       	adiw	r24, 0x30	; 48
     d0e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
        Local_s8LoopCounter--;
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	81 50       	subi	r24, 0x01	; 1
     d16:	89 83       	std	Y+1, r24	; 0x01
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
    while (Local_s8LoopCounter >= 0)
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	88 23       	and	r24, r24
     d1c:	54 f7       	brge	.-44     	; 0xcf2 <UART_TransmitNumber+0x6a>
    {
        UART_TransmitData(Local_u8SpllitedNumber[Local_s8LoopCounter] + '0');
        Local_s8LoopCounter--;
    }  
}
     d1e:	2d 96       	adiw	r28, 0x0d	; 13
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <UART_TransmitSrting>:

void UART_TransmitSrting(const u8 * Ref_pu8String)
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <UART_TransmitSrting+0x6>
     d36:	0f 92       	push	r0
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	9b 83       	std	Y+3, r25	; 0x03
     d3e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopCounter = 0;
     d40:	19 82       	std	Y+1, r1	; 0x01
     d42:	10 c0       	rjmp	.+32     	; 0xd64 <UART_TransmitSrting+0x34>
	while(Ref_pu8String[Local_u8LoopCounter] != NULL_TERMINATOR)
    {
		UART_TransmitData(Ref_pu8String[Local_u8LoopCounter]);
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	9b 81       	ldd	r25, Y+3	; 0x03
     d4e:	fc 01       	movw	r30, r24
     d50:	e2 0f       	add	r30, r18
     d52:	f3 1f       	adc	r31, r19
     d54:	80 81       	ld	r24, Z
     d56:	88 2f       	mov	r24, r24
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
		Local_u8LoopCounter++;
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	89 83       	std	Y+1, r24	; 0x01
}

void UART_TransmitSrting(const u8 * Ref_pu8String)
{
	u8 Local_u8LoopCounter = 0;
	while(Ref_pu8String[Local_u8LoopCounter] != NULL_TERMINATOR)
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	9b 81       	ldd	r25, Y+3	; 0x03
     d6e:	fc 01       	movw	r30, r24
     d70:	e2 0f       	add	r30, r18
     d72:	f3 1f       	adc	r31, r19
     d74:	80 81       	ld	r24, Z
     d76:	88 23       	and	r24, r24
     d78:	29 f7       	brne	.-54     	; 0xd44 <UART_TransmitSrting+0x14>
    {
		UART_TransmitData(Ref_pu8String[Local_u8LoopCounter]);
		Local_u8LoopCounter++;
	}
}
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <TIMER_voidTimer0Init>:


         

void TIMER_voidTimer0Init(void)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
            TCCR0 |= TIMER0_SET_ON_COMP_CLEAR_ON_TOP_MSK;
        #else
            #error "Error!!!";
        #endif
    #elif (TIMER0_MODE == TIMER_PWM_PHASE_CORRECR_MODE)
        TCCR0 &= TIMER0_SELECT_MODE_MASK_CLR;
     d8e:	a3 e5       	ldi	r26, 0x53	; 83
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e3 e5       	ldi	r30, 0x53	; 83
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	87 7b       	andi	r24, 0xB7	; 183
     d9a:	8c 93       	st	X, r24
        TCCR0 |= TIMER0_PWM_PHASE_CORRECR_MODE_MSK;
     d9c:	a3 e5       	ldi	r26, 0x53	; 83
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e3 e5       	ldi	r30, 0x53	; 83
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	80 64       	ori	r24, 0x40	; 64
     da8:	8c 93       	st	X, r24
            TCCR0 |= TIMER0_NORMAL_PORT_MSK;
        #elif (TIMER0_PWM_SUB_MODE == TIMER_SET_ON_UP_COUNT_CLR_ON_DOWN_COUNT)
            TCCR0 &= TIMER0_SUB_MODE_MSK_CLR;
            TCCR0 |= TIMER0_SET_ON_UP_COUNT_CLR_ON_DOWN_COUNT_MSK;
        #elif (TIMER0_PWM_SUB_MODE == TIMER_CLR_ON_UP_COUNT_SET_ON_DOWN_COUNT)
            TCCR0 &= TIMER0_SUB_MODE_MSK_CLR;
     daa:	a3 e5       	ldi	r26, 0x53	; 83
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e3 e5       	ldi	r30, 0x53	; 83
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	8f 7c       	andi	r24, 0xCF	; 207
     db6:	8c 93       	st	X, r24
            TCCR0 |= TIMER0_CLR_ON_UP_COUNT_SET_ON_DOWN_COUNT_MSK;
     db8:	a3 e5       	ldi	r26, 0x53	; 83
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e3 e5       	ldi	r30, 0x53	; 83
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	80 63       	ori	r24, 0x30	; 48
     dc4:	8c 93       	st	X, r24


    #endif
        

    TCCR0 &= TIMER_PRESCALER_MASK_CLR;
     dc6:	a3 e5       	ldi	r26, 0x53	; 83
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e3 e5       	ldi	r30, 0x53	; 83
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	88 7f       	andi	r24, 0xF8	; 248
     dd2:	8c 93       	st	X, r24
    TCCR0 |= TIMER_COUNTER_PRESCALER_SELECT;
     dd4:	a3 e5       	ldi	r26, 0x53	; 83
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e3 e5       	ldi	r30, 0x53	; 83
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	82 60       	ori	r24, 0x02	; 2
     de0:	8c 93       	st	X, r24
}
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <TIMER_voidTimer1Init>:


void TIMER_voidTimer1Init(void)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
    TCCR1B &= TIMER_PRESCALER_MASK_CLR;
     df0:	ae e4       	ldi	r26, 0x4E	; 78
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	ee e4       	ldi	r30, 0x4E	; 78
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	88 7f       	andi	r24, 0xF8	; 248
     dfc:	8c 93       	st	X, r24
    TCCR1B |= TIMER_COUNTER_PRESCALER_SELECT;
     dfe:	ae e4       	ldi	r26, 0x4E	; 78
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	ee e4       	ldi	r30, 0x4E	; 78
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	82 60       	ori	r24, 0x02	; 2
     e0a:	8c 93       	st	X, r24

    TCCR1A &= TIMER1_SELECT_MODE_MASK_CLR_A;
     e0c:	af e4       	ldi	r26, 0x4F	; 79
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	ef e4       	ldi	r30, 0x4F	; 79
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	8c 7f       	andi	r24, 0xFC	; 252
     e18:	8c 93       	st	X, r24
    TCCR1A |= TIMER1_SELECT_MODE_A;
     e1a:	af e4       	ldi	r26, 0x4F	; 79
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ef e4       	ldi	r30, 0x4F	; 79
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	82 60       	ori	r24, 0x02	; 2
     e26:	8c 93       	st	X, r24

    TCCR1B &= TIMER1_SELECT_MODE_MASK_CLR_B;
     e28:	ae e4       	ldi	r26, 0x4E	; 78
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	ee e4       	ldi	r30, 0x4E	; 78
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	87 7e       	andi	r24, 0xE7	; 231
     e34:	8c 93       	st	X, r24
    TCCR1B |= TIMER1_SELECT_MODE_B;
     e36:	ae e4       	ldi	r26, 0x4E	; 78
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ee e4       	ldi	r30, 0x4E	; 78
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 61       	ori	r24, 0x18	; 24
     e42:	8c 93       	st	X, r24
        #elif (TIMER1_MODE == TIMER_FAST_PWM_MODE)
            #if (TIMER1_SUB_MODE == TIMER_NORMAL_PORT)
                CLR_BIT(TCCR1A, TCCR1A_COM1A1);
                CLR_BIT(TCCR1A, TCCR1A_COM1A0);
            #elif (TIMER1_SUB_MODE == TIMER_CLR_ON_COMP_SET_ON_TOP)
                SET_BIT(TCCR1A, TCCR1A_COM1A1);
     e44:	af e4       	ldi	r26, 0x4F	; 79
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ef e4       	ldi	r30, 0x4F	; 79
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 68       	ori	r24, 0x80	; 128
     e50:	8c 93       	st	X, r24
                CLR_BIT(TCCR1A, TCCR1A_COM1A0);
     e52:	af e4       	ldi	r26, 0x4F	; 79
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e4       	ldi	r30, 0x4F	; 79
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7b       	andi	r24, 0xBF	; 191
     e5e:	8c 93       	st	X, r24
    
    #elif(OC1B_CHANNEL == DISABLE)

    #endif

}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <TIMER_voidTimer1SetPreloadValue>:

void TIMER_voidTimer1SetPreloadValue(u16 Copy_u16PreloadValue)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <TIMER_voidTimer1SetPreloadValue+0x6>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9a 83       	std	Y+2, r25	; 0x02
     e72:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Copy_u16PreloadValue;
     e74:	ec e4       	ldi	r30, 0x4C	; 76
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <TIMER_voidTimer1SetCompareMatchTime>:

void TIMER_voidTimer1SetCompareMatchTime(u16 Copy_u16CompareMatchValue)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <TIMER_voidTimer1SetCompareMatchTime+0x6>
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = Copy_u16CompareMatchValue;
     e98:	ea e4       	ldi	r30, 0x4A	; 74
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	91 83       	std	Z+1, r25	; 0x01
     ea2:	80 83       	st	Z, r24
}
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <TIMER_voidTimer1SetCompMatchValueB>:

void TIMER_voidTimer1SetCompMatchValueB(u16 Copy_u16CompareMatchValue)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <TIMER_voidTimer1SetCompMatchValueB+0x6>
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	9a 83       	std	Y+2, r25	; 0x02
     eba:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = Copy_u16CompareMatchValue;
     ebc:	e8 e4       	ldi	r30, 0x48	; 72
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	91 83       	std	Z+1, r25	; 0x01
     ec6:	80 83       	st	Z, r24
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <TIMER_voidTimer1SetTopValue>:

void TIMER_voidTimer1SetTopValue(u16 Copy_u16TopValue)
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <TIMER_voidTimer1SetTopValue+0x6>
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = Copy_u16TopValue;
     ee0:	e6 e4       	ldi	r30, 0x46	; 70
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	80 83       	st	Z, r24
}
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <TIMER_voiTimer0dSetPreloadValue>:



void TIMER_voiTimer0dSetPreloadValue (u8 Copy_PreloadValue)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = Copy_PreloadValue;
     f02:	e2 e5       	ldi	r30, 0x52	; 82
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	80 83       	st	Z, r24
}
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <TIMER_voidTimer0SetCOMatchValue>:

void TIMER_voidTimer0SetCOMatchValue (u8 Copy_COMPValue)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = Copy_COMPValue;
     f1e:	ec e5       	ldi	r30, 0x5C	; 92
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	80 83       	st	Z, r24
}
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <TIMER_GetValueTCNT1>:


u16 TIMER_GetValueTCNT1(void)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
	return(TCNT1);
     f36:	ec e4       	ldi	r30, 0x4C	; 76
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
}
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <TIMER_GetValueICR1>:

u16 TIMER_GetValueICR1(void)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
	return(ICR1);
     f4c:	e6 e4       	ldi	r30, 0x46	; 70
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
}
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <TIMER_voidSetBusyWait_COMPMode>:


void TIMER_voidSetBusyWait_COMPMode (u32 Copy_u32Timeout)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <TIMER_voidSetBusyWait_COMPMode+0x6>
     f60:	00 d0       	rcall	.+0      	; 0xf62 <TIMER_voidSetBusyWait_COMPMode+0x8>
     f62:	00 d0       	rcall	.+0      	; 0xf64 <TIMER_voidSetBusyWait_COMPMode+0xa>
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	9e 83       	std	Y+6, r25	; 0x06
     f6a:	8d 83       	std	Y+5, r24	; 0x05
    /*TIMER 2*/

    /*Set CTC Mode*/
    TCCR2 &= TIMER0_SELECT_MODE_MASK_CLR;
     f6c:	a5 e4       	ldi	r26, 0x45	; 69
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e5 e4       	ldi	r30, 0x45	; 69
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	87 7b       	andi	r24, 0xB7	; 183
     f78:	8c 93       	st	X, r24
    TCCR2 |= TIMER0_CTC_MODE_MSK;
     f7a:	a5 e4       	ldi	r26, 0x45	; 69
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e5 e4       	ldi	r30, 0x45	; 69
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	88 60       	ori	r24, 0x08	; 8
     f86:	8c 93       	st	X, r24

    TCCR2 &= TIMER_PRESCALER_MASK_CLR;
     f88:	a5 e4       	ldi	r26, 0x45	; 69
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e5 e4       	ldi	r30, 0x45	; 69
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	88 7f       	andi	r24, 0xF8	; 248
     f94:	8c 93       	st	X, r24
    TCCR2 |= TIMER_PRESCALER_DIV_BY_64;
     f96:	a5 e4       	ldi	r26, 0x45	; 69
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e5 e4       	ldi	r30, 0x45	; 69
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	83 60       	ori	r24, 0x03	; 3
     fa2:	8c 93       	st	X, r24

	OCR2 = 125;
     fa4:	ec e5       	ldi	r30, 0x5C	; 92
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	8d e7       	ldi	r24, 0x7D	; 125
     faa:	80 83       	st	Z, r24

    u8 Local_u8TCCR2OldValue = TCCR2;
     fac:	e5 e4       	ldi	r30, 0x45	; 69
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8OCR2OldValue = OCR2;
     fb4:	ec e5       	ldi	r30, 0x5C	; 92
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8b 83       	std	Y+3, r24	; 0x03

    u32 Local_u32TicksToWait = 0;
     fbc:	1a 82       	std	Y+2, r1	; 0x02
     fbe:	19 82       	std	Y+1, r1	; 0x01
     fc0:	17 c0       	rjmp	.+46     	; 0xff0 <TIMER_voidSetBusyWait_COMPMode+0x96>
    while(Local_u32TicksToWait <= Copy_u32Timeout)
    {
        while(GET_BIT(TIFR, TIFR_OCF2) == 0);
     fc2:	e8 e5       	ldi	r30, 0x58	; 88
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	80 78       	andi	r24, 0x80	; 128
     fcc:	90 70       	andi	r25, 0x00	; 0
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	c1 f3       	breq	.-16     	; 0xfc2 <TIMER_voidSetBusyWait_COMPMode+0x68>
        SET_BIT(TIFR, TIFR_OCF2);
     fd2:	a8 e5       	ldi	r26, 0x58	; 88
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 e5       	ldi	r30, 0x58	; 88
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	91 81       	ldd	r25, Z+1	; 0x01
     fde:	80 68       	ori	r24, 0x80	; 128
     fe0:	11 96       	adiw	r26, 0x01	; 1
     fe2:	9c 93       	st	X, r25
     fe4:	8e 93       	st	-X, r24
        Local_u32TicksToWait++;
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	9a 81       	ldd	r25, Y+2	; 0x02
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	9a 83       	std	Y+2, r25	; 0x02
     fee:	89 83       	std	Y+1, r24	; 0x01

    u8 Local_u8TCCR2OldValue = TCCR2;
    u8 Local_u8OCR2OldValue = OCR2;

    u32 Local_u32TicksToWait = 0;
    while(Local_u32TicksToWait <= Copy_u32Timeout)
     ff0:	29 81       	ldd	r18, Y+1	; 0x01
     ff2:	3a 81       	ldd	r19, Y+2	; 0x02
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	82 17       	cp	r24, r18
     ffa:	93 07       	cpc	r25, r19
     ffc:	10 f7       	brcc	.-60     	; 0xfc2 <TIMER_voidSetBusyWait_COMPMode+0x68>
        while(GET_BIT(TIFR, TIFR_OCF2) == 0);
        SET_BIT(TIFR, TIFR_OCF2);
        Local_u32TicksToWait++;
    }

    TCCR2 = Local_u8TCCR2OldValue;
     ffe:	e5 e4       	ldi	r30, 0x45	; 69
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	80 83       	st	Z, r24
    OCR2 = Local_u8OCR2OldValue;
    1006:	ec e5       	ldi	r30, 0x5C	; 92
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	80 83       	st	Z, r24
}
    100e:	26 96       	adiw	r28, 0x06	; 6
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <TIMER_voidTimer0ControlInterrupt>:

void TIMER_voidTimer0ControlInterrupt(u8 Copy_u8InterruptType, u8 Copy_u8Mode)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	28 97       	sbiw	r28, 0x08	; 8
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
    
    switch (Copy_u8InterruptType)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	38 87       	std	Y+8, r19	; 0x08
    1040:	2f 83       	std	Y+7, r18	; 0x07
    1042:	8f 81       	ldd	r24, Y+7	; 0x07
    1044:	98 85       	ldd	r25, Y+8	; 0x08
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	31 f0       	breq	.+12     	; 0x1056 <TIMER_voidTimer0ControlInterrupt+0x36>
    104a:	2f 81       	ldd	r18, Y+7	; 0x07
    104c:	38 85       	ldd	r19, Y+8	; 0x08
    104e:	21 30       	cpi	r18, 0x01	; 1
    1050:	31 05       	cpc	r19, r1
    1052:	01 f1       	breq	.+64     	; 0x1094 <TIMER_voidTimer0ControlInterrupt+0x74>
    1054:	3d c0       	rjmp	.+122    	; 0x10d0 <TIMER_voidTimer0ControlInterrupt+0xb0>
    {
    case OVF:
        switch (Copy_u8Mode)
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	3e 83       	std	Y+6, r19	; 0x06
    105e:	2d 83       	std	Y+5, r18	; 0x05
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	31 f0       	breq	.+12     	; 0x1074 <TIMER_voidTimer0ControlInterrupt+0x54>
    1068:	2d 81       	ldd	r18, Y+5	; 0x05
    106a:	3e 81       	ldd	r19, Y+6	; 0x06
    106c:	21 30       	cpi	r18, 0x01	; 1
    106e:	31 05       	cpc	r19, r1
    1070:	49 f0       	breq	.+18     	; 0x1084 <TIMER_voidTimer0ControlInterrupt+0x64>
    1072:	2e c0       	rjmp	.+92     	; 0x10d0 <TIMER_voidTimer0ControlInterrupt+0xb0>
        {
        case ENABLE:
            SET_BIT(TIMSK, TIMSK_TOIE0);
    1074:	a9 e5       	ldi	r26, 0x59	; 89
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e9 e5       	ldi	r30, 0x59	; 89
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	81 60       	ori	r24, 0x01	; 1
    1080:	8c 93       	st	X, r24
    1082:	26 c0       	rjmp	.+76     	; 0x10d0 <TIMER_voidTimer0ControlInterrupt+0xb0>
            break;
        case DISABLE:
            CLR_BIT(TIMSK, TIMSK_TOIE0);
    1084:	a9 e5       	ldi	r26, 0x59	; 89
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e9 e5       	ldi	r30, 0x59	; 89
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	8e 7f       	andi	r24, 0xFE	; 254
    1090:	8c 93       	st	X, r24
    1092:	1e c0       	rjmp	.+60     	; 0x10d0 <TIMER_voidTimer0ControlInterrupt+0xb0>
        default:
            break;
        }
        break;
    case COMP:
        switch (Copy_u8Mode)
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	3c 83       	std	Y+4, r19	; 0x04
    109c:	2b 83       	std	Y+3, r18	; 0x03
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	31 f0       	breq	.+12     	; 0x10b2 <TIMER_voidTimer0ControlInterrupt+0x92>
    10a6:	2b 81       	ldd	r18, Y+3	; 0x03
    10a8:	3c 81       	ldd	r19, Y+4	; 0x04
    10aa:	21 30       	cpi	r18, 0x01	; 1
    10ac:	31 05       	cpc	r19, r1
    10ae:	49 f0       	breq	.+18     	; 0x10c2 <TIMER_voidTimer0ControlInterrupt+0xa2>
    10b0:	0f c0       	rjmp	.+30     	; 0x10d0 <TIMER_voidTimer0ControlInterrupt+0xb0>
        {
        case ENABLE:
            SET_BIT(TIMSK, TIMSK_OCIE0);
    10b2:	a9 e5       	ldi	r26, 0x59	; 89
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e9 e5       	ldi	r30, 0x59	; 89
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	82 60       	ori	r24, 0x02	; 2
    10be:	8c 93       	st	X, r24
    10c0:	07 c0       	rjmp	.+14     	; 0x10d0 <TIMER_voidTimer0ControlInterrupt+0xb0>
            break;
        case DISABLE:
            CLR_BIT(TIMSK, TIMSK_OCIE0);
    10c2:	a9 e5       	ldi	r26, 0x59	; 89
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e9 e5       	ldi	r30, 0x59	; 89
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8d 7f       	andi	r24, 0xFD	; 253
    10ce:	8c 93       	st	X, r24

    default:
    break;    
    }
    
}
    10d0:	28 96       	adiw	r28, 0x08	; 8
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <TIMER_voidTimer1ControlInterrupt>:

void TIMER_voidTimer1ControlInterrupt(u8 Copy_u8Cannel, u8 Copy_u8InterruptType, u8 Copy_u8Mode)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	61 97       	sbiw	r28, 0x11	; 17
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	6a 83       	std	Y+2, r22	; 0x02
    10fa:	4b 83       	std	Y+3, r20	; 0x03
    switch (Copy_u8Cannel)
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	39 8b       	std	Y+17, r19	; 0x11
    1104:	28 8b       	std	Y+16, r18	; 0x10
    1106:	88 89       	ldd	r24, Y+16	; 0x10
    1108:	99 89       	ldd	r25, Y+17	; 0x11
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	39 f0       	breq	.+14     	; 0x111c <TIMER_voidTimer1ControlInterrupt+0x3a>
    110e:	28 89       	ldd	r18, Y+16	; 0x10
    1110:	39 89       	ldd	r19, Y+17	; 0x11
    1112:	21 30       	cpi	r18, 0x01	; 1
    1114:	31 05       	cpc	r19, r1
    1116:	09 f4       	brne	.+2      	; 0x111a <TIMER_voidTimer1ControlInterrupt+0x38>
    1118:	4e c0       	rjmp	.+156    	; 0x11b6 <TIMER_voidTimer1ControlInterrupt+0xd4>
    111a:	99 c0       	rjmp	.+306    	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
    {
    case OC1A:
        switch (Copy_u8InterruptType)
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	3f 87       	std	Y+15, r19	; 0x0f
    1124:	2e 87       	std	Y+14, r18	; 0x0e
    1126:	8e 85       	ldd	r24, Y+14	; 0x0e
    1128:	9f 85       	ldd	r25, Y+15	; 0x0f
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	31 f0       	breq	.+12     	; 0x113a <TIMER_voidTimer1ControlInterrupt+0x58>
    112e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1130:	3f 85       	ldd	r19, Y+15	; 0x0f
    1132:	21 30       	cpi	r18, 0x01	; 1
    1134:	31 05       	cpc	r19, r1
    1136:	01 f1       	breq	.+64     	; 0x1178 <TIMER_voidTimer1ControlInterrupt+0x96>
    1138:	8a c0       	rjmp	.+276    	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
        {
        case OVF:
            switch (Copy_u8Mode)
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3d 87       	std	Y+13, r19	; 0x0d
    1142:	2c 87       	std	Y+12, r18	; 0x0c
    1144:	8c 85       	ldd	r24, Y+12	; 0x0c
    1146:	9d 85       	ldd	r25, Y+13	; 0x0d
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	31 f0       	breq	.+12     	; 0x1158 <TIMER_voidTimer1ControlInterrupt+0x76>
    114c:	2c 85       	ldd	r18, Y+12	; 0x0c
    114e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1150:	21 30       	cpi	r18, 0x01	; 1
    1152:	31 05       	cpc	r19, r1
    1154:	49 f0       	breq	.+18     	; 0x1168 <TIMER_voidTimer1ControlInterrupt+0x86>
    1156:	7b c0       	rjmp	.+246    	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
            {
            case ENABLE:
                SET_BIT(TIMSK, TIMSK_TOIE2);
    1158:	a9 e5       	ldi	r26, 0x59	; 89
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e9 e5       	ldi	r30, 0x59	; 89
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	8c 93       	st	X, r24
    1166:	73 c0       	rjmp	.+230    	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
            break;
            case DISABLE:
                CLR_BIT(TIMSK, TIMSK_TOIE2);
    1168:	a9 e5       	ldi	r26, 0x59	; 89
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e9 e5       	ldi	r30, 0x59	; 89
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	8f 7b       	andi	r24, 0xBF	; 191
    1174:	8c 93       	st	X, r24
    1176:	6b c0       	rjmp	.+214    	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
            break;
            }
        break;
        case COMP:
            switch (Copy_u8Mode)
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	3b 87       	std	Y+11, r19	; 0x0b
    1180:	2a 87       	std	Y+10, r18	; 0x0a
    1182:	8a 85       	ldd	r24, Y+10	; 0x0a
    1184:	9b 85       	ldd	r25, Y+11	; 0x0b
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	31 f0       	breq	.+12     	; 0x1196 <TIMER_voidTimer1ControlInterrupt+0xb4>
    118a:	2a 85       	ldd	r18, Y+10	; 0x0a
    118c:	3b 85       	ldd	r19, Y+11	; 0x0b
    118e:	21 30       	cpi	r18, 0x01	; 1
    1190:	31 05       	cpc	r19, r1
    1192:	49 f0       	breq	.+18     	; 0x11a6 <TIMER_voidTimer1ControlInterrupt+0xc4>
    1194:	5c c0       	rjmp	.+184    	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
            {
            case ENABLE:
                SET_BIT(TIMSK, TIMSK_OCIE1A);
    1196:	a9 e5       	ldi	r26, 0x59	; 89
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e9 e5       	ldi	r30, 0x59	; 89
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	80 61       	ori	r24, 0x10	; 16
    11a2:	8c 93       	st	X, r24
    11a4:	54 c0       	rjmp	.+168    	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
            break;
            case DISABLE:
                CLR_BIT(TIMSK, TIMSK_OCIE1A);
    11a6:	a9 e5       	ldi	r26, 0x59	; 89
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e9 e5       	ldi	r30, 0x59	; 89
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 7e       	andi	r24, 0xEF	; 239
    11b2:	8c 93       	st	X, r24
    11b4:	4c c0       	rjmp	.+152    	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
            }
        break;
        }
    break;
    case OC1B:
        switch (Copy_u8InterruptType)
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	39 87       	std	Y+9, r19	; 0x09
    11be:	28 87       	std	Y+8, r18	; 0x08
    11c0:	88 85       	ldd	r24, Y+8	; 0x08
    11c2:	99 85       	ldd	r25, Y+9	; 0x09
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	31 f0       	breq	.+12     	; 0x11d4 <TIMER_voidTimer1ControlInterrupt+0xf2>
    11c8:	28 85       	ldd	r18, Y+8	; 0x08
    11ca:	39 85       	ldd	r19, Y+9	; 0x09
    11cc:	21 30       	cpi	r18, 0x01	; 1
    11ce:	31 05       	cpc	r19, r1
    11d0:	01 f1       	breq	.+64     	; 0x1212 <TIMER_voidTimer1ControlInterrupt+0x130>
    11d2:	3d c0       	rjmp	.+122    	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
        {
        case OVF:
            switch (Copy_u8Mode)
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	3f 83       	std	Y+7, r19	; 0x07
    11dc:	2e 83       	std	Y+6, r18	; 0x06
    11de:	8e 81       	ldd	r24, Y+6	; 0x06
    11e0:	9f 81       	ldd	r25, Y+7	; 0x07
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	31 f0       	breq	.+12     	; 0x11f2 <TIMER_voidTimer1ControlInterrupt+0x110>
    11e6:	2e 81       	ldd	r18, Y+6	; 0x06
    11e8:	3f 81       	ldd	r19, Y+7	; 0x07
    11ea:	21 30       	cpi	r18, 0x01	; 1
    11ec:	31 05       	cpc	r19, r1
    11ee:	49 f0       	breq	.+18     	; 0x1202 <TIMER_voidTimer1ControlInterrupt+0x120>
    11f0:	2e c0       	rjmp	.+92     	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
            {
            case ENABLE:
                SET_BIT(TIMSK, TIMSK_TOIE2);
    11f2:	a9 e5       	ldi	r26, 0x59	; 89
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e9 e5       	ldi	r30, 0x59	; 89
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	80 64       	ori	r24, 0x40	; 64
    11fe:	8c 93       	st	X, r24
    1200:	26 c0       	rjmp	.+76     	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
            break;
            case DISABLE:
                CLR_BIT(TIMSK, TIMSK_TOIE2);
    1202:	a9 e5       	ldi	r26, 0x59	; 89
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e9 e5       	ldi	r30, 0x59	; 89
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8f 7b       	andi	r24, 0xBF	; 191
    120e:	8c 93       	st	X, r24
    1210:	1e c0       	rjmp	.+60     	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
            break;
            }
            break;
        case COMP:
            switch (Copy_u8Mode)
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3d 83       	std	Y+5, r19	; 0x05
    121a:	2c 83       	std	Y+4, r18	; 0x04
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	31 f0       	breq	.+12     	; 0x1230 <TIMER_voidTimer1ControlInterrupt+0x14e>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	21 30       	cpi	r18, 0x01	; 1
    122a:	31 05       	cpc	r19, r1
    122c:	49 f0       	breq	.+18     	; 0x1240 <TIMER_voidTimer1ControlInterrupt+0x15e>
    122e:	0f c0       	rjmp	.+30     	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
            {
            case ENABLE:
                SET_BIT(TIMSK, TIMSK_OCIE1A);
    1230:	a9 e5       	ldi	r26, 0x59	; 89
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e9 e5       	ldi	r30, 0x59	; 89
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	80 61       	ori	r24, 0x10	; 16
    123c:	8c 93       	st	X, r24
    123e:	07 c0       	rjmp	.+14     	; 0x124e <TIMER_voidTimer1ControlInterrupt+0x16c>
            break;
            case DISABLE:
                CLR_BIT(TIMSK, TIMSK_OCIE1A);
    1240:	a9 e5       	ldi	r26, 0x59	; 89
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e9 e5       	ldi	r30, 0x59	; 89
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	8f 7e       	andi	r24, 0xEF	; 239
    124c:	8c 93       	st	X, r24

    default:
    break;        
    }
    
}
    124e:	61 96       	adiw	r28, 0x11	; 17
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <ICU_voidTimer1ControlInterrupt>:

void ICU_voidTimer1ControlInterrupt(u8 Copy_u8Mode)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <ICU_voidTimer1ControlInterrupt+0x6>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8Mode)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3b 83       	std	Y+3, r19	; 0x03
    1276:	2a 83       	std	Y+2, r18	; 0x02
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	9b 81       	ldd	r25, Y+3	; 0x03
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	31 f0       	breq	.+12     	; 0x128c <ICU_voidTimer1ControlInterrupt+0x2c>
    1280:	2a 81       	ldd	r18, Y+2	; 0x02
    1282:	3b 81       	ldd	r19, Y+3	; 0x03
    1284:	21 30       	cpi	r18, 0x01	; 1
    1286:	31 05       	cpc	r19, r1
    1288:	49 f0       	breq	.+18     	; 0x129c <ICU_voidTimer1ControlInterrupt+0x3c>
    128a:	0f c0       	rjmp	.+30     	; 0x12aa <ICU_voidTimer1ControlInterrupt+0x4a>
    {
    case ENABLE:
        SET_BIT(TIMSK, TIMSK_TICIE1);
    128c:	a9 e5       	ldi	r26, 0x59	; 89
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e9 e5       	ldi	r30, 0x59	; 89
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	80 62       	ori	r24, 0x20	; 32
    1298:	8c 93       	st	X, r24
    129a:	07 c0       	rjmp	.+14     	; 0x12aa <ICU_voidTimer1ControlInterrupt+0x4a>
    break;
    case DISABLE:
        CLR_BIT(TIMSK, TIMSK_TICIE1);
    129c:	a9 e5       	ldi	r26, 0x59	; 89
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e9 e5       	ldi	r30, 0x59	; 89
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 7d       	andi	r24, 0xDF	; 223
    12a8:	8c 93       	st	X, r24
    break;

    default:
    break;
    }
}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <ICU_voidSenceModetrigger>:

void ICU_voidSenceModetrigger(u8 Copy_u8Mode)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <ICU_voidSenceModetrigger+0x6>
    12bc:	0f 92       	push	r0
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8Mode)
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	3b 83       	std	Y+3, r19	; 0x03
    12cc:	2a 83       	std	Y+2, r18	; 0x02
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	9b 81       	ldd	r25, Y+3	; 0x03
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	31 f0       	breq	.+12     	; 0x12e2 <ICU_voidSenceModetrigger+0x2c>
    12d6:	2a 81       	ldd	r18, Y+2	; 0x02
    12d8:	3b 81       	ldd	r19, Y+3	; 0x03
    12da:	21 30       	cpi	r18, 0x01	; 1
    12dc:	31 05       	cpc	r19, r1
    12de:	49 f0       	breq	.+18     	; 0x12f2 <ICU_voidSenceModetrigger+0x3c>
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <ICU_voidSenceModetrigger+0x4a>
    {
        case RISING_EDGE:
            SET_BIT(TCCR1B, TCCR1B_ICES1);
    12e2:	ae e4       	ldi	r26, 0x4E	; 78
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	ee e4       	ldi	r30, 0x4E	; 78
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 64       	ori	r24, 0x40	; 64
    12ee:	8c 93       	st	X, r24
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <ICU_voidSenceModetrigger+0x4a>
        break;
        case FALLING_EDGE:
            CLR_BIT(TCCR1B, TCCR1B_ICES1);
    12f2:	ae e4       	ldi	r26, 0x4E	; 78
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	ee e4       	ldi	r30, 0x4E	; 78
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	8f 7b       	andi	r24, 0xBF	; 191
    12fe:	8c 93       	st	X, r24
        break;
    }

}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <TIMER_voidTimer0SetOVFCallBack>:

/* CallBack Timer 0 */
void (* TIMER0_OVFNotification)(void) = NULL_POINTER;
void TIMER_voidTimer0SetOVFCallBack (void (* Notification)(void))
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <TIMER_voidTimer0SetOVFCallBack+0x6>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_OVFNotification = Notification;
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	90 93 d2 01 	sts	0x01D2, r25
    1322:	80 93 d1 01 	sts	0x01D1, r24
}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <TIMER_voidTimer0SetCOMPFCallBack>:

void (* TIMER0_COMPNotification)(void) = NULL_POINTER;
void TIMER_voidTimer0SetCOMPFCallBack (void (* Notification)(void))
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <TIMER_voidTimer0SetCOMPFCallBack+0x6>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	9a 83       	std	Y+2, r25	; 0x02
    133c:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_COMPNotification = Notification;
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	9a 81       	ldd	r25, Y+2	; 0x02
    1342:	90 93 d4 01 	sts	0x01D4, r25
    1346:	80 93 d3 01 	sts	0x01D3, r24
}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <TIMER_voidTimer1SetOVFCallBack>:

/* CallBack Timer 1 */
void (* TIMER1_OVFNotification)(void) = NULL_POINTER;
void TIMER_voidTimer1SetOVFCallBack (void (* Notification)(void))
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <TIMER_voidTimer1SetOVFCallBack+0x6>
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_OVFNotification = Notification;
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	9a 81       	ldd	r25, Y+2	; 0x02
    1366:	90 93 d6 01 	sts	0x01D6, r25
    136a:	80 93 d5 01 	sts	0x01D5, r24
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <TIMER_voidTimer1SetCOMPACallBack>:

void (* TIMER1_COMPANotification)(void) = NULL_POINTER;
void TIMER_voidTimer1SetCOMPACallBack (void (* Notification)(void))
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	00 d0       	rcall	.+0      	; 0x137e <TIMER_voidTimer1SetCOMPACallBack+0x6>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_COMPANotification = Notification;
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	9a 81       	ldd	r25, Y+2	; 0x02
    138a:	90 93 d8 01 	sts	0x01D8, r25
    138e:	80 93 d7 01 	sts	0x01D7, r24
}
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <TIMER_voidTimer1SetCOMPBCallBack>:

void (* TIMER1_COMPBNotification)(void) = NULL_POINTER;
void TIMER_voidTimer1SetCOMPBCallBack (void (* Notification)(void))
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <TIMER_voidTimer1SetCOMPBCallBack+0x6>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	9a 83       	std	Y+2, r25	; 0x02
    13a8:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_COMPBNotification = Notification;
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	90 93 da 01 	sts	0x01DA, r25
    13b2:	80 93 d9 01 	sts	0x01D9, r24
}
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <ICU_voidCallBack>:

void (* ICU_Notification)(void) = NULL_POINTER;
void ICU_voidCallBack (void (* Notification)(void))
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <ICU_voidCallBack+0x6>
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	9a 83       	std	Y+2, r25	; 0x02
    13cc:	89 83       	std	Y+1, r24	; 0x01
    ICU_Notification = Notification;
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	9a 81       	ldd	r25, Y+2	; 0x02
    13d2:	90 93 dc 01 	sts	0x01DC, r25
    13d6:	80 93 db 01 	sts	0x01DB, r24
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <vector_6>:


void vector_6 (void) __attribute__((signal));
void vector_6 (void)
{
    13e4:	1f 92       	push	r1
    13e6:	0f 92       	push	r0
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	0f 92       	push	r0
    13ec:	11 24       	eor	r1, r1
    13ee:	2f 93       	push	r18
    13f0:	3f 93       	push	r19
    13f2:	4f 93       	push	r20
    13f4:	5f 93       	push	r21
    13f6:	6f 93       	push	r22
    13f8:	7f 93       	push	r23
    13fa:	8f 93       	push	r24
    13fc:	9f 93       	push	r25
    13fe:	af 93       	push	r26
    1400:	bf 93       	push	r27
    1402:	ef 93       	push	r30
    1404:	ff 93       	push	r31
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    if(ICU_Notification != NULL_POINTER)
    140e:	80 91 db 01 	lds	r24, 0x01DB
    1412:	90 91 dc 01 	lds	r25, 0x01DC
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	29 f0       	breq	.+10     	; 0x1424 <vector_6+0x40>
    {
        ICU_Notification();
    141a:	e0 91 db 01 	lds	r30, 0x01DB
    141e:	f0 91 dc 01 	lds	r31, 0x01DC
    1422:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	ff 91       	pop	r31
    142a:	ef 91       	pop	r30
    142c:	bf 91       	pop	r27
    142e:	af 91       	pop	r26
    1430:	9f 91       	pop	r25
    1432:	8f 91       	pop	r24
    1434:	7f 91       	pop	r23
    1436:	6f 91       	pop	r22
    1438:	5f 91       	pop	r21
    143a:	4f 91       	pop	r20
    143c:	3f 91       	pop	r19
    143e:	2f 91       	pop	r18
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	0f 90       	pop	r0
    1446:	1f 90       	pop	r1
    1448:	18 95       	reti

0000144a <vector_7>:

void vector_7 (void) __attribute__((signal));
void vector_7 (void)
{
    144a:	1f 92       	push	r1
    144c:	0f 92       	push	r0
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	0f 92       	push	r0
    1452:	11 24       	eor	r1, r1
    1454:	2f 93       	push	r18
    1456:	3f 93       	push	r19
    1458:	4f 93       	push	r20
    145a:	5f 93       	push	r21
    145c:	6f 93       	push	r22
    145e:	7f 93       	push	r23
    1460:	8f 93       	push	r24
    1462:	9f 93       	push	r25
    1464:	af 93       	push	r26
    1466:	bf 93       	push	r27
    1468:	ef 93       	push	r30
    146a:	ff 93       	push	r31
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    if(TIMER1_COMPANotification != NULL_POINTER)
    1474:	80 91 d7 01 	lds	r24, 0x01D7
    1478:	90 91 d8 01 	lds	r25, 0x01D8
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	29 f0       	breq	.+10     	; 0x148a <vector_7+0x40>
    {
        TIMER1_COMPANotification();
    1480:	e0 91 d7 01 	lds	r30, 0x01D7
    1484:	f0 91 d8 01 	lds	r31, 0x01D8
    1488:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	ff 91       	pop	r31
    1490:	ef 91       	pop	r30
    1492:	bf 91       	pop	r27
    1494:	af 91       	pop	r26
    1496:	9f 91       	pop	r25
    1498:	8f 91       	pop	r24
    149a:	7f 91       	pop	r23
    149c:	6f 91       	pop	r22
    149e:	5f 91       	pop	r21
    14a0:	4f 91       	pop	r20
    14a2:	3f 91       	pop	r19
    14a4:	2f 91       	pop	r18
    14a6:	0f 90       	pop	r0
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	0f 90       	pop	r0
    14ac:	1f 90       	pop	r1
    14ae:	18 95       	reti

000014b0 <vector_8>:

void vector_8 (void) __attribute__((signal));
void vector_8 (void)
{
    14b0:	1f 92       	push	r1
    14b2:	0f 92       	push	r0
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	0f 92       	push	r0
    14b8:	11 24       	eor	r1, r1
    14ba:	2f 93       	push	r18
    14bc:	3f 93       	push	r19
    14be:	4f 93       	push	r20
    14c0:	5f 93       	push	r21
    14c2:	6f 93       	push	r22
    14c4:	7f 93       	push	r23
    14c6:	8f 93       	push	r24
    14c8:	9f 93       	push	r25
    14ca:	af 93       	push	r26
    14cc:	bf 93       	push	r27
    14ce:	ef 93       	push	r30
    14d0:	ff 93       	push	r31
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    if(TIMER1_COMPBNotification != NULL_POINTER)
    14da:	80 91 d9 01 	lds	r24, 0x01D9
    14de:	90 91 da 01 	lds	r25, 0x01DA
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	29 f0       	breq	.+10     	; 0x14f0 <vector_8+0x40>
    {
        TIMER1_COMPBNotification();
    14e6:	e0 91 d9 01 	lds	r30, 0x01D9
    14ea:	f0 91 da 01 	lds	r31, 0x01DA
    14ee:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	ff 91       	pop	r31
    14f6:	ef 91       	pop	r30
    14f8:	bf 91       	pop	r27
    14fa:	af 91       	pop	r26
    14fc:	9f 91       	pop	r25
    14fe:	8f 91       	pop	r24
    1500:	7f 91       	pop	r23
    1502:	6f 91       	pop	r22
    1504:	5f 91       	pop	r21
    1506:	4f 91       	pop	r20
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	0f 90       	pop	r0
    1512:	1f 90       	pop	r1
    1514:	18 95       	reti

00001516 <vector_9>:

void vector_9 (void) __attribute__((signal));
void vector_9 (void)
{
    1516:	1f 92       	push	r1
    1518:	0f 92       	push	r0
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	0f 92       	push	r0
    151e:	11 24       	eor	r1, r1
    1520:	2f 93       	push	r18
    1522:	3f 93       	push	r19
    1524:	4f 93       	push	r20
    1526:	5f 93       	push	r21
    1528:	6f 93       	push	r22
    152a:	7f 93       	push	r23
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	af 93       	push	r26
    1532:	bf 93       	push	r27
    1534:	ef 93       	push	r30
    1536:	ff 93       	push	r31
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    if(TIMER1_OVFNotification != NULL_POINTER)
    1540:	80 91 d5 01 	lds	r24, 0x01D5
    1544:	90 91 d6 01 	lds	r25, 0x01D6
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	29 f0       	breq	.+10     	; 0x1556 <vector_9+0x40>
    {
        TIMER1_OVFNotification();
    154c:	e0 91 d5 01 	lds	r30, 0x01D5
    1550:	f0 91 d6 01 	lds	r31, 0x01D6
    1554:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	ff 91       	pop	r31
    155c:	ef 91       	pop	r30
    155e:	bf 91       	pop	r27
    1560:	af 91       	pop	r26
    1562:	9f 91       	pop	r25
    1564:	8f 91       	pop	r24
    1566:	7f 91       	pop	r23
    1568:	6f 91       	pop	r22
    156a:	5f 91       	pop	r21
    156c:	4f 91       	pop	r20
    156e:	3f 91       	pop	r19
    1570:	2f 91       	pop	r18
    1572:	0f 90       	pop	r0
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	0f 90       	pop	r0
    1578:	1f 90       	pop	r1
    157a:	18 95       	reti

0000157c <vector_10>:

void vector_10 (void) __attribute__((signal));
void vector_10 (void)
{
    157c:	1f 92       	push	r1
    157e:	0f 92       	push	r0
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	0f 92       	push	r0
    1584:	11 24       	eor	r1, r1
    1586:	2f 93       	push	r18
    1588:	3f 93       	push	r19
    158a:	4f 93       	push	r20
    158c:	5f 93       	push	r21
    158e:	6f 93       	push	r22
    1590:	7f 93       	push	r23
    1592:	8f 93       	push	r24
    1594:	9f 93       	push	r25
    1596:	af 93       	push	r26
    1598:	bf 93       	push	r27
    159a:	ef 93       	push	r30
    159c:	ff 93       	push	r31
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    if(TIMER0_COMPNotification != NULL_POINTER)
    15a6:	80 91 d3 01 	lds	r24, 0x01D3
    15aa:	90 91 d4 01 	lds	r25, 0x01D4
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	29 f0       	breq	.+10     	; 0x15bc <vector_10+0x40>
    {
        TIMER0_COMPNotification();
    15b2:	e0 91 d3 01 	lds	r30, 0x01D3
    15b6:	f0 91 d4 01 	lds	r31, 0x01D4
    15ba:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	ff 91       	pop	r31
    15c2:	ef 91       	pop	r30
    15c4:	bf 91       	pop	r27
    15c6:	af 91       	pop	r26
    15c8:	9f 91       	pop	r25
    15ca:	8f 91       	pop	r24
    15cc:	7f 91       	pop	r23
    15ce:	6f 91       	pop	r22
    15d0:	5f 91       	pop	r21
    15d2:	4f 91       	pop	r20
    15d4:	3f 91       	pop	r19
    15d6:	2f 91       	pop	r18
    15d8:	0f 90       	pop	r0
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	0f 90       	pop	r0
    15de:	1f 90       	pop	r1
    15e0:	18 95       	reti

000015e2 <vector_11>:

void vector_11 (void) __attribute__((signal));
void vector_11 (void)
{
    15e2:	1f 92       	push	r1
    15e4:	0f 92       	push	r0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	0f 92       	push	r0
    15ea:	11 24       	eor	r1, r1
    15ec:	2f 93       	push	r18
    15ee:	3f 93       	push	r19
    15f0:	4f 93       	push	r20
    15f2:	5f 93       	push	r21
    15f4:	6f 93       	push	r22
    15f6:	7f 93       	push	r23
    15f8:	8f 93       	push	r24
    15fa:	9f 93       	push	r25
    15fc:	af 93       	push	r26
    15fe:	bf 93       	push	r27
    1600:	ef 93       	push	r30
    1602:	ff 93       	push	r31
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    if(TIMER0_OVFNotification != NULL_POINTER)
    160c:	80 91 d1 01 	lds	r24, 0x01D1
    1610:	90 91 d2 01 	lds	r25, 0x01D2
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	29 f0       	breq	.+10     	; 0x1622 <vector_11+0x40>
    {
        TIMER0_OVFNotification();
    1618:	e0 91 d1 01 	lds	r30, 0x01D1
    161c:	f0 91 d2 01 	lds	r31, 0x01D2
    1620:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	ff 91       	pop	r31
    1628:	ef 91       	pop	r30
    162a:	bf 91       	pop	r27
    162c:	af 91       	pop	r26
    162e:	9f 91       	pop	r25
    1630:	8f 91       	pop	r24
    1632:	7f 91       	pop	r23
    1634:	6f 91       	pop	r22
    1636:	5f 91       	pop	r21
    1638:	4f 91       	pop	r20
    163a:	3f 91       	pop	r19
    163c:	2f 91       	pop	r18
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	0f 90       	pop	r0
    1644:	1f 90       	pop	r1
    1646:	18 95       	reti

00001648 <GIE_voidEnableGlobalInterrupt>:
#include "GIE_config.h"



void GIE_voidEnableGlobalInterrupt(void)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    /*Set The I_BIT To Enable The Global Intterupt*/
    SET_BIT(SREG, SREG_I);
    1650:	af e5       	ldi	r26, 0x5F	; 95
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	ef e5       	ldi	r30, 0x5F	; 95
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	80 68       	ori	r24, 0x80	; 128
    165c:	8c 93       	st	X, r24
}
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <GIE_voidDisableGlobalInterrupt>:


void GIE_voidDisableGlobalInterrupt(void)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    /*Set The I_BIT To Enable The Global Intterupt*/
    CLR_BIT(SREG, SREG_I);
    166c:	af e5       	ldi	r26, 0x5F	; 95
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	ef e5       	ldi	r30, 0x5F	; 95
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	8f 77       	andi	r24, 0x7F	; 127
    1678:	8c 93       	st	X, r24
}
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <EXTI_voidInit>:


static void (*EXTI_INT0_Function)(void) = NULL_POINTER;

void EXTI_voidInit(void)
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    #if EXTI_INT0_ENABLE == EXTI_ENABLE
        /*Enable GICR*/
        SET_BIT(GICR, GICR_INT0);
    1688:	ab e5       	ldi	r26, 0x5B	; 91
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	eb e5       	ldi	r30, 0x5B	; 91
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	80 64       	ori	r24, 0x40	; 64
    1694:	8c 93       	st	X, r24
        #if EXTI_INT0_SENSE_MODE == EXTI_RISING_EDGE
            SET_BIT(MCUCR, MCUCR_ISC00);
    1696:	a5 e5       	ldi	r26, 0x55	; 85
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e5 e5       	ldi	r30, 0x55	; 85
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	81 60       	ori	r24, 0x01	; 1
    16a2:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC01);
    16a4:	a5 e5       	ldi	r26, 0x55	; 85
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e5 e5       	ldi	r30, 0x55	; 85
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	82 60       	ori	r24, 0x02	; 2
    16b0:	8c 93       	st	X, r24
        #else

        #endif
    #elif EXTI_INT1_ENABLE == EXTI_DISABLE
        /*Disable GICR*/
        CLR_BIT(GICR, GICR_INT0);
    16b2:	ab e5       	ldi	r26, 0x5B	; 91
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	eb e5       	ldi	r30, 0x5B	; 91
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	8f 7b       	andi	r24, 0xBF	; 191
    16be:	8c 93       	st	X, r24
        #else

        #endif
    #elif EXTI_INT2_ENABLE == EXTI_DISABLE
        /*Disable GICR*/
        CLR_BIT(GICR, GICR_INT0);
    16c0:	ab e5       	ldi	r26, 0x5B	; 91
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	eb e5       	ldi	r30, 0x5B	; 91
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	8f 7b       	andi	r24, 0xBF	; 191
    16cc:	8c 93       	st	X, r24

    #endif

    

}
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <EXTI_voidChangeSenceMode>:

void EXTI_voidChangeSenceMode(u8 Copy_u8InterruptNum, u8 Copy_u8SignalSence)
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	2a 97       	sbiw	r28, 0x0a	; 10
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8InterruptNum)
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	3a 87       	std	Y+10, r19	; 0x0a
    16f4:	29 87       	std	Y+9, r18	; 0x09
    16f6:	89 85       	ldd	r24, Y+9	; 0x09
    16f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	91 05       	cpc	r25, r1
    16fe:	09 f4       	brne	.+2      	; 0x1702 <EXTI_voidChangeSenceMode+0x2e>
    1700:	65 c0       	rjmp	.+202    	; 0x17cc <EXTI_voidChangeSenceMode+0xf8>
    1702:	29 85       	ldd	r18, Y+9	; 0x09
    1704:	3a 85       	ldd	r19, Y+10	; 0x0a
    1706:	23 30       	cpi	r18, 0x03	; 3
    1708:	31 05       	cpc	r19, r1
    170a:	09 f4       	brne	.+2      	; 0x170e <EXTI_voidChangeSenceMode+0x3a>
    170c:	b9 c0       	rjmp	.+370    	; 0x1880 <EXTI_voidChangeSenceMode+0x1ac>
    170e:	89 85       	ldd	r24, Y+9	; 0x09
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	09 f0       	breq	.+2      	; 0x1718 <EXTI_voidChangeSenceMode+0x44>
    1716:	d3 c0       	rjmp	.+422    	; 0x18be <EXTI_voidChangeSenceMode+0x1ea>
    {
    case EXTI_INT0:
        switch (Copy_u8SignalSence)
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	38 87       	std	Y+8, r19	; 0x08
    1720:	2f 83       	std	Y+7, r18	; 0x07
    1722:	8f 81       	ldd	r24, Y+7	; 0x07
    1724:	98 85       	ldd	r25, Y+8	; 0x08
    1726:	82 30       	cpi	r24, 0x02	; 2
    1728:	91 05       	cpc	r25, r1
    172a:	29 f1       	breq	.+74     	; 0x1776 <EXTI_voidChangeSenceMode+0xa2>
    172c:	2f 81       	ldd	r18, Y+7	; 0x07
    172e:	38 85       	ldd	r19, Y+8	; 0x08
    1730:	23 30       	cpi	r18, 0x03	; 3
    1732:	31 05       	cpc	r19, r1
    1734:	34 f4       	brge	.+12     	; 0x1742 <EXTI_voidChangeSenceMode+0x6e>
    1736:	8f 81       	ldd	r24, Y+7	; 0x07
    1738:	98 85       	ldd	r25, Y+8	; 0x08
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	61 f0       	breq	.+24     	; 0x1758 <EXTI_voidChangeSenceMode+0x84>
    1740:	be c0       	rjmp	.+380    	; 0x18be <EXTI_voidChangeSenceMode+0x1ea>
    1742:	2f 81       	ldd	r18, Y+7	; 0x07
    1744:	38 85       	ldd	r19, Y+8	; 0x08
    1746:	23 30       	cpi	r18, 0x03	; 3
    1748:	31 05       	cpc	r19, r1
    174a:	19 f1       	breq	.+70     	; 0x1792 <EXTI_voidChangeSenceMode+0xbe>
    174c:	8f 81       	ldd	r24, Y+7	; 0x07
    174e:	98 85       	ldd	r25, Y+8	; 0x08
    1750:	84 30       	cpi	r24, 0x04	; 4
    1752:	91 05       	cpc	r25, r1
    1754:	61 f1       	breq	.+88     	; 0x17ae <EXTI_voidChangeSenceMode+0xda>
    1756:	b3 c0       	rjmp	.+358    	; 0x18be <EXTI_voidChangeSenceMode+0x1ea>
        {
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, MCUCR_ISC00);
    1758:	a5 e5       	ldi	r26, 0x55	; 85
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e5 e5       	ldi	r30, 0x55	; 85
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	81 60       	ori	r24, 0x01	; 1
    1764:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC01);
    1766:	a5 e5       	ldi	r26, 0x55	; 85
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e5 e5       	ldi	r30, 0x55	; 85
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	82 60       	ori	r24, 0x02	; 2
    1772:	8c 93       	st	X, r24
    1774:	a4 c0       	rjmp	.+328    	; 0x18be <EXTI_voidChangeSenceMode+0x1ea>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, MCUCR_ISC00);
    1776:	a5 e5       	ldi	r26, 0x55	; 85
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e5 e5       	ldi	r30, 0x55	; 85
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	8e 7f       	andi	r24, 0xFE	; 254
    1782:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC01);
    1784:	a5 e5       	ldi	r26, 0x55	; 85
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e5 e5       	ldi	r30, 0x55	; 85
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	82 60       	ori	r24, 0x02	; 2
    1790:	8c 93       	st	X, r24
        case EXTI_ON_CHANGE:
            SET_BIT(MCUCR, MCUCR_ISC00);
    1792:	a5 e5       	ldi	r26, 0x55	; 85
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e5 e5       	ldi	r30, 0x55	; 85
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	81 60       	ori	r24, 0x01	; 1
    179e:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC01);
    17a0:	a5 e5       	ldi	r26, 0x55	; 85
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e5 e5       	ldi	r30, 0x55	; 85
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	8d 7f       	andi	r24, 0xFD	; 253
    17ac:	8c 93       	st	X, r24
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, MCUCR_ISC00);
    17ae:	a5 e5       	ldi	r26, 0x55	; 85
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e5 e5       	ldi	r30, 0x55	; 85
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	8e 7f       	andi	r24, 0xFE	; 254
    17ba:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC01);
    17bc:	a5 e5       	ldi	r26, 0x55	; 85
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e5 e5       	ldi	r30, 0x55	; 85
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8d 7f       	andi	r24, 0xFD	; 253
    17c8:	8c 93       	st	X, r24
    17ca:	79 c0       	rjmp	.+242    	; 0x18be <EXTI_voidChangeSenceMode+0x1ea>
        default:
            break; 
        }
        break;
    case EXTI_INT1:
    switch (Copy_u8SignalSence)
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	3e 83       	std	Y+6, r19	; 0x06
    17d4:	2d 83       	std	Y+5, r18	; 0x05
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	91 05       	cpc	r25, r1
    17de:	29 f1       	breq	.+74     	; 0x182a <EXTI_voidChangeSenceMode+0x156>
    17e0:	2d 81       	ldd	r18, Y+5	; 0x05
    17e2:	3e 81       	ldd	r19, Y+6	; 0x06
    17e4:	23 30       	cpi	r18, 0x03	; 3
    17e6:	31 05       	cpc	r19, r1
    17e8:	34 f4       	brge	.+12     	; 0x17f6 <EXTI_voidChangeSenceMode+0x122>
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	9e 81       	ldd	r25, Y+6	; 0x06
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	91 05       	cpc	r25, r1
    17f2:	61 f0       	breq	.+24     	; 0x180c <EXTI_voidChangeSenceMode+0x138>
    17f4:	64 c0       	rjmp	.+200    	; 0x18be <EXTI_voidChangeSenceMode+0x1ea>
    17f6:	2d 81       	ldd	r18, Y+5	; 0x05
    17f8:	3e 81       	ldd	r19, Y+6	; 0x06
    17fa:	23 30       	cpi	r18, 0x03	; 3
    17fc:	31 05       	cpc	r19, r1
    17fe:	19 f1       	breq	.+70     	; 0x1846 <EXTI_voidChangeSenceMode+0x172>
    1800:	8d 81       	ldd	r24, Y+5	; 0x05
    1802:	9e 81       	ldd	r25, Y+6	; 0x06
    1804:	84 30       	cpi	r24, 0x04	; 4
    1806:	91 05       	cpc	r25, r1
    1808:	61 f1       	breq	.+88     	; 0x1862 <EXTI_voidChangeSenceMode+0x18e>
    180a:	59 c0       	rjmp	.+178    	; 0x18be <EXTI_voidChangeSenceMode+0x1ea>
        {
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, MCUCR_ISC10);
    180c:	a5 e5       	ldi	r26, 0x55	; 85
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e5 e5       	ldi	r30, 0x55	; 85
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	84 60       	ori	r24, 0x04	; 4
    1818:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC11);
    181a:	a5 e5       	ldi	r26, 0x55	; 85
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e5 e5       	ldi	r30, 0x55	; 85
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	88 60       	ori	r24, 0x08	; 8
    1826:	8c 93       	st	X, r24
    1828:	4a c0       	rjmp	.+148    	; 0x18be <EXTI_voidChangeSenceMode+0x1ea>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, MCUCR_ISC10);
    182a:	a5 e5       	ldi	r26, 0x55	; 85
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e5 e5       	ldi	r30, 0x55	; 85
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	8b 7f       	andi	r24, 0xFB	; 251
    1836:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC11);
    1838:	a5 e5       	ldi	r26, 0x55	; 85
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e5 e5       	ldi	r30, 0x55	; 85
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	88 60       	ori	r24, 0x08	; 8
    1844:	8c 93       	st	X, r24
        case EXTI_ON_CHANGE:
            SET_BIT(MCUCR, MCUCR_ISC10);
    1846:	a5 e5       	ldi	r26, 0x55	; 85
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e5 e5       	ldi	r30, 0x55	; 85
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	84 60       	ori	r24, 0x04	; 4
    1852:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC11);
    1854:	a5 e5       	ldi	r26, 0x55	; 85
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e5 e5       	ldi	r30, 0x55	; 85
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	87 7f       	andi	r24, 0xF7	; 247
    1860:	8c 93       	st	X, r24
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, MCUCR_ISC10);
    1862:	a5 e5       	ldi	r26, 0x55	; 85
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e5 e5       	ldi	r30, 0x55	; 85
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	8b 7f       	andi	r24, 0xFB	; 251
    186e:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC11);
    1870:	a5 e5       	ldi	r26, 0x55	; 85
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e5 e5       	ldi	r30, 0x55	; 85
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	87 7f       	andi	r24, 0xF7	; 247
    187c:	8c 93       	st	X, r24
    187e:	1f c0       	rjmp	.+62     	; 0x18be <EXTI_voidChangeSenceMode+0x1ea>
            break; 
        }

        break;
    case EXTI_INT2:
        switch (Copy_u8SignalSence)
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	3c 83       	std	Y+4, r19	; 0x04
    1888:	2b 83       	std	Y+3, r18	; 0x03
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	91 05       	cpc	r25, r1
    1892:	31 f0       	breq	.+12     	; 0x18a0 <EXTI_voidChangeSenceMode+0x1cc>
    1894:	2b 81       	ldd	r18, Y+3	; 0x03
    1896:	3c 81       	ldd	r19, Y+4	; 0x04
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	49 f0       	breq	.+18     	; 0x18b0 <EXTI_voidChangeSenceMode+0x1dc>
    189e:	0f c0       	rjmp	.+30     	; 0x18be <EXTI_voidChangeSenceMode+0x1ea>
        {
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, MCUCSR_ISC2);
    18a0:	a4 e5       	ldi	r26, 0x54	; 84
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e4 e5       	ldi	r30, 0x54	; 84
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	80 64       	ori	r24, 0x40	; 64
    18ac:	8c 93       	st	X, r24
    18ae:	07 c0       	rjmp	.+14     	; 0x18be <EXTI_voidChangeSenceMode+0x1ea>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, MCUCSR_ISC2);
    18b0:	a5 e5       	ldi	r26, 0x55	; 85
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e5 e5       	ldi	r30, 0x55	; 85
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	8f 7b       	andi	r24, 0xBF	; 191
    18bc:	8c 93       	st	X, r24
    
    default:
        break;
    }

}
    18be:	2a 96       	adiw	r28, 0x0a	; 10
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <EXTI_voidInterruptContal>:

void EXTI_voidInterruptContal(u8 Copy_u8InterruptNum, u8 Copy_u8InterruptState)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	2a 97       	sbiw	r28, 0x0a	; 10
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8InterruptNum)
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	3a 87       	std	Y+10, r19	; 0x0a
    18f0:	29 87       	std	Y+9, r18	; 0x09
    18f2:	89 85       	ldd	r24, Y+9	; 0x09
    18f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	91 05       	cpc	r25, r1
    18fa:	51 f1       	breq	.+84     	; 0x1950 <EXTI_voidInterruptContal+0x80>
    18fc:	29 85       	ldd	r18, Y+9	; 0x09
    18fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1900:	23 30       	cpi	r18, 0x03	; 3
    1902:	31 05       	cpc	r19, r1
    1904:	09 f4       	brne	.+2      	; 0x1908 <EXTI_voidInterruptContal+0x38>
    1906:	43 c0       	rjmp	.+134    	; 0x198e <EXTI_voidInterruptContal+0xbe>
    1908:	89 85       	ldd	r24, Y+9	; 0x09
    190a:	9a 85       	ldd	r25, Y+10	; 0x0a
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	09 f0       	breq	.+2      	; 0x1912 <EXTI_voidInterruptContal+0x42>
    1910:	5c c0       	rjmp	.+184    	; 0x19ca <EXTI_voidInterruptContal+0xfa>
    {
        case EXTI_INT0:
            switch(Copy_u8InterruptState)
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	38 87       	std	Y+8, r19	; 0x08
    191a:	2f 83       	std	Y+7, r18	; 0x07
    191c:	8f 81       	ldd	r24, Y+7	; 0x07
    191e:	98 85       	ldd	r25, Y+8	; 0x08
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	31 f0       	breq	.+12     	; 0x1930 <EXTI_voidInterruptContal+0x60>
    1924:	2f 81       	ldd	r18, Y+7	; 0x07
    1926:	38 85       	ldd	r19, Y+8	; 0x08
    1928:	21 30       	cpi	r18, 0x01	; 1
    192a:	31 05       	cpc	r19, r1
    192c:	49 f0       	breq	.+18     	; 0x1940 <EXTI_voidInterruptContal+0x70>
    192e:	4d c0       	rjmp	.+154    	; 0x19ca <EXTI_voidInterruptContal+0xfa>
            {
                case EXTI_ENABLE:
                    SET_BIT(GICR, GICR_INT0);
    1930:	ab e5       	ldi	r26, 0x5B	; 91
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	eb e5       	ldi	r30, 0x5B	; 91
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	80 64       	ori	r24, 0x40	; 64
    193c:	8c 93       	st	X, r24
    193e:	45 c0       	rjmp	.+138    	; 0x19ca <EXTI_voidInterruptContal+0xfa>
                    break;
                case EXTI_DISABLE:
                    CLR_BIT(GICR, GICR_INT0);
    1940:	ab e5       	ldi	r26, 0x5B	; 91
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	eb e5       	ldi	r30, 0x5B	; 91
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8f 7b       	andi	r24, 0xBF	; 191
    194c:	8c 93       	st	X, r24
    194e:	3d c0       	rjmp	.+122    	; 0x19ca <EXTI_voidInterruptContal+0xfa>
                    break;
            }
            break;
        case EXTI_INT1:
            switch(Copy_u8InterruptState)
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	3e 83       	std	Y+6, r19	; 0x06
    1958:	2d 83       	std	Y+5, r18	; 0x05
    195a:	8d 81       	ldd	r24, Y+5	; 0x05
    195c:	9e 81       	ldd	r25, Y+6	; 0x06
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	31 f0       	breq	.+12     	; 0x196e <EXTI_voidInterruptContal+0x9e>
    1962:	2d 81       	ldd	r18, Y+5	; 0x05
    1964:	3e 81       	ldd	r19, Y+6	; 0x06
    1966:	21 30       	cpi	r18, 0x01	; 1
    1968:	31 05       	cpc	r19, r1
    196a:	49 f0       	breq	.+18     	; 0x197e <EXTI_voidInterruptContal+0xae>
    196c:	2e c0       	rjmp	.+92     	; 0x19ca <EXTI_voidInterruptContal+0xfa>
            {
                case EXTI_ENABLE:
                    SET_BIT(GICR, GICR_INT1);
    196e:	ab e5       	ldi	r26, 0x5B	; 91
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	eb e5       	ldi	r30, 0x5B	; 91
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 68       	ori	r24, 0x80	; 128
    197a:	8c 93       	st	X, r24
    197c:	26 c0       	rjmp	.+76     	; 0x19ca <EXTI_voidInterruptContal+0xfa>
                    break;
                case EXTI_DISABLE:
                    CLR_BIT(GICR, GICR_INT1);
    197e:	ab e5       	ldi	r26, 0x5B	; 91
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	eb e5       	ldi	r30, 0x5B	; 91
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	8f 77       	andi	r24, 0x7F	; 127
    198a:	8c 93       	st	X, r24
    198c:	1e c0       	rjmp	.+60     	; 0x19ca <EXTI_voidInterruptContal+0xfa>
                    break;
            }
            break;
        case EXTI_INT2:
            switch(Copy_u8InterruptState)
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	3c 83       	std	Y+4, r19	; 0x04
    1996:	2b 83       	std	Y+3, r18	; 0x03
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	31 f0       	breq	.+12     	; 0x19ac <EXTI_voidInterruptContal+0xdc>
    19a0:	2b 81       	ldd	r18, Y+3	; 0x03
    19a2:	3c 81       	ldd	r19, Y+4	; 0x04
    19a4:	21 30       	cpi	r18, 0x01	; 1
    19a6:	31 05       	cpc	r19, r1
    19a8:	49 f0       	breq	.+18     	; 0x19bc <EXTI_voidInterruptContal+0xec>
    19aa:	0f c0       	rjmp	.+30     	; 0x19ca <EXTI_voidInterruptContal+0xfa>
            {
                case EXTI_ENABLE:
                    SET_BIT(GICR, GICR_INT2);
    19ac:	ab e5       	ldi	r26, 0x5B	; 91
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	eb e5       	ldi	r30, 0x5B	; 91
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	80 62       	ori	r24, 0x20	; 32
    19b8:	8c 93       	st	X, r24
    19ba:	07 c0       	rjmp	.+14     	; 0x19ca <EXTI_voidInterruptContal+0xfa>
                    break;
                case EXTI_DISABLE:
                    CLR_BIT(GICR, GICR_INT2);
    19bc:	ab e5       	ldi	r26, 0x5B	; 91
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	eb e5       	ldi	r30, 0x5B	; 91
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8f 7d       	andi	r24, 0xDF	; 223
    19c8:	8c 93       	st	X, r24
            break; 
        default:
        break;
    }

}
    19ca:	2a 96       	adiw	r28, 0x0a	; 10
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <EXTI_voidGetInterruptFlag>:

u8 EXTI_voidGetInterruptFlag(u8 Copy_u8InterruptNum)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <EXTI_voidGetInterruptFlag+0x6>
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <EXTI_voidGetInterruptFlag+0x8>
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8GetFlag = 0;
    19ea:	19 82       	std	Y+1, r1	; 0x01
    switch (Copy_u8InterruptNum)
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	3c 83       	std	Y+4, r19	; 0x04
    19f4:	2b 83       	std	Y+3, r18	; 0x03
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	9c 81       	ldd	r25, Y+4	; 0x04
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	91 05       	cpc	r25, r1
    19fe:	99 f0       	breq	.+38     	; 0x1a26 <EXTI_voidGetInterruptFlag+0x4a>
    1a00:	2b 81       	ldd	r18, Y+3	; 0x03
    1a02:	3c 81       	ldd	r19, Y+4	; 0x04
    1a04:	23 30       	cpi	r18, 0x03	; 3
    1a06:	31 05       	cpc	r19, r1
    1a08:	b1 f0       	breq	.+44     	; 0x1a36 <EXTI_voidGetInterruptFlag+0x5a>
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	d1 f4       	brne	.+52     	; 0x1a46 <EXTI_voidGetInterruptFlag+0x6a>
    {
    case EXTI_INT0:
        Local_u8GetFlag = GET_BIT(GIFR, GICR_INT0);
    1a12:	ea e5       	ldi	r30, 0x5A	; 90
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	82 95       	swap	r24
    1a1a:	86 95       	lsr	r24
    1a1c:	86 95       	lsr	r24
    1a1e:	83 70       	andi	r24, 0x03	; 3
    1a20:	81 70       	andi	r24, 0x01	; 1
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	10 c0       	rjmp	.+32     	; 0x1a46 <EXTI_voidGetInterruptFlag+0x6a>
        break;
    case EXTI_INT1:
        Local_u8GetFlag = GET_BIT(GIFR, GICR_INT1);
    1a26:	ea e5       	ldi	r30, 0x5A	; 90
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	88 1f       	adc	r24, r24
    1a2e:	88 27       	eor	r24, r24
    1a30:	88 1f       	adc	r24, r24
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	08 c0       	rjmp	.+16     	; 0x1a46 <EXTI_voidGetInterruptFlag+0x6a>
        break;
    case EXTI_INT2:
        Local_u8GetFlag = GET_BIT(GIFR, GICR_INT2);
    1a36:	ea e5       	ldi	r30, 0x5A	; 90
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	82 95       	swap	r24
    1a3e:	86 95       	lsr	r24
    1a40:	87 70       	andi	r24, 0x07	; 7
    1a42:	81 70       	andi	r24, 0x01	; 1
    1a44:	89 83       	std	Y+1, r24	; 0x01
        break;

    default:
        break;
    }
    return (Local_u8GetFlag);
    1a46:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <EXTI_voidSetCallBack>:
/* Solve The Problem Of The Arcitechture*/
void EXTI_voidSetCallBack(void(*NotificationFunction)(void))
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <EXTI_voidSetCallBack+0x6>
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01
    /*The Pointer That Shard At All Function And Store The Adress Of The Local pointer TO Function*/
    EXTI_INT0_Function =  NotificationFunction;
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	90 93 de 01 	sts	0x01DE, r25
    1a6c:	80 93 dd 01 	sts	0x01DD, r24
}
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <__vector_1>:
/*
 * ISR For INT0
 */
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    1a7a:	1f 92       	push	r1
    1a7c:	0f 92       	push	r0
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	0f 92       	push	r0
    1a82:	11 24       	eor	r1, r1
    1a84:	2f 93       	push	r18
    1a86:	3f 93       	push	r19
    1a88:	4f 93       	push	r20
    1a8a:	5f 93       	push	r21
    1a8c:	6f 93       	push	r22
    1a8e:	7f 93       	push	r23
    1a90:	8f 93       	push	r24
    1a92:	9f 93       	push	r25
    1a94:	af 93       	push	r26
    1a96:	bf 93       	push	r27
    1a98:	ef 93       	push	r30
    1a9a:	ff 93       	push	r31
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    /*Excute The Application Function*/
    //Guard From The Garbish Value Of ISR
    if(EXTI_INT0_Function != NULL_POINTER)
    1aa4:	80 91 dd 01 	lds	r24, 0x01DD
    1aa8:	90 91 de 01 	lds	r25, 0x01DE
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	29 f0       	breq	.+10     	; 0x1aba <__vector_1+0x40>
    {
        EXTI_INT0_Function();
    1ab0:	e0 91 dd 01 	lds	r30, 0x01DD
    1ab4:	f0 91 de 01 	lds	r31, 0x01DE
    1ab8:	09 95       	icall
    }
    else
    {
        //Do Noting
    }
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	ff 91       	pop	r31
    1ac0:	ef 91       	pop	r30
    1ac2:	bf 91       	pop	r27
    1ac4:	af 91       	pop	r26
    1ac6:	9f 91       	pop	r25
    1ac8:	8f 91       	pop	r24
    1aca:	7f 91       	pop	r23
    1acc:	6f 91       	pop	r22
    1ace:	5f 91       	pop	r21
    1ad0:	4f 91       	pop	r20
    1ad2:	3f 91       	pop	r19
    1ad4:	2f 91       	pop	r18
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	0f 90       	pop	r0
    1adc:	1f 90       	pop	r1
    1ade:	18 95       	reti

00001ae0 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidSetPinDirection (u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <DIO_voidSetPinDirection+0x6>
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <DIO_voidSetPinDirection+0x8>
    1ae8:	0f 92       	push	r0
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	6a 83       	std	Y+2, r22	; 0x02
    1af2:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_u8PortName <= PORTD && Copy_u8PinNumber <= PIN7 && Copy_u8PinValue <= OUTPUT)
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	84 30       	cpi	r24, 0x04	; 4
    1af8:	08 f0       	brcs	.+2      	; 0x1afc <DIO_voidSetPinDirection+0x1c>
    1afa:	e8 c0       	rjmp	.+464    	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	88 30       	cpi	r24, 0x08	; 8
    1b00:	08 f0       	brcs	.+2      	; 0x1b04 <DIO_voidSetPinDirection+0x24>
    1b02:	e4 c0       	rjmp	.+456    	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	82 30       	cpi	r24, 0x02	; 2
    1b08:	08 f0       	brcs	.+2      	; 0x1b0c <DIO_voidSetPinDirection+0x2c>
    1b0a:	e0 c0       	rjmp	.+448    	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
    {
        switch (Copy_u8PortName)
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	3d 83       	std	Y+5, r19	; 0x05
    1b14:	2c 83       	std	Y+4, r18	; 0x04
    1b16:	8c 81       	ldd	r24, Y+4	; 0x04
    1b18:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <DIO_voidSetPinDirection+0x42>
    1b20:	47 c0       	rjmp	.+142    	; 0x1bb0 <DIO_voidSetPinDirection+0xd0>
    1b22:	2c 81       	ldd	r18, Y+4	; 0x04
    1b24:	3d 81       	ldd	r19, Y+5	; 0x05
    1b26:	22 30       	cpi	r18, 0x02	; 2
    1b28:	31 05       	cpc	r19, r1
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <DIO_voidSetPinDirection+0x56>
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	71 f0       	breq	.+28     	; 0x1b50 <DIO_voidSetPinDirection+0x70>
    1b34:	cb c0       	rjmp	.+406    	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
    1b36:	2c 81       	ldd	r18, Y+4	; 0x04
    1b38:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3a:	22 30       	cpi	r18, 0x02	; 2
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <DIO_voidSetPinDirection+0x62>
    1b40:	67 c0       	rjmp	.+206    	; 0x1c10 <DIO_voidSetPinDirection+0x130>
    1b42:	8c 81       	ldd	r24, Y+4	; 0x04
    1b44:	9d 81       	ldd	r25, Y+5	; 0x05
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	91 05       	cpc	r25, r1
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <DIO_voidSetPinDirection+0x6e>
    1b4c:	91 c0       	rjmp	.+290    	; 0x1c70 <DIO_voidSetPinDirection+0x190>
    1b4e:	be c0       	rjmp	.+380    	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
        {
            case PORTA:
                if(Copy_u8PinValue == OUTPUT)
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	a1 f4       	brne	.+40     	; 0x1b7e <DIO_voidSetPinDirection+0x9e>
                {
                    SET_BIT(DIO_DDRA, Copy_u8PinNumber);
    1b56:	aa e3       	ldi	r26, 0x3A	; 58
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	ea e3       	ldi	r30, 0x3A	; 58
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	02 2e       	mov	r0, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <DIO_voidSetPinDirection+0x94>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <DIO_voidSetPinDirection+0x90>
    1b78:	84 2b       	or	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	a7 c0       	rjmp	.+334    	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
                }
                else if(Copy_u8PinValue == INPUT)
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	88 23       	and	r24, r24
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <DIO_voidSetPinDirection+0xa6>
    1b84:	a3 c0       	rjmp	.+326    	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
                {
                    CLR_BIT(DIO_DDRA, Copy_u8PinNumber);
    1b86:	aa e3       	ldi	r26, 0x3A	; 58
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	ea e3       	ldi	r30, 0x3A	; 58
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 2e       	mov	r0, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <DIO_voidSetPinDirection+0xc4>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <DIO_voidSetPinDirection+0xc0>
    1ba8:	80 95       	com	r24
    1baa:	84 23       	and	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	8e c0       	rjmp	.+284    	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
                {

                }
                break;
            case PORTB:
                if(Copy_u8PinValue == OUTPUT)
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	a1 f4       	brne	.+40     	; 0x1bde <DIO_voidSetPinDirection+0xfe>
                {
                    SET_BIT(DIO_DDRB, Copy_u8PinNumber);
    1bb6:	a7 e3       	ldi	r26, 0x37	; 55
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e7 e3       	ldi	r30, 0x37	; 55
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	48 2f       	mov	r20, r24
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 2e       	mov	r0, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <DIO_voidSetPinDirection+0xf4>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	0a 94       	dec	r0
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <DIO_voidSetPinDirection+0xf0>
    1bd8:	84 2b       	or	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	77 c0       	rjmp	.+238    	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
                }
                else if(Copy_u8PinValue == INPUT)
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	88 23       	and	r24, r24
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <DIO_voidSetPinDirection+0x106>
    1be4:	73 c0       	rjmp	.+230    	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
                {
                    CLR_BIT(DIO_DDRB, Copy_u8PinNumber);
    1be6:	a7 e3       	ldi	r26, 0x37	; 55
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e7 e3       	ldi	r30, 0x37	; 55
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 2e       	mov	r0, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <DIO_voidSetPinDirection+0x124>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0a 94       	dec	r0
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <DIO_voidSetPinDirection+0x120>
    1c08:	80 95       	com	r24
    1c0a:	84 23       	and	r24, r20
    1c0c:	8c 93       	st	X, r24
    1c0e:	5e c0       	rjmp	.+188    	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
                {

                }
                break;
            case PORTC:
                if(Copy_u8PinValue == OUTPUT)
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	a1 f4       	brne	.+40     	; 0x1c3e <DIO_voidSetPinDirection+0x15e>
                {
                    SET_BIT(DIO_DDRC, Copy_u8PinNumber);
    1c16:	a4 e3       	ldi	r26, 0x34	; 52
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e4 e3       	ldi	r30, 0x34	; 52
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 2e       	mov	r0, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <DIO_voidSetPinDirection+0x154>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	0a 94       	dec	r0
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <DIO_voidSetPinDirection+0x150>
    1c38:	84 2b       	or	r24, r20
    1c3a:	8c 93       	st	X, r24
    1c3c:	47 c0       	rjmp	.+142    	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
                }
                else if(Copy_u8PinValue == INPUT)
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	88 23       	and	r24, r24
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <DIO_voidSetPinDirection+0x166>
    1c44:	43 c0       	rjmp	.+134    	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
                {
                    CLR_BIT(DIO_DDRC, Copy_u8PinNumber);
    1c46:	a4 e3       	ldi	r26, 0x34	; 52
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e4 e3       	ldi	r30, 0x34	; 52
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	48 2f       	mov	r20, r24
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	02 2e       	mov	r0, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <DIO_voidSetPinDirection+0x184>
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	0a 94       	dec	r0
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <DIO_voidSetPinDirection+0x180>
    1c68:	80 95       	com	r24
    1c6a:	84 23       	and	r24, r20
    1c6c:	8c 93       	st	X, r24
    1c6e:	2e c0       	rjmp	.+92     	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
                {

                }
                break;
            case PORTD:
                if(Copy_u8PinValue == OUTPUT)
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	a1 f4       	brne	.+40     	; 0x1c9e <DIO_voidSetPinDirection+0x1be>
                {
                    SET_BIT(DIO_DDRD, Copy_u8PinNumber);
    1c76:	a1 e3       	ldi	r26, 0x31	; 49
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e1 e3       	ldi	r30, 0x31	; 49
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	48 2f       	mov	r20, r24
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	02 2e       	mov	r0, r18
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <DIO_voidSetPinDirection+0x1b4>
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	0a 94       	dec	r0
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <DIO_voidSetPinDirection+0x1b0>
    1c98:	84 2b       	or	r24, r20
    1c9a:	8c 93       	st	X, r24
    1c9c:	17 c0       	rjmp	.+46     	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
                }
                else if(Copy_u8PinValue == INPUT)
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	88 23       	and	r24, r24
    1ca2:	a1 f4       	brne	.+40     	; 0x1ccc <DIO_voidSetPinDirection+0x1ec>
                {
                    CLR_BIT(DIO_DDRD, Copy_u8PinNumber);
    1ca4:	a1 e3       	ldi	r26, 0x31	; 49
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e1 e3       	ldi	r30, 0x31	; 49
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	48 2f       	mov	r20, r24
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	02 2e       	mov	r0, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <DIO_voidSetPinDirection+0x1e2>
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	0a 94       	dec	r0
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <DIO_voidSetPinDirection+0x1de>
    1cc6:	80 95       	com	r24
    1cc8:	84 23       	and	r24, r20
    1cca:	8c 93       	st	X, r24
    }
    else
    {

    }
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue)
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <DIO_voidSetPinValue+0x6>
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <DIO_voidSetPinValue+0x8>
    1ce4:	0f 92       	push	r0
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	6a 83       	std	Y+2, r22	; 0x02
    1cee:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_u8PortName <= PORTD && Copy_u8PinNumber <= PIN7 && Copy_u8PinValue <= HIGH)
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	84 30       	cpi	r24, 0x04	; 4
    1cf4:	08 f0       	brcs	.+2      	; 0x1cf8 <DIO_voidSetPinValue+0x1c>
    1cf6:	e8 c0       	rjmp	.+464    	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	88 30       	cpi	r24, 0x08	; 8
    1cfc:	08 f0       	brcs	.+2      	; 0x1d00 <DIO_voidSetPinValue+0x24>
    1cfe:	e4 c0       	rjmp	.+456    	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	82 30       	cpi	r24, 0x02	; 2
    1d04:	08 f0       	brcs	.+2      	; 0x1d08 <DIO_voidSetPinValue+0x2c>
    1d06:	e0 c0       	rjmp	.+448    	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>
    {
        switch(Copy_u8PortName)
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	3d 83       	std	Y+5, r19	; 0x05
    1d10:	2c 83       	std	Y+4, r18	; 0x04
    1d12:	8c 81       	ldd	r24, Y+4	; 0x04
    1d14:	9d 81       	ldd	r25, Y+5	; 0x05
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	91 05       	cpc	r25, r1
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <DIO_voidSetPinValue+0x42>
    1d1c:	47 c0       	rjmp	.+142    	; 0x1dac <DIO_voidSetPinValue+0xd0>
    1d1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d20:	3d 81       	ldd	r19, Y+5	; 0x05
    1d22:	22 30       	cpi	r18, 0x02	; 2
    1d24:	31 05       	cpc	r19, r1
    1d26:	2c f4       	brge	.+10     	; 0x1d32 <DIO_voidSetPinValue+0x56>
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	71 f0       	breq	.+28     	; 0x1d4c <DIO_voidSetPinValue+0x70>
    1d30:	cb c0       	rjmp	.+406    	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>
    1d32:	2c 81       	ldd	r18, Y+4	; 0x04
    1d34:	3d 81       	ldd	r19, Y+5	; 0x05
    1d36:	22 30       	cpi	r18, 0x02	; 2
    1d38:	31 05       	cpc	r19, r1
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <DIO_voidSetPinValue+0x62>
    1d3c:	67 c0       	rjmp	.+206    	; 0x1e0c <DIO_voidSetPinValue+0x130>
    1d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d40:	9d 81       	ldd	r25, Y+5	; 0x05
    1d42:	83 30       	cpi	r24, 0x03	; 3
    1d44:	91 05       	cpc	r25, r1
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <DIO_voidSetPinValue+0x6e>
    1d48:	91 c0       	rjmp	.+290    	; 0x1e6c <DIO_voidSetPinValue+0x190>
    1d4a:	be c0       	rjmp	.+380    	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>
        {
            case PORTA:
            if(Copy_u8PinValue == HIGH)
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	81 30       	cpi	r24, 0x01	; 1
    1d50:	a1 f4       	brne	.+40     	; 0x1d7a <DIO_voidSetPinValue+0x9e>
            {
                SET_BIT(DIO_PORTA, Copy_u8PinNumber);
    1d52:	ab e3       	ldi	r26, 0x3B	; 59
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	eb e3       	ldi	r30, 0x3B	; 59
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	48 2f       	mov	r20, r24
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 2e       	mov	r0, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <DIO_voidSetPinValue+0x94>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <DIO_voidSetPinValue+0x90>
    1d74:	84 2b       	or	r24, r20
    1d76:	8c 93       	st	X, r24
    1d78:	a7 c0       	rjmp	.+334    	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>
            }
            else if(Copy_u8PinValue == LOW)
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	88 23       	and	r24, r24
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <DIO_voidSetPinValue+0xa6>
    1d80:	a3 c0       	rjmp	.+326    	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>
            {
                CLR_BIT(DIO_PORTA, Copy_u8PinNumber);
    1d82:	ab e3       	ldi	r26, 0x3B	; 59
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	eb e3       	ldi	r30, 0x3B	; 59
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	48 2f       	mov	r20, r24
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	02 2e       	mov	r0, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <DIO_voidSetPinValue+0xc4>
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	0a 94       	dec	r0
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <DIO_voidSetPinValue+0xc0>
    1da4:	80 95       	com	r24
    1da6:	84 23       	and	r24, r20
    1da8:	8c 93       	st	X, r24
    1daa:	8e c0       	rjmp	.+284    	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>

            }
            break;

            case PORTB:
            if(Copy_u8PinValue == HIGH)
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	a1 f4       	brne	.+40     	; 0x1dda <DIO_voidSetPinValue+0xfe>
            {
                SET_BIT(DIO_PORTB, Copy_u8PinNumber);
    1db2:	a8 e3       	ldi	r26, 0x38	; 56
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e8 e3       	ldi	r30, 0x38	; 56
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 2e       	mov	r0, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_voidSetPinValue+0xf4>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <DIO_voidSetPinValue+0xf0>
    1dd4:	84 2b       	or	r24, r20
    1dd6:	8c 93       	st	X, r24
    1dd8:	77 c0       	rjmp	.+238    	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>
            }
            else if(Copy_u8PinValue == LOW)
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	88 23       	and	r24, r24
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <DIO_voidSetPinValue+0x106>
    1de0:	73 c0       	rjmp	.+230    	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>
            {
                CLR_BIT(DIO_PORTB, Copy_u8PinNumber);
    1de2:	a8 e3       	ldi	r26, 0x38	; 56
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e8 e3       	ldi	r30, 0x38	; 56
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	48 2f       	mov	r20, r24
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	02 2e       	mov	r0, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <DIO_voidSetPinValue+0x124>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	0a 94       	dec	r0
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <DIO_voidSetPinValue+0x120>
    1e04:	80 95       	com	r24
    1e06:	84 23       	and	r24, r20
    1e08:	8c 93       	st	X, r24
    1e0a:	5e c0       	rjmp	.+188    	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>

            }
            break;

            case PORTC:
            if(Copy_u8PinValue == HIGH)
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	a1 f4       	brne	.+40     	; 0x1e3a <DIO_voidSetPinValue+0x15e>
            {
                SET_BIT(DIO_PORTC, Copy_u8PinNumber);
    1e12:	a5 e3       	ldi	r26, 0x35	; 53
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e5 e3       	ldi	r30, 0x35	; 53
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	02 2e       	mov	r0, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <DIO_voidSetPinValue+0x154>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	0a 94       	dec	r0
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <DIO_voidSetPinValue+0x150>
    1e34:	84 2b       	or	r24, r20
    1e36:	8c 93       	st	X, r24
    1e38:	47 c0       	rjmp	.+142    	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>
            }
            else if(Copy_u8PinValue == LOW)
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	88 23       	and	r24, r24
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <DIO_voidSetPinValue+0x166>
    1e40:	43 c0       	rjmp	.+134    	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>
            {
                CLR_BIT(DIO_PORTC, Copy_u8PinNumber);
    1e42:	a5 e3       	ldi	r26, 0x35	; 53
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e5 e3       	ldi	r30, 0x35	; 53
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	48 2f       	mov	r20, r24
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	02 2e       	mov	r0, r18
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <DIO_voidSetPinValue+0x184>
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	0a 94       	dec	r0
    1e62:	e2 f7       	brpl	.-8      	; 0x1e5c <DIO_voidSetPinValue+0x180>
    1e64:	80 95       	com	r24
    1e66:	84 23       	and	r24, r20
    1e68:	8c 93       	st	X, r24
    1e6a:	2e c0       	rjmp	.+92     	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>

            }
            break;

            case PORTD:
            if(Copy_u8PinValue == HIGH)
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	a1 f4       	brne	.+40     	; 0x1e9a <DIO_voidSetPinValue+0x1be>
            {
                SET_BIT(DIO_PORTD, Copy_u8PinNumber);
    1e72:	a2 e3       	ldi	r26, 0x32	; 50
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e2 e3       	ldi	r30, 0x32	; 50
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	48 2f       	mov	r20, r24
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	02 2e       	mov	r0, r18
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <DIO_voidSetPinValue+0x1b4>
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	0a 94       	dec	r0
    1e92:	e2 f7       	brpl	.-8      	; 0x1e8c <DIO_voidSetPinValue+0x1b0>
    1e94:	84 2b       	or	r24, r20
    1e96:	8c 93       	st	X, r24
    1e98:	17 c0       	rjmp	.+46     	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>
            }
            else if(Copy_u8PinValue == LOW)
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	88 23       	and	r24, r24
    1e9e:	a1 f4       	brne	.+40     	; 0x1ec8 <DIO_voidSetPinValue+0x1ec>
            {
                CLR_BIT(DIO_PORTD, Copy_u8PinNumber);
    1ea0:	a2 e3       	ldi	r26, 0x32	; 50
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e2 e3       	ldi	r30, 0x32	; 50
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	48 2f       	mov	r20, r24
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 2e       	mov	r0, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <DIO_voidSetPinValue+0x1e2>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	0a 94       	dec	r0
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <DIO_voidSetPinValue+0x1de>
    1ec2:	80 95       	com	r24
    1ec4:	84 23       	and	r24, r20
    1ec6:	8c 93       	st	X, r24
    }
    else
    {

    }
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <DIO_voidSetPinPullUp>:

void DIO_voidSetPinPullUp (u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PullupState)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	2d 97       	sbiw	r28, 0x0d	; 13
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	6a 83       	std	Y+2, r22	; 0x02
    1ef0:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_u8PortName <= PORTD && Copy_u8PinNumber <= PIN7 && Copy_u8PullupState <= PULLUP)
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	84 30       	cpi	r24, 0x04	; 4
    1ef6:	08 f0       	brcs	.+2      	; 0x1efa <DIO_voidSetPinPullUp+0x22>
    1ef8:	54 c1       	rjmp	.+680    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	88 30       	cpi	r24, 0x08	; 8
    1efe:	08 f0       	brcs	.+2      	; 0x1f02 <DIO_voidSetPinPullUp+0x2a>
    1f00:	50 c1       	rjmp	.+672    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	82 30       	cpi	r24, 0x02	; 2
    1f06:	08 f0       	brcs	.+2      	; 0x1f0a <DIO_voidSetPinPullUp+0x32>
    1f08:	4c c1       	rjmp	.+664    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
    {
        switch (Copy_u8PortName)
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	3d 87       	std	Y+13, r19	; 0x0d
    1f12:	2c 87       	std	Y+12, r18	; 0x0c
    1f14:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f16:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <DIO_voidSetPinPullUp+0x48>
    1f1e:	62 c0       	rjmp	.+196    	; 0x1fe4 <DIO_voidSetPinPullUp+0x10c>
    1f20:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f22:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f24:	22 30       	cpi	r18, 0x02	; 2
    1f26:	31 05       	cpc	r19, r1
    1f28:	2c f4       	brge	.+10     	; 0x1f34 <DIO_voidSetPinPullUp+0x5c>
    1f2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	71 f0       	breq	.+28     	; 0x1f4e <DIO_voidSetPinPullUp+0x76>
    1f32:	37 c1       	rjmp	.+622    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
    1f34:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f36:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f38:	22 30       	cpi	r18, 0x02	; 2
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <DIO_voidSetPinPullUp+0x68>
    1f3e:	9d c0       	rjmp	.+314    	; 0x207a <DIO_voidSetPinPullUp+0x1a2>
    1f40:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f42:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f44:	83 30       	cpi	r24, 0x03	; 3
    1f46:	91 05       	cpc	r25, r1
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <DIO_voidSetPinPullUp+0x74>
    1f4a:	e2 c0       	rjmp	.+452    	; 0x2110 <DIO_voidSetPinPullUp+0x238>
    1f4c:	2a c1       	rjmp	.+596    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
        {
            case PORTA:
                switch (Copy_u8PullupState)
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	3b 87       	std	Y+11, r19	; 0x0b
    1f56:	2a 87       	std	Y+10, r18	; 0x0a
    1f58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	69 f1       	breq	.+90     	; 0x1fba <DIO_voidSetPinPullUp+0xe2>
    1f60:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f62:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f64:	21 30       	cpi	r18, 0x01	; 1
    1f66:	31 05       	cpc	r19, r1
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <DIO_voidSetPinPullUp+0x94>
    1f6a:	1b c1       	rjmp	.+566    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
                {
                    case PULLUP:
                        CLR_BIT(DIO_DDRA, Copy_u8PinNumber);
    1f6c:	aa e3       	ldi	r26, 0x3A	; 58
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	ea e3       	ldi	r30, 0x3A	; 58
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	48 2f       	mov	r20, r24
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <DIO_voidSetPinPullUp+0xb0>
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	2a 95       	dec	r18
    1f8a:	e2 f7       	brpl	.-8      	; 0x1f84 <DIO_voidSetPinPullUp+0xac>
    1f8c:	80 95       	com	r24
    1f8e:	84 23       	and	r24, r20
    1f90:	8c 93       	st	X, r24
                        SET_BIT(DIO_PORTA, Copy_u8PinNumber);
    1f92:	ab e3       	ldi	r26, 0x3B	; 59
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	eb e3       	ldi	r30, 0x3B	; 59
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	48 2f       	mov	r20, r24
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	02 2e       	mov	r0, r18
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <DIO_voidSetPinPullUp+0xd8>
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	0a 94       	dec	r0
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <DIO_voidSetPinPullUp+0xd4>
    1fb4:	84 2b       	or	r24, r20
    1fb6:	8c 93       	st	X, r24
    1fb8:	f4 c0       	rjmp	.+488    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
                    break;

                    case NOPULLUP:
                        CLR_BIT(DIO_PORTA, Copy_u8PinNumber);
    1fba:	ab e3       	ldi	r26, 0x3B	; 59
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	eb e3       	ldi	r30, 0x3B	; 59
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	48 2f       	mov	r20, r24
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	02 2e       	mov	r0, r18
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <DIO_voidSetPinPullUp+0x100>
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	0a 94       	dec	r0
    1fda:	e2 f7       	brpl	.-8      	; 0x1fd4 <DIO_voidSetPinPullUp+0xfc>
    1fdc:	80 95       	com	r24
    1fde:	84 23       	and	r24, r20
    1fe0:	8c 93       	st	X, r24
    1fe2:	df c0       	rjmp	.+446    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
                    break;
                }
            break;

            case PORTB:
                switch (Copy_u8PullupState)
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	39 87       	std	Y+9, r19	; 0x09
    1fec:	28 87       	std	Y+8, r18	; 0x08
    1fee:	88 85       	ldd	r24, Y+8	; 0x08
    1ff0:	99 85       	ldd	r25, Y+9	; 0x09
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	69 f1       	breq	.+90     	; 0x2050 <DIO_voidSetPinPullUp+0x178>
    1ff6:	28 85       	ldd	r18, Y+8	; 0x08
    1ff8:	39 85       	ldd	r19, Y+9	; 0x09
    1ffa:	21 30       	cpi	r18, 0x01	; 1
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <DIO_voidSetPinPullUp+0x12a>
    2000:	d0 c0       	rjmp	.+416    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
                {
                    case PULLUP:
                        CLR_BIT(DIO_DDRB, Copy_u8PinNumber);
    2002:	a7 e3       	ldi	r26, 0x37	; 55
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e7 e3       	ldi	r30, 0x37	; 55
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	48 2f       	mov	r20, r24
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	02 c0       	rjmp	.+4      	; 0x201e <DIO_voidSetPinPullUp+0x146>
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	2a 95       	dec	r18
    2020:	e2 f7       	brpl	.-8      	; 0x201a <DIO_voidSetPinPullUp+0x142>
    2022:	80 95       	com	r24
    2024:	84 23       	and	r24, r20
    2026:	8c 93       	st	X, r24
                        SET_BIT(DIO_PORTB, Copy_u8PinNumber);
    2028:	a8 e3       	ldi	r26, 0x38	; 56
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e8 e3       	ldi	r30, 0x38	; 56
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	48 2f       	mov	r20, r24
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	02 2e       	mov	r0, r18
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <DIO_voidSetPinPullUp+0x16e>
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	0a 94       	dec	r0
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <DIO_voidSetPinPullUp+0x16a>
    204a:	84 2b       	or	r24, r20
    204c:	8c 93       	st	X, r24
    204e:	a9 c0       	rjmp	.+338    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
                    break;

                    case NOPULLUP:
                        CLR_BIT(DIO_PORTB, Copy_u8PinNumber);
    2050:	a8 e3       	ldi	r26, 0x38	; 56
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e8 e3       	ldi	r30, 0x38	; 56
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	48 2f       	mov	r20, r24
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	02 2e       	mov	r0, r18
    2068:	02 c0       	rjmp	.+4      	; 0x206e <DIO_voidSetPinPullUp+0x196>
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	0a 94       	dec	r0
    2070:	e2 f7       	brpl	.-8      	; 0x206a <DIO_voidSetPinPullUp+0x192>
    2072:	80 95       	com	r24
    2074:	84 23       	and	r24, r20
    2076:	8c 93       	st	X, r24
    2078:	94 c0       	rjmp	.+296    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
                    break;
                }
            break;

            case PORTC:
                switch (Copy_u8PullupState)
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	3f 83       	std	Y+7, r19	; 0x07
    2082:	2e 83       	std	Y+6, r18	; 0x06
    2084:	8e 81       	ldd	r24, Y+6	; 0x06
    2086:	9f 81       	ldd	r25, Y+7	; 0x07
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	69 f1       	breq	.+90     	; 0x20e6 <DIO_voidSetPinPullUp+0x20e>
    208c:	2e 81       	ldd	r18, Y+6	; 0x06
    208e:	3f 81       	ldd	r19, Y+7	; 0x07
    2090:	21 30       	cpi	r18, 0x01	; 1
    2092:	31 05       	cpc	r19, r1
    2094:	09 f0       	breq	.+2      	; 0x2098 <DIO_voidSetPinPullUp+0x1c0>
    2096:	85 c0       	rjmp	.+266    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
                {
                    case PULLUP:
                        CLR_BIT(DIO_DDRC, Copy_u8PinNumber);
    2098:	a4 e3       	ldi	r26, 0x34	; 52
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e4 e3       	ldi	r30, 0x34	; 52
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	48 2f       	mov	r20, r24
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <DIO_voidSetPinPullUp+0x1dc>
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	2a 95       	dec	r18
    20b6:	e2 f7       	brpl	.-8      	; 0x20b0 <DIO_voidSetPinPullUp+0x1d8>
    20b8:	80 95       	com	r24
    20ba:	84 23       	and	r24, r20
    20bc:	8c 93       	st	X, r24
                        SET_BIT(DIO_PORTC, Copy_u8PinNumber);
    20be:	a5 e3       	ldi	r26, 0x35	; 53
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e5 e3       	ldi	r30, 0x35	; 53
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	48 2f       	mov	r20, r24
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	02 2e       	mov	r0, r18
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <DIO_voidSetPinPullUp+0x204>
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	0a 94       	dec	r0
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <DIO_voidSetPinPullUp+0x200>
    20e0:	84 2b       	or	r24, r20
    20e2:	8c 93       	st	X, r24
    20e4:	5e c0       	rjmp	.+188    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
                    break;

                    case NOPULLUP:
                        CLR_BIT(DIO_PORTC, Copy_u8PinNumber);
    20e6:	a5 e3       	ldi	r26, 0x35	; 53
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e5 e3       	ldi	r30, 0x35	; 53
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	48 2f       	mov	r20, r24
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	02 2e       	mov	r0, r18
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <DIO_voidSetPinPullUp+0x22c>
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	0a 94       	dec	r0
    2106:	e2 f7       	brpl	.-8      	; 0x2100 <DIO_voidSetPinPullUp+0x228>
    2108:	80 95       	com	r24
    210a:	84 23       	and	r24, r20
    210c:	8c 93       	st	X, r24
    210e:	49 c0       	rjmp	.+146    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
                    break;
                }
            break;

            case PORTD:
                switch (Copy_u8PullupState)
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	3d 83       	std	Y+5, r19	; 0x05
    2118:	2c 83       	std	Y+4, r18	; 0x04
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	9d 81       	ldd	r25, Y+5	; 0x05
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	61 f1       	breq	.+88     	; 0x217a <DIO_voidSetPinPullUp+0x2a2>
    2122:	2c 81       	ldd	r18, Y+4	; 0x04
    2124:	3d 81       	ldd	r19, Y+5	; 0x05
    2126:	21 30       	cpi	r18, 0x01	; 1
    2128:	31 05       	cpc	r19, r1
    212a:	d9 f5       	brne	.+118    	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
                {
                    case PULLUP:
                        CLR_BIT(DIO_DDRD, Copy_u8PinNumber);
    212c:	a1 e3       	ldi	r26, 0x31	; 49
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e1 e3       	ldi	r30, 0x31	; 49
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	48 2f       	mov	r20, r24
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <DIO_voidSetPinPullUp+0x270>
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	2a 95       	dec	r18
    214a:	e2 f7       	brpl	.-8      	; 0x2144 <DIO_voidSetPinPullUp+0x26c>
    214c:	80 95       	com	r24
    214e:	84 23       	and	r24, r20
    2150:	8c 93       	st	X, r24
                        SET_BIT(DIO_PORTD, Copy_u8PinNumber);
    2152:	a2 e3       	ldi	r26, 0x32	; 50
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e2 e3       	ldi	r30, 0x32	; 50
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	48 2f       	mov	r20, r24
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	02 2e       	mov	r0, r18
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <DIO_voidSetPinPullUp+0x298>
    216c:	88 0f       	add	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	0a 94       	dec	r0
    2172:	e2 f7       	brpl	.-8      	; 0x216c <DIO_voidSetPinPullUp+0x294>
    2174:	84 2b       	or	r24, r20
    2176:	8c 93       	st	X, r24
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <DIO_voidSetPinPullUp+0x2ca>
                    break;

                    case NOPULLUP:
                        CLR_BIT(DIO_PORTD, Copy_u8PinNumber);
    217a:	a2 e3       	ldi	r26, 0x32	; 50
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e2 e3       	ldi	r30, 0x32	; 50
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	48 2f       	mov	r20, r24
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	02 2e       	mov	r0, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <DIO_voidSetPinPullUp+0x2c0>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	0a 94       	dec	r0
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <DIO_voidSetPinPullUp+0x2bc>
    219c:	80 95       	com	r24
    219e:	84 23       	and	r24, r20
    21a0:	8c 93       	st	X, r24
    }
    else
    {

    }
}
    21a2:	2d 96       	adiw	r28, 0x0d	; 13
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PortName, u8 Copy_u8PinNumber)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <DIO_u8GetPinValue+0x6>
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <DIO_u8GetPinValue+0x8>
    21bc:	0f 92       	push	r0
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	8a 83       	std	Y+2, r24	; 0x02
    21c4:	6b 83       	std	Y+3, r22	; 0x03
    
	u8 DIO_u8StorePinValue = 0;
    21c6:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u8PortName <= PORTD && Copy_u8PinNumber <= PIN7)
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	84 30       	cpi	r24, 0x04	; 4
    21cc:	08 f0       	brcs	.+2      	; 0x21d0 <DIO_u8GetPinValue+0x1c>
    21ce:	6b c0       	rjmp	.+214    	; 0x22a6 <DIO_u8GetPinValue+0xf2>
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	88 30       	cpi	r24, 0x08	; 8
    21d4:	08 f0       	brcs	.+2      	; 0x21d8 <DIO_u8GetPinValue+0x24>
    21d6:	67 c0       	rjmp	.+206    	; 0x22a6 <DIO_u8GetPinValue+0xf2>
    {
        switch (Copy_u8PortName)
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	3d 83       	std	Y+5, r19	; 0x05
    21e0:	2c 83       	std	Y+4, r18	; 0x04
    21e2:	4c 81       	ldd	r20, Y+4	; 0x04
    21e4:	5d 81       	ldd	r21, Y+5	; 0x05
    21e6:	41 30       	cpi	r20, 0x01	; 1
    21e8:	51 05       	cpc	r21, r1
    21ea:	41 f1       	breq	.+80     	; 0x223c <DIO_u8GetPinValue+0x88>
    21ec:	8c 81       	ldd	r24, Y+4	; 0x04
    21ee:	9d 81       	ldd	r25, Y+5	; 0x05
    21f0:	82 30       	cpi	r24, 0x02	; 2
    21f2:	91 05       	cpc	r25, r1
    21f4:	34 f4       	brge	.+12     	; 0x2202 <DIO_u8GetPinValue+0x4e>
    21f6:	2c 81       	ldd	r18, Y+4	; 0x04
    21f8:	3d 81       	ldd	r19, Y+5	; 0x05
    21fa:	21 15       	cp	r18, r1
    21fc:	31 05       	cpc	r19, r1
    21fe:	61 f0       	breq	.+24     	; 0x2218 <DIO_u8GetPinValue+0x64>
    2200:	52 c0       	rjmp	.+164    	; 0x22a6 <DIO_u8GetPinValue+0xf2>
    2202:	4c 81       	ldd	r20, Y+4	; 0x04
    2204:	5d 81       	ldd	r21, Y+5	; 0x05
    2206:	42 30       	cpi	r20, 0x02	; 2
    2208:	51 05       	cpc	r21, r1
    220a:	51 f1       	breq	.+84     	; 0x2260 <DIO_u8GetPinValue+0xac>
    220c:	8c 81       	ldd	r24, Y+4	; 0x04
    220e:	9d 81       	ldd	r25, Y+5	; 0x05
    2210:	83 30       	cpi	r24, 0x03	; 3
    2212:	91 05       	cpc	r25, r1
    2214:	b9 f1       	breq	.+110    	; 0x2284 <DIO_u8GetPinValue+0xd0>
    2216:	47 c0       	rjmp	.+142    	; 0x22a6 <DIO_u8GetPinValue+0xf2>
        {
            case PORTA:
                DIO_u8StorePinValue = GET_BIT(DIO_PINA, Copy_u8PinNumber);
    2218:	e9 e3       	ldi	r30, 0x39	; 57
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	88 2f       	mov	r24, r24
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	a9 01       	movw	r20, r18
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <DIO_u8GetPinValue+0x7c>
    222c:	55 95       	asr	r21
    222e:	47 95       	ror	r20
    2230:	8a 95       	dec	r24
    2232:	e2 f7       	brpl	.-8      	; 0x222c <DIO_u8GetPinValue+0x78>
    2234:	ca 01       	movw	r24, r20
    2236:	81 70       	andi	r24, 0x01	; 1
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	35 c0       	rjmp	.+106    	; 0x22a6 <DIO_u8GetPinValue+0xf2>
            break;

            case PORTB:
                DIO_u8StorePinValue = GET_BIT(DIO_PINB, Copy_u8PinNumber);
    223c:	e6 e3       	ldi	r30, 0x36	; 54
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	a9 01       	movw	r20, r18
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <DIO_u8GetPinValue+0xa0>
    2250:	55 95       	asr	r21
    2252:	47 95       	ror	r20
    2254:	8a 95       	dec	r24
    2256:	e2 f7       	brpl	.-8      	; 0x2250 <DIO_u8GetPinValue+0x9c>
    2258:	ca 01       	movw	r24, r20
    225a:	81 70       	andi	r24, 0x01	; 1
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	23 c0       	rjmp	.+70     	; 0x22a6 <DIO_u8GetPinValue+0xf2>
            break;

            case PORTC:
                DIO_u8StorePinValue = GET_BIT(DIO_PINC, Copy_u8PinNumber);
    2260:	e3 e3       	ldi	r30, 0x33	; 51
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	88 2f       	mov	r24, r24
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	a9 01       	movw	r20, r18
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <DIO_u8GetPinValue+0xc4>
    2274:	55 95       	asr	r21
    2276:	47 95       	ror	r20
    2278:	8a 95       	dec	r24
    227a:	e2 f7       	brpl	.-8      	; 0x2274 <DIO_u8GetPinValue+0xc0>
    227c:	ca 01       	movw	r24, r20
    227e:	81 70       	andi	r24, 0x01	; 1
    2280:	89 83       	std	Y+1, r24	; 0x01
    2282:	11 c0       	rjmp	.+34     	; 0x22a6 <DIO_u8GetPinValue+0xf2>
            break;

            case PORTD:
                DIO_u8StorePinValue = GET_BIT(DIO_PIND, Copy_u8PinNumber);
    2284:	e0 e3       	ldi	r30, 0x30	; 48
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a9 01       	movw	r20, r18
    2296:	02 c0       	rjmp	.+4      	; 0x229c <DIO_u8GetPinValue+0xe8>
    2298:	55 95       	asr	r21
    229a:	47 95       	ror	r20
    229c:	8a 95       	dec	r24
    229e:	e2 f7       	brpl	.-8      	; 0x2298 <DIO_u8GetPinValue+0xe4>
    22a0:	ca 01       	movw	r24, r20
    22a2:	81 70       	andi	r24, 0x01	; 1
    22a4:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {

    }
    return(DIO_u8StorePinValue);
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <DIO_voidSetPortSpecificDirection>:

void DIO_voidSetPortSpecificDirection (u8 Copy_u8PortName, u8 Copy_u8PinDirection)
{
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	00 d0       	rcall	.+0      	; 0x22be <DIO_voidSetPortSpecificDirection+0x6>
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <DIO_voidSetPortSpecificDirection+0x8>
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8PortName <= PORTD && Copy_u8PinDirection <= 0XFF)
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	84 30       	cpi	r24, 0x04	; 4
    22cc:	90 f5       	brcc	.+100    	; 0x2332 <DIO_voidSetPortSpecificDirection+0x7a>
    {
        switch (Copy_u8PortName)
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	3c 83       	std	Y+4, r19	; 0x04
    22d6:	2b 83       	std	Y+3, r18	; 0x03
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	9c 81       	ldd	r25, Y+4	; 0x04
    22dc:	81 30       	cpi	r24, 0x01	; 1
    22de:	91 05       	cpc	r25, r1
    22e0:	d1 f0       	breq	.+52     	; 0x2316 <DIO_voidSetPortSpecificDirection+0x5e>
    22e2:	2b 81       	ldd	r18, Y+3	; 0x03
    22e4:	3c 81       	ldd	r19, Y+4	; 0x04
    22e6:	22 30       	cpi	r18, 0x02	; 2
    22e8:	31 05       	cpc	r19, r1
    22ea:	2c f4       	brge	.+10     	; 0x22f6 <DIO_voidSetPortSpecificDirection+0x3e>
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	61 f0       	breq	.+24     	; 0x230c <DIO_voidSetPortSpecificDirection+0x54>
    22f4:	1e c0       	rjmp	.+60     	; 0x2332 <DIO_voidSetPortSpecificDirection+0x7a>
    22f6:	2b 81       	ldd	r18, Y+3	; 0x03
    22f8:	3c 81       	ldd	r19, Y+4	; 0x04
    22fa:	22 30       	cpi	r18, 0x02	; 2
    22fc:	31 05       	cpc	r19, r1
    22fe:	81 f0       	breq	.+32     	; 0x2320 <DIO_voidSetPortSpecificDirection+0x68>
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	83 30       	cpi	r24, 0x03	; 3
    2306:	91 05       	cpc	r25, r1
    2308:	81 f0       	breq	.+32     	; 0x232a <DIO_voidSetPortSpecificDirection+0x72>
    230a:	13 c0       	rjmp	.+38     	; 0x2332 <DIO_voidSetPortSpecificDirection+0x7a>
        {
            case PORTA:
                DIO_DDRA = Copy_u8PinDirection;
    230c:	ea e3       	ldi	r30, 0x3A	; 58
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	80 83       	st	Z, r24
    2314:	0e c0       	rjmp	.+28     	; 0x2332 <DIO_voidSetPortSpecificDirection+0x7a>
            break;

            case PORTB:
                DIO_DDRB = Copy_u8PinDirection;
    2316:	e7 e3       	ldi	r30, 0x37	; 55
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	80 83       	st	Z, r24
    231e:	09 c0       	rjmp	.+18     	; 0x2332 <DIO_voidSetPortSpecificDirection+0x7a>
            break;

            case PORTC:
                DIO_DDRC = Copy_u8PinDirection;
    2320:	e4 e3       	ldi	r30, 0x34	; 52
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	80 83       	st	Z, r24
    2328:	04 c0       	rjmp	.+8      	; 0x2332 <DIO_voidSetPortSpecificDirection+0x7a>
            break;

            case PORTD:
                DIO_DDRD = Copy_u8PinDirection;
    232a:	e1 e3       	ldi	r30, 0x31	; 49
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	80 83       	st	Z, r24
    }
    else
    {

    }
}
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <DIO_voidSetPortSpecificValue>:

void DIO_voidSetPortSpecificValue (u8 Copy_u8PortName, u8 Copy_u8PortValue)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	00 d0       	rcall	.+0      	; 0x2346 <DIO_voidSetPortSpecificValue+0x6>
    2346:	00 d0       	rcall	.+0      	; 0x2348 <DIO_voidSetPortSpecificValue+0x8>
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8PortName <= PORTD && Copy_u8PortValue <= 0XFF)
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	84 30       	cpi	r24, 0x04	; 4
    2354:	90 f5       	brcc	.+100    	; 0x23ba <DIO_voidSetPortSpecificValue+0x7a>
    {
        switch (Copy_u8PortName)
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	3c 83       	std	Y+4, r19	; 0x04
    235e:	2b 83       	std	Y+3, r18	; 0x03
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	81 30       	cpi	r24, 0x01	; 1
    2366:	91 05       	cpc	r25, r1
    2368:	d1 f0       	breq	.+52     	; 0x239e <DIO_voidSetPortSpecificValue+0x5e>
    236a:	2b 81       	ldd	r18, Y+3	; 0x03
    236c:	3c 81       	ldd	r19, Y+4	; 0x04
    236e:	22 30       	cpi	r18, 0x02	; 2
    2370:	31 05       	cpc	r19, r1
    2372:	2c f4       	brge	.+10     	; 0x237e <DIO_voidSetPortSpecificValue+0x3e>
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	61 f0       	breq	.+24     	; 0x2394 <DIO_voidSetPortSpecificValue+0x54>
    237c:	1e c0       	rjmp	.+60     	; 0x23ba <DIO_voidSetPortSpecificValue+0x7a>
    237e:	2b 81       	ldd	r18, Y+3	; 0x03
    2380:	3c 81       	ldd	r19, Y+4	; 0x04
    2382:	22 30       	cpi	r18, 0x02	; 2
    2384:	31 05       	cpc	r19, r1
    2386:	81 f0       	breq	.+32     	; 0x23a8 <DIO_voidSetPortSpecificValue+0x68>
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	9c 81       	ldd	r25, Y+4	; 0x04
    238c:	83 30       	cpi	r24, 0x03	; 3
    238e:	91 05       	cpc	r25, r1
    2390:	81 f0       	breq	.+32     	; 0x23b2 <DIO_voidSetPortSpecificValue+0x72>
    2392:	13 c0       	rjmp	.+38     	; 0x23ba <DIO_voidSetPortSpecificValue+0x7a>
        {
            case PORTA:
                DIO_PORTA = Copy_u8PortValue;
    2394:	eb e3       	ldi	r30, 0x3B	; 59
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	80 83       	st	Z, r24
    239c:	0e c0       	rjmp	.+28     	; 0x23ba <DIO_voidSetPortSpecificValue+0x7a>
            break;

            case PORTB:
                DIO_PORTB = Copy_u8PortValue;
    239e:	e8 e3       	ldi	r30, 0x38	; 56
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	80 83       	st	Z, r24
    23a6:	09 c0       	rjmp	.+18     	; 0x23ba <DIO_voidSetPortSpecificValue+0x7a>
            break;

            case PORTC:
                DIO_PORTC = Copy_u8PortValue;
    23a8:	e5 e3       	ldi	r30, 0x35	; 53
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	80 83       	st	Z, r24
    23b0:	04 c0       	rjmp	.+8      	; 0x23ba <DIO_voidSetPortSpecificValue+0x7a>
            break;

            case PORTD:
                DIO_PORTD = Copy_u8PortValue;
    23b2:	e2 e3       	ldi	r30, 0x32	; 50
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	80 83       	st	Z, r24
    }
    else
    {

    }
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <DIO_voidSetPortDirection>:
void DIO_voidSetPortDirection(u8 Copy_u8PortName, u8 Copy_u8PortValue)
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <DIO_voidSetPortDirection+0x6>
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <DIO_voidSetPortDirection+0x8>
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	89 83       	std	Y+1, r24	; 0x01
    23d6:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8PortName <= PORTD && Copy_u8PortValue <= OUTPUT)
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	84 30       	cpi	r24, 0x04	; 4
    23dc:	08 f0       	brcs	.+2      	; 0x23e0 <DIO_voidSetPortDirection+0x18>
    23de:	5e c0       	rjmp	.+188    	; 0x249c <DIO_voidSetPortDirection+0xd4>
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	82 30       	cpi	r24, 0x02	; 2
    23e4:	08 f0       	brcs	.+2      	; 0x23e8 <DIO_voidSetPortDirection+0x20>
    23e6:	5a c0       	rjmp	.+180    	; 0x249c <DIO_voidSetPortDirection+0xd4>
    {
        switch (Copy_u8PortName)
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	3c 83       	std	Y+4, r19	; 0x04
    23f0:	2b 83       	std	Y+3, r18	; 0x03
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	91 05       	cpc	r25, r1
    23fa:	21 f1       	breq	.+72     	; 0x2444 <DIO_voidSetPortDirection+0x7c>
    23fc:	2b 81       	ldd	r18, Y+3	; 0x03
    23fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2400:	22 30       	cpi	r18, 0x02	; 2
    2402:	31 05       	cpc	r19, r1
    2404:	2c f4       	brge	.+10     	; 0x2410 <DIO_voidSetPortDirection+0x48>
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	9c 81       	ldd	r25, Y+4	; 0x04
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	61 f0       	breq	.+24     	; 0x2426 <DIO_voidSetPortDirection+0x5e>
    240e:	46 c0       	rjmp	.+140    	; 0x249c <DIO_voidSetPortDirection+0xd4>
    2410:	2b 81       	ldd	r18, Y+3	; 0x03
    2412:	3c 81       	ldd	r19, Y+4	; 0x04
    2414:	22 30       	cpi	r18, 0x02	; 2
    2416:	31 05       	cpc	r19, r1
    2418:	21 f1       	breq	.+72     	; 0x2462 <DIO_voidSetPortDirection+0x9a>
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	83 30       	cpi	r24, 0x03	; 3
    2420:	91 05       	cpc	r25, r1
    2422:	71 f1       	breq	.+92     	; 0x2480 <DIO_voidSetPortDirection+0xb8>
    2424:	3b c0       	rjmp	.+118    	; 0x249c <DIO_voidSetPortDirection+0xd4>
        {
            case PORTA:
                if(Copy_u8PortValue == OUTPUT)
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	81 30       	cpi	r24, 0x01	; 1
    242a:	29 f4       	brne	.+10     	; 0x2436 <DIO_voidSetPortDirection+0x6e>
                {
                    DIO_DDRA = 0XFF;
    242c:	ea e3       	ldi	r30, 0x3A	; 58
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	8f ef       	ldi	r24, 0xFF	; 255
    2432:	80 83       	st	Z, r24
    2434:	33 c0       	rjmp	.+102    	; 0x249c <DIO_voidSetPortDirection+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	88 23       	and	r24, r24
    243a:	81 f5       	brne	.+96     	; 0x249c <DIO_voidSetPortDirection+0xd4>
                {
                    DIO_DDRA = 0X00;
    243c:	ea e3       	ldi	r30, 0x3A	; 58
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	10 82       	st	Z, r1
    2442:	2c c0       	rjmp	.+88     	; 0x249c <DIO_voidSetPortDirection+0xd4>
                {

                }
            break;
            case PORTB:
                if(Copy_u8PortValue == OUTPUT)
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	81 30       	cpi	r24, 0x01	; 1
    2448:	29 f4       	brne	.+10     	; 0x2454 <DIO_voidSetPortDirection+0x8c>
                {
                    DIO_DDRB = 0XFF;
    244a:	e7 e3       	ldi	r30, 0x37	; 55
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	8f ef       	ldi	r24, 0xFF	; 255
    2450:	80 83       	st	Z, r24
    2452:	24 c0       	rjmp	.+72     	; 0x249c <DIO_voidSetPortDirection+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	88 23       	and	r24, r24
    2458:	09 f5       	brne	.+66     	; 0x249c <DIO_voidSetPortDirection+0xd4>
                {
                    DIO_DDRB = 0X00;
    245a:	e7 e3       	ldi	r30, 0x37	; 55
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	10 82       	st	Z, r1
    2460:	1d c0       	rjmp	.+58     	; 0x249c <DIO_voidSetPortDirection+0xd4>
                {

                }
            break;
            case PORTC:
                if(Copy_u8PortValue == OUTPUT)
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	81 30       	cpi	r24, 0x01	; 1
    2466:	29 f4       	brne	.+10     	; 0x2472 <DIO_voidSetPortDirection+0xaa>
                {
                    DIO_DDRC = 0XFF;
    2468:	e4 e3       	ldi	r30, 0x34	; 52
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	8f ef       	ldi	r24, 0xFF	; 255
    246e:	80 83       	st	Z, r24
    2470:	15 c0       	rjmp	.+42     	; 0x249c <DIO_voidSetPortDirection+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	88 23       	and	r24, r24
    2476:	91 f4       	brne	.+36     	; 0x249c <DIO_voidSetPortDirection+0xd4>
                {
                    DIO_DDRC = 0X00;
    2478:	e4 e3       	ldi	r30, 0x34	; 52
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	10 82       	st	Z, r1
    247e:	0e c0       	rjmp	.+28     	; 0x249c <DIO_voidSetPortDirection+0xd4>
                {

                }
            break;
            case PORTD:
                if(Copy_u8PortValue == OUTPUT)
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	81 30       	cpi	r24, 0x01	; 1
    2484:	29 f4       	brne	.+10     	; 0x2490 <DIO_voidSetPortDirection+0xc8>
                {
                    DIO_DDRD = 0XFF;
    2486:	e1 e3       	ldi	r30, 0x31	; 49
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	8f ef       	ldi	r24, 0xFF	; 255
    248c:	80 83       	st	Z, r24
    248e:	06 c0       	rjmp	.+12     	; 0x249c <DIO_voidSetPortDirection+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	88 23       	and	r24, r24
    2494:	19 f4       	brne	.+6      	; 0x249c <DIO_voidSetPortDirection+0xd4>
                {
                    DIO_DDRD = 0X00;
    2496:	e1 e3       	ldi	r30, 0x31	; 49
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	10 82       	st	Z, r1
    }
    else
    {

    }
}
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8PortName, u8 Copy_u8PortValue)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <DIO_voidSetPortValue+0x6>
    24b0:	00 d0       	rcall	.+0      	; 0x24b2 <DIO_voidSetPortValue+0x8>
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	89 83       	std	Y+1, r24	; 0x01
    24b8:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8PortName <= PORTD && Copy_u8PortValue <= HIGH)
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	84 30       	cpi	r24, 0x04	; 4
    24be:	08 f0       	brcs	.+2      	; 0x24c2 <DIO_voidSetPortValue+0x18>
    24c0:	5e c0       	rjmp	.+188    	; 0x257e <DIO_voidSetPortValue+0xd4>
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	82 30       	cpi	r24, 0x02	; 2
    24c6:	08 f0       	brcs	.+2      	; 0x24ca <DIO_voidSetPortValue+0x20>
    24c8:	5a c0       	rjmp	.+180    	; 0x257e <DIO_voidSetPortValue+0xd4>
    {
        switch (Copy_u8PortName)
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	3c 83       	std	Y+4, r19	; 0x04
    24d2:	2b 83       	std	Y+3, r18	; 0x03
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	9c 81       	ldd	r25, Y+4	; 0x04
    24d8:	81 30       	cpi	r24, 0x01	; 1
    24da:	91 05       	cpc	r25, r1
    24dc:	21 f1       	breq	.+72     	; 0x2526 <DIO_voidSetPortValue+0x7c>
    24de:	2b 81       	ldd	r18, Y+3	; 0x03
    24e0:	3c 81       	ldd	r19, Y+4	; 0x04
    24e2:	22 30       	cpi	r18, 0x02	; 2
    24e4:	31 05       	cpc	r19, r1
    24e6:	2c f4       	brge	.+10     	; 0x24f2 <DIO_voidSetPortValue+0x48>
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	61 f0       	breq	.+24     	; 0x2508 <DIO_voidSetPortValue+0x5e>
    24f0:	46 c0       	rjmp	.+140    	; 0x257e <DIO_voidSetPortValue+0xd4>
    24f2:	2b 81       	ldd	r18, Y+3	; 0x03
    24f4:	3c 81       	ldd	r19, Y+4	; 0x04
    24f6:	22 30       	cpi	r18, 0x02	; 2
    24f8:	31 05       	cpc	r19, r1
    24fa:	21 f1       	breq	.+72     	; 0x2544 <DIO_voidSetPortValue+0x9a>
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	83 30       	cpi	r24, 0x03	; 3
    2502:	91 05       	cpc	r25, r1
    2504:	71 f1       	breq	.+92     	; 0x2562 <DIO_voidSetPortValue+0xb8>
    2506:	3b c0       	rjmp	.+118    	; 0x257e <DIO_voidSetPortValue+0xd4>
        {
            case PORTA:
                if(Copy_u8PortValue == HIGH)
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	29 f4       	brne	.+10     	; 0x2518 <DIO_voidSetPortValue+0x6e>
                {
                    DIO_PORTA = 0XFF;
    250e:	eb e3       	ldi	r30, 0x3B	; 59
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	8f ef       	ldi	r24, 0xFF	; 255
    2514:	80 83       	st	Z, r24
    2516:	33 c0       	rjmp	.+102    	; 0x257e <DIO_voidSetPortValue+0xd4>
                }
                else if(Copy_u8PortValue == LOW)
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	88 23       	and	r24, r24
    251c:	81 f5       	brne	.+96     	; 0x257e <DIO_voidSetPortValue+0xd4>
                {
                    DIO_PORTA = 0X00;
    251e:	eb e3       	ldi	r30, 0x3B	; 59
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	10 82       	st	Z, r1
    2524:	2c c0       	rjmp	.+88     	; 0x257e <DIO_voidSetPortValue+0xd4>
                {

                }
            break;
            case PORTB:
                if(Copy_u8PortValue == HIGH)
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	81 30       	cpi	r24, 0x01	; 1
    252a:	29 f4       	brne	.+10     	; 0x2536 <DIO_voidSetPortValue+0x8c>
                {
                    DIO_PORTB = 0XFF;
    252c:	e8 e3       	ldi	r30, 0x38	; 56
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	8f ef       	ldi	r24, 0xFF	; 255
    2532:	80 83       	st	Z, r24
    2534:	24 c0       	rjmp	.+72     	; 0x257e <DIO_voidSetPortValue+0xd4>
                }
                else if(Copy_u8PortValue == LOW)
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	88 23       	and	r24, r24
    253a:	09 f5       	brne	.+66     	; 0x257e <DIO_voidSetPortValue+0xd4>
                {
                    DIO_PORTB = 0X00;
    253c:	e8 e3       	ldi	r30, 0x38	; 56
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	10 82       	st	Z, r1
    2542:	1d c0       	rjmp	.+58     	; 0x257e <DIO_voidSetPortValue+0xd4>
                {

                }
            break;
            case PORTC:
                if(Copy_u8PortValue == HIGH)
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	81 30       	cpi	r24, 0x01	; 1
    2548:	29 f4       	brne	.+10     	; 0x2554 <DIO_voidSetPortValue+0xaa>
                {
                    DIO_PORTC = 0XFF;
    254a:	e5 e3       	ldi	r30, 0x35	; 53
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	8f ef       	ldi	r24, 0xFF	; 255
    2550:	80 83       	st	Z, r24
    2552:	15 c0       	rjmp	.+42     	; 0x257e <DIO_voidSetPortValue+0xd4>
                }
                else if(Copy_u8PortValue == INPUT)
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	88 23       	and	r24, r24
    2558:	91 f4       	brne	.+36     	; 0x257e <DIO_voidSetPortValue+0xd4>
                {
                    DIO_PORTC = 0X00;
    255a:	e5 e3       	ldi	r30, 0x35	; 53
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	10 82       	st	Z, r1
    2560:	0e c0       	rjmp	.+28     	; 0x257e <DIO_voidSetPortValue+0xd4>
                {

                }
            break;
            case PORTD:
                if(Copy_u8PortValue == HIGH)
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	81 30       	cpi	r24, 0x01	; 1
    2566:	29 f4       	brne	.+10     	; 0x2572 <DIO_voidSetPortValue+0xc8>
                {
                    DIO_PORTD = 0XFF;
    2568:	e2 e3       	ldi	r30, 0x32	; 50
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	8f ef       	ldi	r24, 0xFF	; 255
    256e:	80 83       	st	Z, r24
    2570:	06 c0       	rjmp	.+12     	; 0x257e <DIO_voidSetPortValue+0xd4>
                }
                else if(Copy_u8PortValue == LOW)
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	88 23       	and	r24, r24
    2576:	19 f4       	brne	.+6      	; 0x257e <DIO_voidSetPortValue+0xd4>
                {
                    DIO_PORTD = 0X00;
    2578:	e2 e3       	ldi	r30, 0x32	; 50
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	10 82       	st	Z, r1
    }
    else
    {

    }
}
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue (u8 Copy_u8PortName)
{
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	00 d0       	rcall	.+0      	; 0x2592 <DIO_u8GetPortValue+0x6>
    2592:	00 d0       	rcall	.+0      	; 0x2594 <DIO_u8GetPortValue+0x8>
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	8a 83       	std	Y+2, r24	; 0x02
	u8 DIO_u8StorePinValue = 0x00;
    259a:	19 82       	std	Y+1, r1	; 0x01
    
    if(Copy_u8PortName <= PORTD)
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	84 30       	cpi	r24, 0x04	; 4
    25a0:	08 f0       	brcs	.+2      	; 0x25a4 <DIO_u8GetPortValue+0x18>
    25a2:	3e c0       	rjmp	.+124    	; 0x2620 <DIO_u8GetPortValue+0x94>
    {
	    switch(Copy_u8PortName)
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	3c 83       	std	Y+4, r19	; 0x04
    25ac:	2b 83       	std	Y+3, r18	; 0x03
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	81 30       	cpi	r24, 0x01	; 1
    25b4:	91 05       	cpc	r25, r1
    25b6:	e9 f0       	breq	.+58     	; 0x25f2 <DIO_u8GetPortValue+0x66>
    25b8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ba:	3c 81       	ldd	r19, Y+4	; 0x04
    25bc:	22 30       	cpi	r18, 0x02	; 2
    25be:	31 05       	cpc	r19, r1
    25c0:	2c f4       	brge	.+10     	; 0x25cc <DIO_u8GetPortValue+0x40>
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	9c 81       	ldd	r25, Y+4	; 0x04
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	61 f0       	breq	.+24     	; 0x25e2 <DIO_u8GetPortValue+0x56>
    25ca:	2a c0       	rjmp	.+84     	; 0x2620 <DIO_u8GetPortValue+0x94>
    25cc:	2b 81       	ldd	r18, Y+3	; 0x03
    25ce:	3c 81       	ldd	r19, Y+4	; 0x04
    25d0:	22 30       	cpi	r18, 0x02	; 2
    25d2:	31 05       	cpc	r19, r1
    25d4:	b1 f0       	breq	.+44     	; 0x2602 <DIO_u8GetPortValue+0x76>
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	9c 81       	ldd	r25, Y+4	; 0x04
    25da:	83 30       	cpi	r24, 0x03	; 3
    25dc:	91 05       	cpc	r25, r1
    25de:	c9 f0       	breq	.+50     	; 0x2612 <DIO_u8GetPortValue+0x86>
    25e0:	1f c0       	rjmp	.+62     	; 0x2620 <DIO_u8GetPortValue+0x94>
	    {
	    	case PORTA:
	    		if(DIO_PINA == 0XFF)
    25e2:	e9 e3       	ldi	r30, 0x39	; 57
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	8f 3f       	cpi	r24, 0xFF	; 255
    25ea:	d1 f4       	brne	.+52     	; 0x2620 <DIO_u8GetPortValue+0x94>
	    		{
	    			DIO_u8StorePinValue = 0XFF;
    25ec:	8f ef       	ldi	r24, 0xFF	; 255
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	17 c0       	rjmp	.+46     	; 0x2620 <DIO_u8GetPortValue+0x94>
                {

                }
	    	break;
	    	case PORTB:
	    		if(DIO_PINB == 0XFF)
    25f2:	e6 e3       	ldi	r30, 0x36	; 54
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	8f 3f       	cpi	r24, 0xFF	; 255
    25fa:	91 f4       	brne	.+36     	; 0x2620 <DIO_u8GetPortValue+0x94>
	    		{
	    			DIO_u8StorePinValue = 0XFF;
    25fc:	8f ef       	ldi	r24, 0xFF	; 255
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	0f c0       	rjmp	.+30     	; 0x2620 <DIO_u8GetPortValue+0x94>
                {

                }
	    	break;
	    	case PORTC:
	    		if(DIO_PINC == 0XFF)
    2602:	e3 e3       	ldi	r30, 0x33	; 51
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	8f 3f       	cpi	r24, 0xFF	; 255
    260a:	51 f4       	brne	.+20     	; 0x2620 <DIO_u8GetPortValue+0x94>
	    		{
	    			DIO_u8StorePinValue = 0XFF;
    260c:	8f ef       	ldi	r24, 0xFF	; 255
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	07 c0       	rjmp	.+14     	; 0x2620 <DIO_u8GetPortValue+0x94>
                {

                }
	    	break;
	    	case PORTD:
	    		if(DIO_PIND == 0XFF)
    2612:	e0 e3       	ldi	r30, 0x30	; 48
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	8f 3f       	cpi	r24, 0xFF	; 255
    261a:	11 f4       	brne	.+4      	; 0x2620 <DIO_u8GetPortValue+0x94>
	    		{
	    			DIO_u8StorePinValue = 0XFF;
    261c:	8f ef       	ldi	r24, 0xFF	; 255
    261e:	89 83       	std	Y+1, r24	; 0x01
    else
    {

    }

	return(DIO_u8StorePinValue);
    2620:	89 81       	ldd	r24, Y+1	; 0x01
}
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	08 95       	ret

00002630 <DDIO_voidSetPortPullUp>:

void DDIO_voidSetPortPullUp(u8 Copy_u8PortName)
{
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	00 d0       	rcall	.+0      	; 0x2636 <DDIO_voidSetPortPullUp+0x6>
    2636:	0f 92       	push	r0
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8PortName <= PORTD)
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	84 30       	cpi	r24, 0x04	; 4
    2642:	08 f0       	brcs	.+2      	; 0x2646 <DDIO_voidSetPortPullUp+0x16>
    2644:	3e c0       	rjmp	.+124    	; 0x26c2 <DDIO_voidSetPortPullUp+0x92>
    {
	    switch(Copy_u8PortName)
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	28 2f       	mov	r18, r24
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	3b 83       	std	Y+3, r19	; 0x03
    264e:	2a 83       	std	Y+2, r18	; 0x02
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	9b 81       	ldd	r25, Y+3	; 0x03
    2654:	81 30       	cpi	r24, 0x01	; 1
    2656:	91 05       	cpc	r25, r1
    2658:	e9 f0       	breq	.+58     	; 0x2694 <DDIO_voidSetPortPullUp+0x64>
    265a:	2a 81       	ldd	r18, Y+2	; 0x02
    265c:	3b 81       	ldd	r19, Y+3	; 0x03
    265e:	22 30       	cpi	r18, 0x02	; 2
    2660:	31 05       	cpc	r19, r1
    2662:	2c f4       	brge	.+10     	; 0x266e <DDIO_voidSetPortPullUp+0x3e>
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	9b 81       	ldd	r25, Y+3	; 0x03
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	61 f0       	breq	.+24     	; 0x2684 <DDIO_voidSetPortPullUp+0x54>
    266c:	2a c0       	rjmp	.+84     	; 0x26c2 <DDIO_voidSetPortPullUp+0x92>
    266e:	2a 81       	ldd	r18, Y+2	; 0x02
    2670:	3b 81       	ldd	r19, Y+3	; 0x03
    2672:	22 30       	cpi	r18, 0x02	; 2
    2674:	31 05       	cpc	r19, r1
    2676:	b1 f0       	breq	.+44     	; 0x26a4 <DDIO_voidSetPortPullUp+0x74>
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	9b 81       	ldd	r25, Y+3	; 0x03
    267c:	83 30       	cpi	r24, 0x03	; 3
    267e:	91 05       	cpc	r25, r1
    2680:	c9 f0       	breq	.+50     	; 0x26b4 <DDIO_voidSetPortPullUp+0x84>
    2682:	1f c0       	rjmp	.+62     	; 0x26c2 <DDIO_voidSetPortPullUp+0x92>
	    {
	    	case PORTA:
	    		DIO_DDRA = 0X00;
    2684:	ea e3       	ldi	r30, 0x3A	; 58
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	10 82       	st	Z, r1
	    		DIO_PORTA = 0XFF;
    268a:	eb e3       	ldi	r30, 0x3B	; 59
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	8f ef       	ldi	r24, 0xFF	; 255
    2690:	80 83       	st	Z, r24
    2692:	17 c0       	rjmp	.+46     	; 0x26c2 <DDIO_voidSetPortPullUp+0x92>
	    	break;
	    	case PORTB:
	    		DIO_DDRB = 0X00;
    2694:	e7 e3       	ldi	r30, 0x37	; 55
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	10 82       	st	Z, r1
	    		DIO_PORTB = 0XFF;
    269a:	e8 e3       	ldi	r30, 0x38	; 56
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	8f ef       	ldi	r24, 0xFF	; 255
    26a0:	80 83       	st	Z, r24
    26a2:	0f c0       	rjmp	.+30     	; 0x26c2 <DDIO_voidSetPortPullUp+0x92>
	    	break;
	    	case PORTC:
	    		DIO_DDRC = 0X00;
    26a4:	e4 e3       	ldi	r30, 0x34	; 52
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	10 82       	st	Z, r1
	    		DIO_PORTC = 0XFF;
    26aa:	e5 e3       	ldi	r30, 0x35	; 53
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	8f ef       	ldi	r24, 0xFF	; 255
    26b0:	80 83       	st	Z, r24
    26b2:	07 c0       	rjmp	.+14     	; 0x26c2 <DDIO_voidSetPortPullUp+0x92>
	    	break;
	    	case PORTD:
	    		DIO_DDRD = 0X00;
    26b4:	e1 e3       	ldi	r30, 0x31	; 49
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	10 82       	st	Z, r1
	    		DIO_PORTD = 0XFF;
    26ba:	e2 e3       	ldi	r30, 0x32	; 50
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	8f ef       	ldi	r24, 0xFF	; 255
    26c0:	80 83       	st	Z, r24
    }
    else
    {
        
    }
}
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <ADC_voidInit>:


         

void ADC_voidInit(void)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    /*Select The Prescaler = 64*/
    ADCSRA &= ADC_PRESCALER_MASK_CLR;
    26d6:	a6 e2       	ldi	r26, 0x26	; 38
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e6 e2       	ldi	r30, 0x26	; 38
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	88 7f       	andi	r24, 0xF8	; 248
    26e2:	8c 93       	st	X, r24
    ADCSRA |= ADC_PRESCALER_SELECT_VALUE;
    26e4:	a6 e2       	ldi	r26, 0x26	; 38
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	e6 e2       	ldi	r30, 0x26	; 38
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	86 60       	ori	r24, 0x06	; 6
    26f0:	8c 93       	st	X, r24
    /*Adjustment*/
    #if ADC_RESULT_ADJUSTMENT == ACD_LEFT_ADJUST
        SET_BIT(ADMUX, ADMUX_ADLAR);
    26f2:	a7 e2       	ldi	r26, 0x27	; 39
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	e7 e2       	ldi	r30, 0x27	; 39
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	80 62       	ori	r24, 0x20	; 32
    26fe:	8c 93       	st	X, r24
    #elif ADC_RESULT_ADJUSTMENT == ACD_RIGHT_ADJUST
        CLR_BIT(ADMUX, ADMUX_ADLAR);
    #endif
    /*Default Choose ACD Channel */

    ADMUX &= ADC_Channel_MASK_CLR;
    2700:	a7 e2       	ldi	r26, 0x27	; 39
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e7 e2       	ldi	r30, 0x27	; 39
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	80 7e       	andi	r24, 0xE0	; 224
    270c:	8c 93       	st	X, r24
    ADMUX |= ADC_Channel_0;
    270e:	a7 e2       	ldi	r26, 0x27	; 39
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e7 e2       	ldi	r30, 0x27	; 39
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	8c 93       	st	X, r24

    /*Select Mode Of ADC*/
    #if ADC_MODE_SELECT == ADC_SINGLE_CONVERSION_MODE
        CLR_BIT(ADCSRA, ADCSRA_ADATE);
    271a:	a6 e2       	ldi	r26, 0x26	; 38
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e6 e2       	ldi	r30, 0x26	; 38
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	8f 7d       	andi	r24, 0xDF	; 223
    2726:	8c 93       	st	X, r24
        SET_BIT(ADCSRA, ADCSRA_ADATE);
        SFIOR &= ADC_AUTO_TRIG_SRC_MASK_CLR;
        SFIOR |= ADC_AUTO_TRIG_SRC_FREE_RUNNING_MSK;
    #endif
    /*Referance voltage*/
    ADCSRA &= ADC_REFERANCE_VOLTAGE_MASK_CLR;
    2728:	a6 e2       	ldi	r26, 0x26	; 38
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e6 e2       	ldi	r30, 0x26	; 38
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	8f 73       	andi	r24, 0x3F	; 63
    2734:	8c 93       	st	X, r24
    ADCSRA |= ADC_REFERANCE_VOLTAGE_SELECT_VALUE;
    2736:	a6 e2       	ldi	r26, 0x26	; 38
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e6 e2       	ldi	r30, 0x26	; 38
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	8c 93       	st	X, r24
    /*Enable ADC*/
    SET_BIT(ADCSRA, ADCSRA_ADEN);   
    2742:	a6 e2       	ldi	r26, 0x26	; 38
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	e6 e2       	ldi	r30, 0x26	; 38
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	80 68       	ori	r24, 0x80	; 128
    274e:	8c 93       	st	X, r24
}
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <ACD_voidStartConversionSynchronous>:




u8 ACD_voidStartConversionSynchronous(u8 Copu_u8ADCChannel)
{
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	0f 92       	push	r0
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	89 83       	std	Y+1, r24	; 0x01
    /* Choose ACD Channel */
    ADMUX &= ADC_Channel_MASK_CLR;
    2762:	a7 e2       	ldi	r26, 0x27	; 39
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e7 e2       	ldi	r30, 0x27	; 39
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	80 7e       	andi	r24, 0xE0	; 224
    276e:	8c 93       	st	X, r24
    ADMUX |= Copu_u8ADCChannel;
    2770:	a7 e2       	ldi	r26, 0x27	; 39
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e7 e2       	ldi	r30, 0x27	; 39
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	90 81       	ld	r25, Z
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	89 2b       	or	r24, r25
    277e:	8c 93       	st	X, r24
    /*Trigger ADC*/
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    2780:	a6 e2       	ldi	r26, 0x26	; 38
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e6 e2       	ldi	r30, 0x26	; 38
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	80 64       	ori	r24, 0x40	; 64
    278c:	8c 93       	st	X, r24
    /*Polling (Busy Wait) Till The ADC End Conversion*/
    while(GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
    278e:	e6 e2       	ldi	r30, 0x26	; 38
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	82 95       	swap	r24
    2796:	8f 70       	andi	r24, 0x0F	; 15
    2798:	88 2f       	mov	r24, r24
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	81 70       	andi	r24, 0x01	; 1
    279e:	90 70       	andi	r25, 0x00	; 0
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	a9 f3       	breq	.-22     	; 0x278e <ACD_voidStartConversionSynchronous+0x38>

    /*Clear ADC Flag*/
    SET_BIT(ADCSRA, ADCSRA_ADIF);
    27a4:	a6 e2       	ldi	r26, 0x26	; 38
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e6 e2       	ldi	r30, 0x26	; 38
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	80 61       	ori	r24, 0x10	; 16
    27b0:	8c 93       	st	X, r24

    /*Return The Digital Value*/
    #if ADC_RESULT_ADJUSTMENT == ACD_LEFT_ADJUST
        return (ADCH);
    27b2:	e5 e2       	ldi	r30, 0x25	; 37
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    #elif ADC_RESULT_ADJUSTMENT == ACD_RIGHT_ADJUST
        return (ADCL);
    #endif
}
    27b8:	0f 90       	pop	r0
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <ADC_voidMapping>:


u16 ADC_voidMapping(u16 Copy_u16YMaxValue, u16 Copy_u16YMinValue, u16 Copy_u16XMaxValue, u16 Copy_u16XMinValue, u16 Copy_u16X)
{
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	2e 97       	sbiw	r28, 0x0e	; 14
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
    27dc:	78 87       	std	Y+8, r23	; 0x08
    27de:	6f 83       	std	Y+7, r22	; 0x07
    27e0:	5a 87       	std	Y+10, r21	; 0x0a
    27e2:	49 87       	std	Y+9, r20	; 0x09
    27e4:	3c 87       	std	Y+12, r19	; 0x0c
    27e6:	2b 87       	std	Y+11, r18	; 0x0b
    27e8:	1e 87       	std	Y+14, r17	; 0x0e
    27ea:	0d 87       	std	Y+13, r16	; 0x0d
	u32 Local_u8Slope = 0;
    27ec:	1c 82       	std	Y+4, r1	; 0x04
    27ee:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16Value = 0;
    27f0:	1a 82       	std	Y+2, r1	; 0x02
    27f2:	19 82       	std	Y+1, r1	; 0x01
	Local_u8Slope = (u32)((Copy_u16YMaxValue - Copy_u16YMinValue) / (Copy_u16XMaxValue - Copy_u16XMinValue));
    27f4:	2d 81       	ldd	r18, Y+5	; 0x05
    27f6:	3e 81       	ldd	r19, Y+6	; 0x06
    27f8:	8f 81       	ldd	r24, Y+7	; 0x07
    27fa:	98 85       	ldd	r25, Y+8	; 0x08
    27fc:	a9 01       	movw	r20, r18
    27fe:	48 1b       	sub	r20, r24
    2800:	59 0b       	sbc	r21, r25
    2802:	29 85       	ldd	r18, Y+9	; 0x09
    2804:	3a 85       	ldd	r19, Y+10	; 0x0a
    2806:	8b 85       	ldd	r24, Y+11	; 0x0b
    2808:	9c 85       	ldd	r25, Y+12	; 0x0c
    280a:	28 1b       	sub	r18, r24
    280c:	39 0b       	sbc	r19, r25
    280e:	ca 01       	movw	r24, r20
    2810:	b9 01       	movw	r22, r18
    2812:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__udivmodhi4>
    2816:	cb 01       	movw	r24, r22
    2818:	9c 83       	std	Y+4, r25	; 0x04
    281a:	8b 83       	std	Y+3, r24	; 0x03
	Local_u16Value = (u32)Local_u8Slope * Copy_u16X;
    281c:	2b 81       	ldd	r18, Y+3	; 0x03
    281e:	3c 81       	ldd	r19, Y+4	; 0x04
    2820:	8d 85       	ldd	r24, Y+13	; 0x0d
    2822:	9e 85       	ldd	r25, Y+14	; 0x0e
    2824:	ac 01       	movw	r20, r24
    2826:	24 9f       	mul	r18, r20
    2828:	c0 01       	movw	r24, r0
    282a:	25 9f       	mul	r18, r21
    282c:	90 0d       	add	r25, r0
    282e:	34 9f       	mul	r19, r20
    2830:	90 0d       	add	r25, r0
    2832:	11 24       	eor	r1, r1
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u16Value);
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    283c:	2e 96       	adiw	r28, 0x0e	; 14
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	08 95       	ret

00002852 <ACD_voidStartConversionASynchronous>:


void(*ADC_NotificationFunction)(u8 *) = NULL_POINTER;
void ACD_voidStartConversionASynchronous(u8 Copu_u8ADCChannel, void(*NotificationFunction)(u8 *))
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	00 d0       	rcall	.+0      	; 0x2858 <ACD_voidStartConversionASynchronous+0x6>
    2858:	0f 92       	push	r0
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	89 83       	std	Y+1, r24	; 0x01
    2860:	7b 83       	std	Y+3, r23	; 0x03
    2862:	6a 83       	std	Y+2, r22	; 0x02
    ADC_NotificationFunction = NotificationFunction;
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	9b 81       	ldd	r25, Y+3	; 0x03
    2868:	90 93 e0 01 	sts	0x01E0, r25
    286c:	80 93 df 01 	sts	0x01DF, r24
    /* Choose ACD Channel */
    ADMUX &= ADC_Channel_MASK_CLR;
    2870:	a7 e2       	ldi	r26, 0x27	; 39
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e7 e2       	ldi	r30, 0x27	; 39
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	80 7e       	andi	r24, 0xE0	; 224
    287c:	8c 93       	st	X, r24
    ADMUX |= Copu_u8ADCChannel;
    287e:	a7 e2       	ldi	r26, 0x27	; 39
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	e7 e2       	ldi	r30, 0x27	; 39
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	90 81       	ld	r25, Z
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	89 2b       	or	r24, r25
    288c:	8c 93       	st	X, r24
    /*Enable PIE*/
    SET_BIT(ADCSRA, ADCSRA_ADIE);
    288e:	a6 e2       	ldi	r26, 0x26	; 38
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	e6 e2       	ldi	r30, 0x26	; 38
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	88 60       	ori	r24, 0x08	; 8
    289a:	8c 93       	st	X, r24
    /*Trigger ADC*/
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    289c:	a6 e2       	ldi	r26, 0x26	; 38
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	e6 e2       	ldi	r30, 0x26	; 38
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	80 64       	ori	r24, 0x40	; 64
    28a8:	8c 93       	st	X, r24
}
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <__vector_16>:

u8 ADC_u8Result = 0;
void __vector_16(void)   __attribute__((signal));
void __vector_16(void)
{
    28b6:	1f 92       	push	r1
    28b8:	0f 92       	push	r0
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	0f 92       	push	r0
    28be:	11 24       	eor	r1, r1
    28c0:	2f 93       	push	r18
    28c2:	3f 93       	push	r19
    28c4:	4f 93       	push	r20
    28c6:	5f 93       	push	r21
    28c8:	6f 93       	push	r22
    28ca:	7f 93       	push	r23
    28cc:	8f 93       	push	r24
    28ce:	9f 93       	push	r25
    28d0:	af 93       	push	r26
    28d2:	bf 93       	push	r27
    28d4:	ef 93       	push	r30
    28d6:	ff 93       	push	r31
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    if(ADC_NotificationFunction != NULL_POINTER)
    28e0:	80 91 df 01 	lds	r24, 0x01DF
    28e4:	90 91 e0 01 	lds	r25, 0x01E0
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	61 f0       	breq	.+24     	; 0x2904 <__vector_16+0x4e>
    {
        #if ADC_RESULT_ADJUSTMENT == ACD_LEFT_ADJUST
            ADC_u8Result = ADCH;
    28ec:	e5 e2       	ldi	r30, 0x25	; 37
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	80 93 e1 01 	sts	0x01E1, r24
            ADC_NotificationFunction(&ADC_u8Result);
    28f6:	e0 91 df 01 	lds	r30, 0x01DF
    28fa:	f0 91 e0 01 	lds	r31, 0x01E0
    28fe:	81 ee       	ldi	r24, 0xE1	; 225
    2900:	91 e0       	ldi	r25, 0x01	; 1
    2902:	09 95       	icall
    }
    else
    {
        
    }
}
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	ff 91       	pop	r31
    290a:	ef 91       	pop	r30
    290c:	bf 91       	pop	r27
    290e:	af 91       	pop	r26
    2910:	9f 91       	pop	r25
    2912:	8f 91       	pop	r24
    2914:	7f 91       	pop	r23
    2916:	6f 91       	pop	r22
    2918:	5f 91       	pop	r21
    291a:	4f 91       	pop	r20
    291c:	3f 91       	pop	r19
    291e:	2f 91       	pop	r18
    2920:	0f 90       	pop	r0
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	0f 90       	pop	r0
    2926:	1f 90       	pop	r1
    2928:	18 95       	reti

0000292a <SSD_voidDisplayNumbers>:
                                     0b00000111,
                                     0b01111111,
                                     0b01101111};

void SSD_voidDisplayNumbers (u8 Copy_u8PortName, u8 Copy_u8DisplayNumber, u8 Copy_u8Type)
{
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	00 d0       	rcall	.+0      	; 0x2930 <SSD_voidDisplayNumbers+0x6>
    2930:	00 d0       	rcall	.+0      	; 0x2932 <SSD_voidDisplayNumbers+0x8>
    2932:	0f 92       	push	r0
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	6a 83       	std	Y+2, r22	; 0x02
    293c:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_u8PortName <= PORTD && Copy_u8DisplayNumber <= 9 && Copy_u8Type <= CommanAnode)
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	84 30       	cpi	r24, 0x04	; 4
    2942:	90 f5       	brcc	.+100    	; 0x29a8 <SSD_voidDisplayNumbers+0x7e>
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	8a 30       	cpi	r24, 0x0A	; 10
    2948:	78 f5       	brcc	.+94     	; 0x29a8 <SSD_voidDisplayNumbers+0x7e>
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	82 30       	cpi	r24, 0x02	; 2
    294e:	60 f5       	brcc	.+88     	; 0x29a8 <SSD_voidDisplayNumbers+0x7e>
    {
        switch (Copy_u8PortName)
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	88 2f       	mov	r24, r24
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	39 f5       	brne	.+78     	; 0x29a8 <SSD_voidDisplayNumbers+0x7e>
        {
            case PORTA:
                    switch(Copy_u8Type)
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	28 2f       	mov	r18, r24
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	3d 83       	std	Y+5, r19	; 0x05
    2962:	2c 83       	std	Y+4, r18	; 0x04
    2964:	8c 81       	ldd	r24, Y+4	; 0x04
    2966:	9d 81       	ldd	r25, Y+5	; 0x05
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	31 f0       	breq	.+12     	; 0x2978 <SSD_voidDisplayNumbers+0x4e>
    296c:	2c 81       	ldd	r18, Y+4	; 0x04
    296e:	3d 81       	ldd	r19, Y+5	; 0x05
    2970:	21 30       	cpi	r18, 0x01	; 1
    2972:	31 05       	cpc	r19, r1
    2974:	61 f0       	breq	.+24     	; 0x298e <SSD_voidDisplayNumbers+0x64>
    2976:	18 c0       	rjmp	.+48     	; 0x29a8 <SSD_voidDisplayNumbers+0x7e>
                    {
                        case CommanCathod:
                            DIO_voidSetPortSpecificValue(PORTA, Global_u8ArrayStoreNumbers[Copy_u8DisplayNumber]);
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	88 2f       	mov	r24, r24
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	fc 01       	movw	r30, r24
    2980:	e1 56       	subi	r30, 0x61	; 97
    2982:	fe 4f       	sbci	r31, 0xFE	; 254
    2984:	90 81       	ld	r25, Z
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	69 2f       	mov	r22, r25
    298a:	0e 94 a0 11 	call	0x2340	; 0x2340 <DIO_voidSetPortSpecificValue>
                        case CommanAnode:
                            DIO_voidSetPortSpecificValue(PORTA, ~Global_u8ArrayStoreNumbers[Copy_u8DisplayNumber]);
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	88 2f       	mov	r24, r24
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	fc 01       	movw	r30, r24
    2996:	e1 56       	subi	r30, 0x61	; 97
    2998:	fe 4f       	sbci	r31, 0xFE	; 254
    299a:	80 81       	ld	r24, Z
    299c:	98 2f       	mov	r25, r24
    299e:	90 95       	com	r25
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	69 2f       	mov	r22, r25
    29a4:	0e 94 a0 11 	call	0x2340	; 0x2340 <DIO_voidSetPortSpecificValue>
    else
    {
        
    }   
           
}
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <SMD_voidInit>:
u16 Local_u16TurnsNumber = 0;



void SMD_voidInit(void)
{
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
    DIO_voidSetPortSpecificDirection(SMD_PORT, SMD_PORT_PINS);
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	6f e0       	ldi	r22, 0x0F	; 15
    29c4:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_voidSetPortSpecificDirection>
}
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <SMD_voidContralFullStep>:
void SMD_voidContralFullStep (u16 Copy_u16Angle)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	ae 97       	sbiw	r28, 0x2e	; 46
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	9e a7       	std	Y+46, r25	; 0x2e
    29e4:	8d a7       	std	Y+45, r24	; 0x2d
    
    Local_u16TurnsNumber = Copy_u16Angle / StrideAngle_OneStep;
    29e6:	80 91 e2 01 	lds	r24, 0x01E2
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    29f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    29f2:	b9 01       	movw	r22, r18
    29f4:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__udivmodhi4>
    29f8:	cb 01       	movw	r24, r22
    29fa:	90 93 e4 01 	sts	0x01E4, r25
    29fe:	80 93 e3 01 	sts	0x01E3, r24
    u16 Local_u16LoopCounter = 0;
    2a02:	1c a6       	std	Y+44, r1	; 0x2c
    2a04:	1b a6       	std	Y+43, r1	; 0x2b
    for(Local_u16LoopCounter = 0; Local_u16LoopCounter <= Local_u16TurnsNumber / 4; Local_u16LoopCounter++)
    2a06:	1c a6       	std	Y+44, r1	; 0x2c
    2a08:	1b a6       	std	Y+43, r1	; 0x2b
    2a0a:	ab c1       	rjmp	.+854    	; 0x2d62 <SMD_voidContralFullStep+0x394>
    {
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	60 e0       	ldi	r22, 0x00	; 0
    2a10:	41 e0       	ldi	r20, 0x01	; 1
    2a12:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	61 e0       	ldi	r22, 0x01	; 1
    2a1a:	40 e0       	ldi	r20, 0x00	; 0
    2a1c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	62 e0       	ldi	r22, 0x02	; 2
    2a24:	40 e0       	ldi	r20, 0x00	; 0
    2a26:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	63 e0       	ldi	r22, 0x03	; 3
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	a0 e2       	ldi	r26, 0x20	; 32
    2a3a:	b1 e4       	ldi	r27, 0x41	; 65
    2a3c:	8f a3       	std	Y+39, r24	; 0x27
    2a3e:	98 a7       	std	Y+40, r25	; 0x28
    2a40:	a9 a7       	std	Y+41, r26	; 0x29
    2a42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a44:	6f a1       	ldd	r22, Y+39	; 0x27
    2a46:	78 a5       	ldd	r23, Y+40	; 0x28
    2a48:	89 a5       	ldd	r24, Y+41	; 0x29
    2a4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	4a ef       	ldi	r20, 0xFA	; 250
    2a52:	54 e4       	ldi	r21, 0x44	; 68
    2a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	8b a3       	std	Y+35, r24	; 0x23
    2a5e:	9c a3       	std	Y+36, r25	; 0x24
    2a60:	ad a3       	std	Y+37, r26	; 0x25
    2a62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a64:	6b a1       	ldd	r22, Y+35	; 0x23
    2a66:	7c a1       	ldd	r23, Y+36	; 0x24
    2a68:	8d a1       	ldd	r24, Y+37	; 0x25
    2a6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e8       	ldi	r20, 0x80	; 128
    2a72:	5f e3       	ldi	r21, 0x3F	; 63
    2a74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a78:	88 23       	and	r24, r24
    2a7a:	2c f4       	brge	.+10     	; 0x2a86 <SMD_voidContralFullStep+0xb8>
		__ticks = 1;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	9a a3       	std	Y+34, r25	; 0x22
    2a82:	89 a3       	std	Y+33, r24	; 0x21
    2a84:	3f c0       	rjmp	.+126    	; 0x2b04 <SMD_voidContralFullStep+0x136>
	else if (__tmp > 65535)
    2a86:	6b a1       	ldd	r22, Y+35	; 0x23
    2a88:	7c a1       	ldd	r23, Y+36	; 0x24
    2a8a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a8c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	3f ef       	ldi	r19, 0xFF	; 255
    2a92:	4f e7       	ldi	r20, 0x7F	; 127
    2a94:	57 e4       	ldi	r21, 0x47	; 71
    2a96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a9a:	18 16       	cp	r1, r24
    2a9c:	4c f5       	brge	.+82     	; 0x2af0 <SMD_voidContralFullStep+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9e:	6f a1       	ldd	r22, Y+39	; 0x27
    2aa0:	78 a5       	ldd	r23, Y+40	; 0x28
    2aa2:	89 a5       	ldd	r24, Y+41	; 0x29
    2aa4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e2       	ldi	r20, 0x20	; 32
    2aac:	51 e4       	ldi	r21, 0x41	; 65
    2aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	9a a3       	std	Y+34, r25	; 0x22
    2ac4:	89 a3       	std	Y+33, r24	; 0x21
    2ac6:	0f c0       	rjmp	.+30     	; 0x2ae6 <SMD_voidContralFullStep+0x118>
    2ac8:	88 ec       	ldi	r24, 0xC8	; 200
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	98 a3       	std	Y+32, r25	; 0x20
    2ace:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ad0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ad2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <SMD_voidContralFullStep+0x106>
    2ad8:	98 a3       	std	Y+32, r25	; 0x20
    2ada:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2adc:	89 a1       	ldd	r24, Y+33	; 0x21
    2ade:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	9a a3       	std	Y+34, r25	; 0x22
    2ae4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	69 f7       	brne	.-38     	; 0x2ac8 <SMD_voidContralFullStep+0xfa>
    2aee:	14 c0       	rjmp	.+40     	; 0x2b18 <SMD_voidContralFullStep+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af0:	6b a1       	ldd	r22, Y+35	; 0x23
    2af2:	7c a1       	ldd	r23, Y+36	; 0x24
    2af4:	8d a1       	ldd	r24, Y+37	; 0x25
    2af6:	9e a1       	ldd	r25, Y+38	; 0x26
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9a a3       	std	Y+34, r25	; 0x22
    2b02:	89 a3       	std	Y+33, r24	; 0x21
    2b04:	89 a1       	ldd	r24, Y+33	; 0x21
    2b06:	9a a1       	ldd	r25, Y+34	; 0x22
    2b08:	9e 8f       	std	Y+30, r25	; 0x1e
    2b0a:	8d 8f       	std	Y+29, r24	; 0x1d
    2b0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <SMD_voidContralFullStep+0x142>
    2b14:	9e 8f       	std	Y+30, r25	; 0x1e
    2b16:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	60 e0       	ldi	r22, 0x00	; 0
    2b1c:	40 e0       	ldi	r20, 0x00	; 0
    2b1e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, HIGH);
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	61 e0       	ldi	r22, 0x01	; 1
    2b26:	41 e0       	ldi	r20, 0x01	; 1
    2b28:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	62 e0       	ldi	r22, 0x02	; 2
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	63 e0       	ldi	r22, 0x03	; 3
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	a0 e2       	ldi	r26, 0x20	; 32
    2b46:	b1 e4       	ldi	r27, 0x41	; 65
    2b48:	89 8f       	std	Y+25, r24	; 0x19
    2b4a:	9a 8f       	std	Y+26, r25	; 0x1a
    2b4c:	ab 8f       	std	Y+27, r26	; 0x1b
    2b4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b50:	69 8d       	ldd	r22, Y+25	; 0x19
    2b52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	4a ef       	ldi	r20, 0xFA	; 250
    2b5e:	54 e4       	ldi	r21, 0x44	; 68
    2b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	8d 8b       	std	Y+21, r24	; 0x15
    2b6a:	9e 8b       	std	Y+22, r25	; 0x16
    2b6c:	af 8b       	std	Y+23, r26	; 0x17
    2b6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b70:	6d 89       	ldd	r22, Y+21	; 0x15
    2b72:	7e 89       	ldd	r23, Y+22	; 0x16
    2b74:	8f 89       	ldd	r24, Y+23	; 0x17
    2b76:	98 8d       	ldd	r25, Y+24	; 0x18
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e8       	ldi	r20, 0x80	; 128
    2b7e:	5f e3       	ldi	r21, 0x3F	; 63
    2b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b84:	88 23       	and	r24, r24
    2b86:	2c f4       	brge	.+10     	; 0x2b92 <SMD_voidContralFullStep+0x1c4>
		__ticks = 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	9c 8b       	std	Y+20, r25	; 0x14
    2b8e:	8b 8b       	std	Y+19, r24	; 0x13
    2b90:	3f c0       	rjmp	.+126    	; 0x2c10 <SMD_voidContralFullStep+0x242>
	else if (__tmp > 65535)
    2b92:	6d 89       	ldd	r22, Y+21	; 0x15
    2b94:	7e 89       	ldd	r23, Y+22	; 0x16
    2b96:	8f 89       	ldd	r24, Y+23	; 0x17
    2b98:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	3f ef       	ldi	r19, 0xFF	; 255
    2b9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ba0:	57 e4       	ldi	r21, 0x47	; 71
    2ba2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba6:	18 16       	cp	r1, r24
    2ba8:	4c f5       	brge	.+82     	; 0x2bfc <SMD_voidContralFullStep+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2baa:	69 8d       	ldd	r22, Y+25	; 0x19
    2bac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e2       	ldi	r20, 0x20	; 32
    2bb8:	51 e4       	ldi	r21, 0x41	; 65
    2bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	bc 01       	movw	r22, r24
    2bc4:	cd 01       	movw	r24, r26
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	9c 8b       	std	Y+20, r25	; 0x14
    2bd0:	8b 8b       	std	Y+19, r24	; 0x13
    2bd2:	0f c0       	rjmp	.+30     	; 0x2bf2 <SMD_voidContralFullStep+0x224>
    2bd4:	88 ec       	ldi	r24, 0xC8	; 200
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	9a 8b       	std	Y+18, r25	; 0x12
    2bda:	89 8b       	std	Y+17, r24	; 0x11
    2bdc:	89 89       	ldd	r24, Y+17	; 0x11
    2bde:	9a 89       	ldd	r25, Y+18	; 0x12
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <SMD_voidContralFullStep+0x212>
    2be4:	9a 8b       	std	Y+18, r25	; 0x12
    2be6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bea:	9c 89       	ldd	r25, Y+20	; 0x14
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	9c 8b       	std	Y+20, r25	; 0x14
    2bf0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf6:	00 97       	sbiw	r24, 0x00	; 0
    2bf8:	69 f7       	brne	.-38     	; 0x2bd4 <SMD_voidContralFullStep+0x206>
    2bfa:	14 c0       	rjmp	.+40     	; 0x2c24 <SMD_voidContralFullStep+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bfe:	7e 89       	ldd	r23, Y+22	; 0x16
    2c00:	8f 89       	ldd	r24, Y+23	; 0x17
    2c02:	98 8d       	ldd	r25, Y+24	; 0x18
    2c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	9c 8b       	std	Y+20, r25	; 0x14
    2c0e:	8b 8b       	std	Y+19, r24	; 0x13
    2c10:	8b 89       	ldd	r24, Y+19	; 0x13
    2c12:	9c 89       	ldd	r25, Y+20	; 0x14
    2c14:	98 8b       	std	Y+16, r25	; 0x10
    2c16:	8f 87       	std	Y+15, r24	; 0x0f
    2c18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c1a:	98 89       	ldd	r25, Y+16	; 0x10
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <SMD_voidContralFullStep+0x24e>
    2c20:	98 8b       	std	Y+16, r25	; 0x10
    2c22:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	61 e0       	ldi	r22, 0x01	; 1
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, HIGH);
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	62 e0       	ldi	r22, 0x02	; 2
    2c3c:	41 e0       	ldi	r20, 0x01	; 1
    2c3e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	63 e0       	ldi	r22, 0x03	; 3
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	a0 e2       	ldi	r26, 0x20	; 32
    2c52:	b1 e4       	ldi	r27, 0x41	; 65
    2c54:	8b 87       	std	Y+11, r24	; 0x0b
    2c56:	9c 87       	std	Y+12, r25	; 0x0c
    2c58:	ad 87       	std	Y+13, r26	; 0x0d
    2c5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	4a ef       	ldi	r20, 0xFA	; 250
    2c6a:	54 e4       	ldi	r21, 0x44	; 68
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	8f 83       	std	Y+7, r24	; 0x07
    2c76:	98 87       	std	Y+8, r25	; 0x08
    2c78:	a9 87       	std	Y+9, r26	; 0x09
    2c7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e8       	ldi	r20, 0x80	; 128
    2c8a:	5f e3       	ldi	r21, 0x3F	; 63
    2c8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c90:	88 23       	and	r24, r24
    2c92:	2c f4       	brge	.+10     	; 0x2c9e <SMD_voidContralFullStep+0x2d0>
		__ticks = 1;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9e 83       	std	Y+6, r25	; 0x06
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
    2c9c:	3f c0       	rjmp	.+126    	; 0x2d1c <SMD_voidContralFullStep+0x34e>
	else if (__tmp > 65535)
    2c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca0:	78 85       	ldd	r23, Y+8	; 0x08
    2ca2:	89 85       	ldd	r24, Y+9	; 0x09
    2ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	3f ef       	ldi	r19, 0xFF	; 255
    2caa:	4f e7       	ldi	r20, 0x7F	; 127
    2cac:	57 e4       	ldi	r21, 0x47	; 71
    2cae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb2:	18 16       	cp	r1, r24
    2cb4:	4c f5       	brge	.+82     	; 0x2d08 <SMD_voidContralFullStep+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e2       	ldi	r20, 0x20	; 32
    2cc4:	51 e4       	ldi	r21, 0x41	; 65
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9e 83       	std	Y+6, r25	; 0x06
    2cdc:	8d 83       	std	Y+5, r24	; 0x05
    2cde:	0f c0       	rjmp	.+30     	; 0x2cfe <SMD_voidContralFullStep+0x330>
    2ce0:	88 ec       	ldi	r24, 0xC8	; 200
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9c 83       	std	Y+4, r25	; 0x04
    2ce6:	8b 83       	std	Y+3, r24	; 0x03
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	9c 81       	ldd	r25, Y+4	; 0x04
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <SMD_voidContralFullStep+0x31e>
    2cf0:	9c 83       	std	Y+4, r25	; 0x04
    2cf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	9e 83       	std	Y+6, r25	; 0x06
    2cfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	69 f7       	brne	.-38     	; 0x2ce0 <SMD_voidContralFullStep+0x312>
    2d06:	14 c0       	rjmp	.+40     	; 0x2d30 <SMD_voidContralFullStep+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d08:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0a:	78 85       	ldd	r23, Y+8	; 0x08
    2d0c:	89 85       	ldd	r24, Y+9	; 0x09
    2d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	9e 83       	std	Y+6, r25	; 0x06
    2d1a:	8d 83       	std	Y+5, r24	; 0x05
    2d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <SMD_voidContralFullStep+0x35a>
    2d2c:	9a 83       	std	Y+2, r25	; 0x02
    2d2e:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	61 e0       	ldi	r22, 0x01	; 1
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	62 e0       	ldi	r22, 0x02	; 2
    2d48:	40 e0       	ldi	r20, 0x00	; 0
    2d4a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	63 e0       	ldi	r22, 0x03	; 3
    2d52:	41 e0       	ldi	r20, 0x01	; 1
    2d54:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
void SMD_voidContralFullStep (u16 Copy_u16Angle)
{
    
    Local_u16TurnsNumber = Copy_u16Angle / StrideAngle_OneStep;
    u16 Local_u16LoopCounter = 0;
    for(Local_u16LoopCounter = 0; Local_u16LoopCounter <= Local_u16TurnsNumber / 4; Local_u16LoopCounter++)
    2d58:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	9c a7       	std	Y+44, r25	; 0x2c
    2d60:	8b a7       	std	Y+43, r24	; 0x2b
    2d62:	80 91 e3 01 	lds	r24, 0x01E3
    2d66:	90 91 e4 01 	lds	r25, 0x01E4
    2d6a:	9c 01       	movw	r18, r24
    2d6c:	36 95       	lsr	r19
    2d6e:	27 95       	ror	r18
    2d70:	36 95       	lsr	r19
    2d72:	27 95       	ror	r18
    2d74:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d76:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d78:	28 17       	cp	r18, r24
    2d7a:	39 07       	cpc	r19, r25
    2d7c:	08 f0       	brcs	.+2      	; 0x2d80 <SMD_voidContralFullStep+0x3b2>
    2d7e:	46 ce       	rjmp	.-884    	; 0x2a0c <SMD_voidContralFullStep+0x3e>
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    }
}
    2d80:	ae 96       	adiw	r28, 0x2e	; 46
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <SMD_voidContralHalfStep>:
void SMD_voidContralHalfStep (u16 Copy_u16Angle)
{
    2d92:	0f 93       	push	r16
    2d94:	1f 93       	push	r17
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	c6 56       	subi	r28, 0x66	; 102
    2da0:	d0 40       	sbci	r29, 0x00	; 0
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	fe 01       	movw	r30, r28
    2dae:	eb 59       	subi	r30, 0x9B	; 155
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	91 83       	std	Z+1, r25	; 0x01
    2db4:	80 83       	st	Z, r24
    
    Local_u16TurnsNumber = Copy_u16Angle / StrideAngle_OneStep;
    2db6:	80 91 e2 01 	lds	r24, 0x01E2
    2dba:	28 2f       	mov	r18, r24
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	eb 59       	subi	r30, 0x9B	; 155
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	b9 01       	movw	r22, r18
    2dca:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__udivmodhi4>
    2dce:	cb 01       	movw	r24, r22
    2dd0:	90 93 e4 01 	sts	0x01E4, r25
    2dd4:	80 93 e3 01 	sts	0x01E3, r24
    u16 Local_u16LoopCounter = 0;
    2dd8:	fe 01       	movw	r30, r28
    2dda:	ed 59       	subi	r30, 0x9D	; 157
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	11 82       	std	Z+1, r1	; 0x01
    2de0:	10 82       	st	Z, r1
    for(Local_u16LoopCounter = 0; Local_u16LoopCounter <= Local_u16TurnsNumber / 8; Local_u16LoopCounter++)
    2de2:	fe 01       	movw	r30, r28
    2de4:	ed 59       	subi	r30, 0x9D	; 157
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	11 82       	std	Z+1, r1	; 0x01
    2dea:	10 82       	st	Z, r1
    2dec:	5f c4       	rjmp	.+2238   	; 0x36ac <SMD_voidContralHalfStep+0x91a>
    {
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	60 e0       	ldi	r22, 0x00	; 0
    2df2:	41 e0       	ldi	r20, 0x01	; 1
    2df4:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	61 e0       	ldi	r22, 0x01	; 1
    2dfc:	40 e0       	ldi	r20, 0x00	; 0
    2dfe:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	62 e0       	ldi	r22, 0x02	; 2
    2e06:	40 e0       	ldi	r20, 0x00	; 0
    2e08:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	63 e0       	ldi	r22, 0x03	; 3
    2e10:	40 e0       	ldi	r20, 0x00	; 0
    2e12:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    2e16:	fe 01       	movw	r30, r28
    2e18:	e1 5a       	subi	r30, 0xA1	; 161
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	a0 e2       	ldi	r26, 0x20	; 32
    2e22:	b1 e4       	ldi	r27, 0x41	; 65
    2e24:	80 83       	st	Z, r24
    2e26:	91 83       	std	Z+1, r25	; 0x01
    2e28:	a2 83       	std	Z+2, r26	; 0x02
    2e2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2c:	8e 01       	movw	r16, r28
    2e2e:	05 5a       	subi	r16, 0xA5	; 165
    2e30:	1f 4f       	sbci	r17, 0xFF	; 255
    2e32:	fe 01       	movw	r30, r28
    2e34:	e1 5a       	subi	r30, 0xA1	; 161
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	60 81       	ld	r22, Z
    2e3a:	71 81       	ldd	r23, Z+1	; 0x01
    2e3c:	82 81       	ldd	r24, Z+2	; 0x02
    2e3e:	93 81       	ldd	r25, Z+3	; 0x03
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	4a ef       	ldi	r20, 0xFA	; 250
    2e46:	54 e4       	ldi	r21, 0x44	; 68
    2e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	f8 01       	movw	r30, r16
    2e52:	80 83       	st	Z, r24
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	a2 83       	std	Z+2, r26	; 0x02
    2e58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e5 5a       	subi	r30, 0xA5	; 165
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	60 81       	ld	r22, Z
    2e62:	71 81       	ldd	r23, Z+1	; 0x01
    2e64:	82 81       	ldd	r24, Z+2	; 0x02
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e8       	ldi	r20, 0x80	; 128
    2e6e:	5f e3       	ldi	r21, 0x3F	; 63
    2e70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e74:	88 23       	and	r24, r24
    2e76:	44 f4       	brge	.+16     	; 0x2e88 <SMD_voidContralHalfStep+0xf6>
		__ticks = 1;
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e7 5a       	subi	r30, 0xA7	; 167
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	91 83       	std	Z+1, r25	; 0x01
    2e84:	80 83       	st	Z, r24
    2e86:	64 c0       	rjmp	.+200    	; 0x2f50 <SMD_voidContralHalfStep+0x1be>
	else if (__tmp > 65535)
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e5 5a       	subi	r30, 0xA5	; 165
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	60 81       	ld	r22, Z
    2e90:	71 81       	ldd	r23, Z+1	; 0x01
    2e92:	82 81       	ldd	r24, Z+2	; 0x02
    2e94:	93 81       	ldd	r25, Z+3	; 0x03
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	3f ef       	ldi	r19, 0xFF	; 255
    2e9a:	4f e7       	ldi	r20, 0x7F	; 127
    2e9c:	57 e4       	ldi	r21, 0x47	; 71
    2e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ea2:	18 16       	cp	r1, r24
    2ea4:	0c f0       	brlt	.+2      	; 0x2ea8 <SMD_voidContralHalfStep+0x116>
    2ea6:	43 c0       	rjmp	.+134    	; 0x2f2e <SMD_voidContralHalfStep+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	e1 5a       	subi	r30, 0xA1	; 161
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	60 81       	ld	r22, Z
    2eb0:	71 81       	ldd	r23, Z+1	; 0x01
    2eb2:	82 81       	ldd	r24, Z+2	; 0x02
    2eb4:	93 81       	ldd	r25, Z+3	; 0x03
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e2       	ldi	r20, 0x20	; 32
    2ebc:	51 e4       	ldi	r21, 0x41	; 65
    2ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	8e 01       	movw	r16, r28
    2ec8:	07 5a       	subi	r16, 0xA7	; 167
    2eca:	1f 4f       	sbci	r17, 0xFF	; 255
    2ecc:	bc 01       	movw	r22, r24
    2ece:	cd 01       	movw	r24, r26
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	f8 01       	movw	r30, r16
    2eda:	91 83       	std	Z+1, r25	; 0x01
    2edc:	80 83       	st	Z, r24
    2ede:	1f c0       	rjmp	.+62     	; 0x2f1e <SMD_voidContralHalfStep+0x18c>
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e9 5a       	subi	r30, 0xA9	; 169
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	88 ec       	ldi	r24, 0xC8	; 200
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	91 83       	std	Z+1, r25	; 0x01
    2eec:	80 83       	st	Z, r24
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e9 5a       	subi	r30, 0xA9	; 169
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	80 81       	ld	r24, Z
    2ef6:	91 81       	ldd	r25, Z+1	; 0x01
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <SMD_voidContralHalfStep+0x166>
    2efc:	fe 01       	movw	r30, r28
    2efe:	e9 5a       	subi	r30, 0xA9	; 169
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	91 83       	std	Z+1, r25	; 0x01
    2f04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f06:	de 01       	movw	r26, r28
    2f08:	a7 5a       	subi	r26, 0xA7	; 167
    2f0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	e7 5a       	subi	r30, 0xA7	; 167
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	80 81       	ld	r24, Z
    2f14:	91 81       	ldd	r25, Z+1	; 0x01
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	11 96       	adiw	r26, 0x01	; 1
    2f1a:	9c 93       	st	X, r25
    2f1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e7 5a       	subi	r30, 0xA7	; 167
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	80 81       	ld	r24, Z
    2f26:	91 81       	ldd	r25, Z+1	; 0x01
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	d1 f6       	brne	.-76     	; 0x2ee0 <SMD_voidContralHalfStep+0x14e>
    2f2c:	27 c0       	rjmp	.+78     	; 0x2f7c <SMD_voidContralHalfStep+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f2e:	8e 01       	movw	r16, r28
    2f30:	07 5a       	subi	r16, 0xA7	; 167
    2f32:	1f 4f       	sbci	r17, 0xFF	; 255
    2f34:	fe 01       	movw	r30, r28
    2f36:	e5 5a       	subi	r30, 0xA5	; 165
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	60 81       	ld	r22, Z
    2f3c:	71 81       	ldd	r23, Z+1	; 0x01
    2f3e:	82 81       	ldd	r24, Z+2	; 0x02
    2f40:	93 81       	ldd	r25, Z+3	; 0x03
    2f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	f8 01       	movw	r30, r16
    2f4c:	91 83       	std	Z+1, r25	; 0x01
    2f4e:	80 83       	st	Z, r24
    2f50:	de 01       	movw	r26, r28
    2f52:	ab 5a       	subi	r26, 0xAB	; 171
    2f54:	bf 4f       	sbci	r27, 0xFF	; 255
    2f56:	fe 01       	movw	r30, r28
    2f58:	e7 5a       	subi	r30, 0xA7	; 167
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	80 81       	ld	r24, Z
    2f5e:	91 81       	ldd	r25, Z+1	; 0x01
    2f60:	8d 93       	st	X+, r24
    2f62:	9c 93       	st	X, r25
    2f64:	fe 01       	movw	r30, r28
    2f66:	eb 5a       	subi	r30, 0xAB	; 171
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	80 81       	ld	r24, Z
    2f6c:	91 81       	ldd	r25, Z+1	; 0x01
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	f1 f7       	brne	.-4      	; 0x2f6e <SMD_voidContralHalfStep+0x1dc>
    2f72:	fe 01       	movw	r30, r28
    2f74:	eb 5a       	subi	r30, 0xAB	; 171
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	91 83       	std	Z+1, r25	; 0x01
    2f7a:	80 83       	st	Z, r24
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	60 e0       	ldi	r22, 0x00	; 0
    2f80:	41 e0       	ldi	r20, 0x01	; 1
    2f82:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, HIGH);
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	61 e0       	ldi	r22, 0x01	; 1
    2f8a:	41 e0       	ldi	r20, 0x01	; 1
    2f8c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	62 e0       	ldi	r22, 0x02	; 2
    2f94:	40 e0       	ldi	r20, 0x00	; 0
    2f96:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	63 e0       	ldi	r22, 0x03	; 3
    2f9e:	40 e0       	ldi	r20, 0x00	; 0
    2fa0:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	ef 5a       	subi	r30, 0xAF	; 175
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	a0 e2       	ldi	r26, 0x20	; 32
    2fb0:	b1 e4       	ldi	r27, 0x41	; 65
    2fb2:	80 83       	st	Z, r24
    2fb4:	91 83       	std	Z+1, r25	; 0x01
    2fb6:	a2 83       	std	Z+2, r26	; 0x02
    2fb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fba:	8e 01       	movw	r16, r28
    2fbc:	03 5b       	subi	r16, 0xB3	; 179
    2fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	ef 5a       	subi	r30, 0xAF	; 175
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	60 81       	ld	r22, Z
    2fc8:	71 81       	ldd	r23, Z+1	; 0x01
    2fca:	82 81       	ldd	r24, Z+2	; 0x02
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	4a ef       	ldi	r20, 0xFA	; 250
    2fd4:	54 e4       	ldi	r21, 0x44	; 68
    2fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	f8 01       	movw	r30, r16
    2fe0:	80 83       	st	Z, r24
    2fe2:	91 83       	std	Z+1, r25	; 0x01
    2fe4:	a2 83       	std	Z+2, r26	; 0x02
    2fe6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e3 5b       	subi	r30, 0xB3	; 179
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	60 81       	ld	r22, Z
    2ff0:	71 81       	ldd	r23, Z+1	; 0x01
    2ff2:	82 81       	ldd	r24, Z+2	; 0x02
    2ff4:	93 81       	ldd	r25, Z+3	; 0x03
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e8       	ldi	r20, 0x80	; 128
    2ffc:	5f e3       	ldi	r21, 0x3F	; 63
    2ffe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3002:	88 23       	and	r24, r24
    3004:	44 f4       	brge	.+16     	; 0x3016 <SMD_voidContralHalfStep+0x284>
		__ticks = 1;
    3006:	fe 01       	movw	r30, r28
    3008:	e5 5b       	subi	r30, 0xB5	; 181
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	80 83       	st	Z, r24
    3014:	64 c0       	rjmp	.+200    	; 0x30de <SMD_voidContralHalfStep+0x34c>
	else if (__tmp > 65535)
    3016:	fe 01       	movw	r30, r28
    3018:	e3 5b       	subi	r30, 0xB3	; 179
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	60 81       	ld	r22, Z
    301e:	71 81       	ldd	r23, Z+1	; 0x01
    3020:	82 81       	ldd	r24, Z+2	; 0x02
    3022:	93 81       	ldd	r25, Z+3	; 0x03
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	3f ef       	ldi	r19, 0xFF	; 255
    3028:	4f e7       	ldi	r20, 0x7F	; 127
    302a:	57 e4       	ldi	r21, 0x47	; 71
    302c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3030:	18 16       	cp	r1, r24
    3032:	0c f0       	brlt	.+2      	; 0x3036 <SMD_voidContralHalfStep+0x2a4>
    3034:	43 c0       	rjmp	.+134    	; 0x30bc <SMD_voidContralHalfStep+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3036:	fe 01       	movw	r30, r28
    3038:	ef 5a       	subi	r30, 0xAF	; 175
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	60 81       	ld	r22, Z
    303e:	71 81       	ldd	r23, Z+1	; 0x01
    3040:	82 81       	ldd	r24, Z+2	; 0x02
    3042:	93 81       	ldd	r25, Z+3	; 0x03
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	40 e2       	ldi	r20, 0x20	; 32
    304a:	51 e4       	ldi	r21, 0x41	; 65
    304c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	8e 01       	movw	r16, r28
    3056:	05 5b       	subi	r16, 0xB5	; 181
    3058:	1f 4f       	sbci	r17, 0xFF	; 255
    305a:	bc 01       	movw	r22, r24
    305c:	cd 01       	movw	r24, r26
    305e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	f8 01       	movw	r30, r16
    3068:	91 83       	std	Z+1, r25	; 0x01
    306a:	80 83       	st	Z, r24
    306c:	1f c0       	rjmp	.+62     	; 0x30ac <SMD_voidContralHalfStep+0x31a>
    306e:	fe 01       	movw	r30, r28
    3070:	e7 5b       	subi	r30, 0xB7	; 183
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	88 ec       	ldi	r24, 0xC8	; 200
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	91 83       	std	Z+1, r25	; 0x01
    307a:	80 83       	st	Z, r24
    307c:	fe 01       	movw	r30, r28
    307e:	e7 5b       	subi	r30, 0xB7	; 183
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	80 81       	ld	r24, Z
    3084:	91 81       	ldd	r25, Z+1	; 0x01
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <SMD_voidContralHalfStep+0x2f4>
    308a:	fe 01       	movw	r30, r28
    308c:	e7 5b       	subi	r30, 0xB7	; 183
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	91 83       	std	Z+1, r25	; 0x01
    3092:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3094:	de 01       	movw	r26, r28
    3096:	a5 5b       	subi	r26, 0xB5	; 181
    3098:	bf 4f       	sbci	r27, 0xFF	; 255
    309a:	fe 01       	movw	r30, r28
    309c:	e5 5b       	subi	r30, 0xB5	; 181
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	11 96       	adiw	r26, 0x01	; 1
    30a8:	9c 93       	st	X, r25
    30aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ac:	fe 01       	movw	r30, r28
    30ae:	e5 5b       	subi	r30, 0xB5	; 181
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	80 81       	ld	r24, Z
    30b4:	91 81       	ldd	r25, Z+1	; 0x01
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	d1 f6       	brne	.-76     	; 0x306e <SMD_voidContralHalfStep+0x2dc>
    30ba:	27 c0       	rjmp	.+78     	; 0x310a <SMD_voidContralHalfStep+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30bc:	8e 01       	movw	r16, r28
    30be:	05 5b       	subi	r16, 0xB5	; 181
    30c0:	1f 4f       	sbci	r17, 0xFF	; 255
    30c2:	fe 01       	movw	r30, r28
    30c4:	e3 5b       	subi	r30, 0xB3	; 179
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	60 81       	ld	r22, Z
    30ca:	71 81       	ldd	r23, Z+1	; 0x01
    30cc:	82 81       	ldd	r24, Z+2	; 0x02
    30ce:	93 81       	ldd	r25, Z+3	; 0x03
    30d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	f8 01       	movw	r30, r16
    30da:	91 83       	std	Z+1, r25	; 0x01
    30dc:	80 83       	st	Z, r24
    30de:	de 01       	movw	r26, r28
    30e0:	a9 5b       	subi	r26, 0xB9	; 185
    30e2:	bf 4f       	sbci	r27, 0xFF	; 255
    30e4:	fe 01       	movw	r30, r28
    30e6:	e5 5b       	subi	r30, 0xB5	; 181
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	80 81       	ld	r24, Z
    30ec:	91 81       	ldd	r25, Z+1	; 0x01
    30ee:	8d 93       	st	X+, r24
    30f0:	9c 93       	st	X, r25
    30f2:	fe 01       	movw	r30, r28
    30f4:	e9 5b       	subi	r30, 0xB9	; 185
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	80 81       	ld	r24, Z
    30fa:	91 81       	ldd	r25, Z+1	; 0x01
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	f1 f7       	brne	.-4      	; 0x30fc <SMD_voidContralHalfStep+0x36a>
    3100:	fe 01       	movw	r30, r28
    3102:	e9 5b       	subi	r30, 0xB9	; 185
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	91 83       	std	Z+1, r25	; 0x01
    3108:	80 83       	st	Z, r24
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	60 e0       	ldi	r22, 0x00	; 0
    310e:	40 e0       	ldi	r20, 0x00	; 0
    3110:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, HIGH);
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	61 e0       	ldi	r22, 0x01	; 1
    3118:	41 e0       	ldi	r20, 0x01	; 1
    311a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	62 e0       	ldi	r22, 0x02	; 2
    3122:	40 e0       	ldi	r20, 0x00	; 0
    3124:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	63 e0       	ldi	r22, 0x03	; 3
    312c:	40 e0       	ldi	r20, 0x00	; 0
    312e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    3132:	fe 01       	movw	r30, r28
    3134:	ed 5b       	subi	r30, 0xBD	; 189
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	a0 e2       	ldi	r26, 0x20	; 32
    313e:	b1 e4       	ldi	r27, 0x41	; 65
    3140:	80 83       	st	Z, r24
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	a2 83       	std	Z+2, r26	; 0x02
    3146:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3148:	8e 01       	movw	r16, r28
    314a:	01 5c       	subi	r16, 0xC1	; 193
    314c:	1f 4f       	sbci	r17, 0xFF	; 255
    314e:	fe 01       	movw	r30, r28
    3150:	ed 5b       	subi	r30, 0xBD	; 189
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	60 81       	ld	r22, Z
    3156:	71 81       	ldd	r23, Z+1	; 0x01
    3158:	82 81       	ldd	r24, Z+2	; 0x02
    315a:	93 81       	ldd	r25, Z+3	; 0x03
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	4a ef       	ldi	r20, 0xFA	; 250
    3162:	54 e4       	ldi	r21, 0x44	; 68
    3164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	f8 01       	movw	r30, r16
    316e:	80 83       	st	Z, r24
    3170:	91 83       	std	Z+1, r25	; 0x01
    3172:	a2 83       	std	Z+2, r26	; 0x02
    3174:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3176:	fe 01       	movw	r30, r28
    3178:	ff 96       	adiw	r30, 0x3f	; 63
    317a:	60 81       	ld	r22, Z
    317c:	71 81       	ldd	r23, Z+1	; 0x01
    317e:	82 81       	ldd	r24, Z+2	; 0x02
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e8       	ldi	r20, 0x80	; 128
    3188:	5f e3       	ldi	r21, 0x3F	; 63
    318a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    318e:	88 23       	and	r24, r24
    3190:	2c f4       	brge	.+10     	; 0x319c <SMD_voidContralHalfStep+0x40a>
		__ticks = 1;
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	9e af       	std	Y+62, r25	; 0x3e
    3198:	8d af       	std	Y+61, r24	; 0x3d
    319a:	46 c0       	rjmp	.+140    	; 0x3228 <SMD_voidContralHalfStep+0x496>
	else if (__tmp > 65535)
    319c:	fe 01       	movw	r30, r28
    319e:	ff 96       	adiw	r30, 0x3f	; 63
    31a0:	60 81       	ld	r22, Z
    31a2:	71 81       	ldd	r23, Z+1	; 0x01
    31a4:	82 81       	ldd	r24, Z+2	; 0x02
    31a6:	93 81       	ldd	r25, Z+3	; 0x03
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	3f ef       	ldi	r19, 0xFF	; 255
    31ac:	4f e7       	ldi	r20, 0x7F	; 127
    31ae:	57 e4       	ldi	r21, 0x47	; 71
    31b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b4:	18 16       	cp	r1, r24
    31b6:	64 f5       	brge	.+88     	; 0x3210 <SMD_voidContralHalfStep+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b8:	fe 01       	movw	r30, r28
    31ba:	ed 5b       	subi	r30, 0xBD	; 189
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	60 81       	ld	r22, Z
    31c0:	71 81       	ldd	r23, Z+1	; 0x01
    31c2:	82 81       	ldd	r24, Z+2	; 0x02
    31c4:	93 81       	ldd	r25, Z+3	; 0x03
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	40 e2       	ldi	r20, 0x20	; 32
    31cc:	51 e4       	ldi	r21, 0x41	; 65
    31ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	bc 01       	movw	r22, r24
    31d8:	cd 01       	movw	r24, r26
    31da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	9e af       	std	Y+62, r25	; 0x3e
    31e4:	8d af       	std	Y+61, r24	; 0x3d
    31e6:	0f c0       	rjmp	.+30     	; 0x3206 <SMD_voidContralHalfStep+0x474>
    31e8:	88 ec       	ldi	r24, 0xC8	; 200
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	9c af       	std	Y+60, r25	; 0x3c
    31ee:	8b af       	std	Y+59, r24	; 0x3b
    31f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    31f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	f1 f7       	brne	.-4      	; 0x31f4 <SMD_voidContralHalfStep+0x462>
    31f8:	9c af       	std	Y+60, r25	; 0x3c
    31fa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    31fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	9e af       	std	Y+62, r25	; 0x3e
    3204:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3206:	8d ad       	ldd	r24, Y+61	; 0x3d
    3208:	9e ad       	ldd	r25, Y+62	; 0x3e
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	69 f7       	brne	.-38     	; 0x31e8 <SMD_voidContralHalfStep+0x456>
    320e:	16 c0       	rjmp	.+44     	; 0x323c <SMD_voidContralHalfStep+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3210:	fe 01       	movw	r30, r28
    3212:	ff 96       	adiw	r30, 0x3f	; 63
    3214:	60 81       	ld	r22, Z
    3216:	71 81       	ldd	r23, Z+1	; 0x01
    3218:	82 81       	ldd	r24, Z+2	; 0x02
    321a:	93 81       	ldd	r25, Z+3	; 0x03
    321c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	9e af       	std	Y+62, r25	; 0x3e
    3226:	8d af       	std	Y+61, r24	; 0x3d
    3228:	8d ad       	ldd	r24, Y+61	; 0x3d
    322a:	9e ad       	ldd	r25, Y+62	; 0x3e
    322c:	9a af       	std	Y+58, r25	; 0x3a
    322e:	89 af       	std	Y+57, r24	; 0x39
    3230:	89 ad       	ldd	r24, Y+57	; 0x39
    3232:	9a ad       	ldd	r25, Y+58	; 0x3a
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <SMD_voidContralHalfStep+0x4a2>
    3238:	9a af       	std	Y+58, r25	; 0x3a
    323a:	89 af       	std	Y+57, r24	; 0x39
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	60 e0       	ldi	r22, 0x00	; 0
    3240:	40 e0       	ldi	r20, 0x00	; 0
    3242:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, HIGH);
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	61 e0       	ldi	r22, 0x01	; 1
    324a:	41 e0       	ldi	r20, 0x01	; 1
    324c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, HIGH);
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	62 e0       	ldi	r22, 0x02	; 2
    3254:	41 e0       	ldi	r20, 0x01	; 1
    3256:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	63 e0       	ldi	r22, 0x03	; 3
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	a0 e2       	ldi	r26, 0x20	; 32
    326a:	b1 e4       	ldi	r27, 0x41	; 65
    326c:	8d ab       	std	Y+53, r24	; 0x35
    326e:	9e ab       	std	Y+54, r25	; 0x36
    3270:	af ab       	std	Y+55, r26	; 0x37
    3272:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3274:	6d a9       	ldd	r22, Y+53	; 0x35
    3276:	7e a9       	ldd	r23, Y+54	; 0x36
    3278:	8f a9       	ldd	r24, Y+55	; 0x37
    327a:	98 ad       	ldd	r25, Y+56	; 0x38
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	4a ef       	ldi	r20, 0xFA	; 250
    3282:	54 e4       	ldi	r21, 0x44	; 68
    3284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	89 ab       	std	Y+49, r24	; 0x31
    328e:	9a ab       	std	Y+50, r25	; 0x32
    3290:	ab ab       	std	Y+51, r26	; 0x33
    3292:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3294:	69 a9       	ldd	r22, Y+49	; 0x31
    3296:	7a a9       	ldd	r23, Y+50	; 0x32
    3298:	8b a9       	ldd	r24, Y+51	; 0x33
    329a:	9c a9       	ldd	r25, Y+52	; 0x34
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	40 e8       	ldi	r20, 0x80	; 128
    32a2:	5f e3       	ldi	r21, 0x3F	; 63
    32a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32a8:	88 23       	and	r24, r24
    32aa:	2c f4       	brge	.+10     	; 0x32b6 <SMD_voidContralHalfStep+0x524>
		__ticks = 1;
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	98 ab       	std	Y+48, r25	; 0x30
    32b2:	8f a7       	std	Y+47, r24	; 0x2f
    32b4:	3f c0       	rjmp	.+126    	; 0x3334 <SMD_voidContralHalfStep+0x5a2>
	else if (__tmp > 65535)
    32b6:	69 a9       	ldd	r22, Y+49	; 0x31
    32b8:	7a a9       	ldd	r23, Y+50	; 0x32
    32ba:	8b a9       	ldd	r24, Y+51	; 0x33
    32bc:	9c a9       	ldd	r25, Y+52	; 0x34
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	3f ef       	ldi	r19, 0xFF	; 255
    32c2:	4f e7       	ldi	r20, 0x7F	; 127
    32c4:	57 e4       	ldi	r21, 0x47	; 71
    32c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ca:	18 16       	cp	r1, r24
    32cc:	4c f5       	brge	.+82     	; 0x3320 <SMD_voidContralHalfStep+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ce:	6d a9       	ldd	r22, Y+53	; 0x35
    32d0:	7e a9       	ldd	r23, Y+54	; 0x36
    32d2:	8f a9       	ldd	r24, Y+55	; 0x37
    32d4:	98 ad       	ldd	r25, Y+56	; 0x38
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	40 e2       	ldi	r20, 0x20	; 32
    32dc:	51 e4       	ldi	r21, 0x41	; 65
    32de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	bc 01       	movw	r22, r24
    32e8:	cd 01       	movw	r24, r26
    32ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	98 ab       	std	Y+48, r25	; 0x30
    32f4:	8f a7       	std	Y+47, r24	; 0x2f
    32f6:	0f c0       	rjmp	.+30     	; 0x3316 <SMD_voidContralHalfStep+0x584>
    32f8:	88 ec       	ldi	r24, 0xC8	; 200
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	9e a7       	std	Y+46, r25	; 0x2e
    32fe:	8d a7       	std	Y+45, r24	; 0x2d
    3300:	8d a5       	ldd	r24, Y+45	; 0x2d
    3302:	9e a5       	ldd	r25, Y+46	; 0x2e
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	f1 f7       	brne	.-4      	; 0x3304 <SMD_voidContralHalfStep+0x572>
    3308:	9e a7       	std	Y+46, r25	; 0x2e
    330a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330c:	8f a5       	ldd	r24, Y+47	; 0x2f
    330e:	98 a9       	ldd	r25, Y+48	; 0x30
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	98 ab       	std	Y+48, r25	; 0x30
    3314:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3316:	8f a5       	ldd	r24, Y+47	; 0x2f
    3318:	98 a9       	ldd	r25, Y+48	; 0x30
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	69 f7       	brne	.-38     	; 0x32f8 <SMD_voidContralHalfStep+0x566>
    331e:	14 c0       	rjmp	.+40     	; 0x3348 <SMD_voidContralHalfStep+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3320:	69 a9       	ldd	r22, Y+49	; 0x31
    3322:	7a a9       	ldd	r23, Y+50	; 0x32
    3324:	8b a9       	ldd	r24, Y+51	; 0x33
    3326:	9c a9       	ldd	r25, Y+52	; 0x34
    3328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332c:	dc 01       	movw	r26, r24
    332e:	cb 01       	movw	r24, r22
    3330:	98 ab       	std	Y+48, r25	; 0x30
    3332:	8f a7       	std	Y+47, r24	; 0x2f
    3334:	8f a5       	ldd	r24, Y+47	; 0x2f
    3336:	98 a9       	ldd	r25, Y+48	; 0x30
    3338:	9c a7       	std	Y+44, r25	; 0x2c
    333a:	8b a7       	std	Y+43, r24	; 0x2b
    333c:	8b a5       	ldd	r24, Y+43	; 0x2b
    333e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3340:	01 97       	sbiw	r24, 0x01	; 1
    3342:	f1 f7       	brne	.-4      	; 0x3340 <SMD_voidContralHalfStep+0x5ae>
    3344:	9c a7       	std	Y+44, r25	; 0x2c
    3346:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	60 e0       	ldi	r22, 0x00	; 0
    334c:	40 e0       	ldi	r20, 0x00	; 0
    334e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	61 e0       	ldi	r22, 0x01	; 1
    3356:	40 e0       	ldi	r20, 0x00	; 0
    3358:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, HIGH);
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	62 e0       	ldi	r22, 0x02	; 2
    3360:	41 e0       	ldi	r20, 0x01	; 1
    3362:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, LOW);
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	63 e0       	ldi	r22, 0x03	; 3
    336a:	40 e0       	ldi	r20, 0x00	; 0
    336c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	a0 e2       	ldi	r26, 0x20	; 32
    3376:	b1 e4       	ldi	r27, 0x41	; 65
    3378:	8f a3       	std	Y+39, r24	; 0x27
    337a:	98 a7       	std	Y+40, r25	; 0x28
    337c:	a9 a7       	std	Y+41, r26	; 0x29
    337e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3380:	6f a1       	ldd	r22, Y+39	; 0x27
    3382:	78 a5       	ldd	r23, Y+40	; 0x28
    3384:	89 a5       	ldd	r24, Y+41	; 0x29
    3386:	9a a5       	ldd	r25, Y+42	; 0x2a
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	4a ef       	ldi	r20, 0xFA	; 250
    338e:	54 e4       	ldi	r21, 0x44	; 68
    3390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	8b a3       	std	Y+35, r24	; 0x23
    339a:	9c a3       	std	Y+36, r25	; 0x24
    339c:	ad a3       	std	Y+37, r26	; 0x25
    339e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33a0:	6b a1       	ldd	r22, Y+35	; 0x23
    33a2:	7c a1       	ldd	r23, Y+36	; 0x24
    33a4:	8d a1       	ldd	r24, Y+37	; 0x25
    33a6:	9e a1       	ldd	r25, Y+38	; 0x26
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e8       	ldi	r20, 0x80	; 128
    33ae:	5f e3       	ldi	r21, 0x3F	; 63
    33b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33b4:	88 23       	and	r24, r24
    33b6:	2c f4       	brge	.+10     	; 0x33c2 <SMD_voidContralHalfStep+0x630>
		__ticks = 1;
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	9a a3       	std	Y+34, r25	; 0x22
    33be:	89 a3       	std	Y+33, r24	; 0x21
    33c0:	3f c0       	rjmp	.+126    	; 0x3440 <SMD_voidContralHalfStep+0x6ae>
	else if (__tmp > 65535)
    33c2:	6b a1       	ldd	r22, Y+35	; 0x23
    33c4:	7c a1       	ldd	r23, Y+36	; 0x24
    33c6:	8d a1       	ldd	r24, Y+37	; 0x25
    33c8:	9e a1       	ldd	r25, Y+38	; 0x26
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	3f ef       	ldi	r19, 0xFF	; 255
    33ce:	4f e7       	ldi	r20, 0x7F	; 127
    33d0:	57 e4       	ldi	r21, 0x47	; 71
    33d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d6:	18 16       	cp	r1, r24
    33d8:	4c f5       	brge	.+82     	; 0x342c <SMD_voidContralHalfStep+0x69a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33da:	6f a1       	ldd	r22, Y+39	; 0x27
    33dc:	78 a5       	ldd	r23, Y+40	; 0x28
    33de:	89 a5       	ldd	r24, Y+41	; 0x29
    33e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	40 e2       	ldi	r20, 0x20	; 32
    33e8:	51 e4       	ldi	r21, 0x41	; 65
    33ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	bc 01       	movw	r22, r24
    33f4:	cd 01       	movw	r24, r26
    33f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	9a a3       	std	Y+34, r25	; 0x22
    3400:	89 a3       	std	Y+33, r24	; 0x21
    3402:	0f c0       	rjmp	.+30     	; 0x3422 <SMD_voidContralHalfStep+0x690>
    3404:	88 ec       	ldi	r24, 0xC8	; 200
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	98 a3       	std	Y+32, r25	; 0x20
    340a:	8f 8f       	std	Y+31, r24	; 0x1f
    340c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    340e:	98 a1       	ldd	r25, Y+32	; 0x20
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	f1 f7       	brne	.-4      	; 0x3410 <SMD_voidContralHalfStep+0x67e>
    3414:	98 a3       	std	Y+32, r25	; 0x20
    3416:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3418:	89 a1       	ldd	r24, Y+33	; 0x21
    341a:	9a a1       	ldd	r25, Y+34	; 0x22
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	9a a3       	std	Y+34, r25	; 0x22
    3420:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3422:	89 a1       	ldd	r24, Y+33	; 0x21
    3424:	9a a1       	ldd	r25, Y+34	; 0x22
    3426:	00 97       	sbiw	r24, 0x00	; 0
    3428:	69 f7       	brne	.-38     	; 0x3404 <SMD_voidContralHalfStep+0x672>
    342a:	14 c0       	rjmp	.+40     	; 0x3454 <SMD_voidContralHalfStep+0x6c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    342c:	6b a1       	ldd	r22, Y+35	; 0x23
    342e:	7c a1       	ldd	r23, Y+36	; 0x24
    3430:	8d a1       	ldd	r24, Y+37	; 0x25
    3432:	9e a1       	ldd	r25, Y+38	; 0x26
    3434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	9a a3       	std	Y+34, r25	; 0x22
    343e:	89 a3       	std	Y+33, r24	; 0x21
    3440:	89 a1       	ldd	r24, Y+33	; 0x21
    3442:	9a a1       	ldd	r25, Y+34	; 0x22
    3444:	9e 8f       	std	Y+30, r25	; 0x1e
    3446:	8d 8f       	std	Y+29, r24	; 0x1d
    3448:	8d 8d       	ldd	r24, Y+29	; 0x1d
    344a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	f1 f7       	brne	.-4      	; 0x344c <SMD_voidContralHalfStep+0x6ba>
    3450:	9e 8f       	std	Y+30, r25	; 0x1e
    3452:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	60 e0       	ldi	r22, 0x00	; 0
    3458:	40 e0       	ldi	r20, 0x00	; 0
    345a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	61 e0       	ldi	r22, 0x01	; 1
    3462:	40 e0       	ldi	r20, 0x00	; 0
    3464:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, HIGH);
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	62 e0       	ldi	r22, 0x02	; 2
    346c:	41 e0       	ldi	r20, 0x01	; 1
    346e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	63 e0       	ldi	r22, 0x03	; 3
    3476:	41 e0       	ldi	r20, 0x01	; 1
    3478:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	a0 e2       	ldi	r26, 0x20	; 32
    3482:	b1 e4       	ldi	r27, 0x41	; 65
    3484:	89 8f       	std	Y+25, r24	; 0x19
    3486:	9a 8f       	std	Y+26, r25	; 0x1a
    3488:	ab 8f       	std	Y+27, r26	; 0x1b
    348a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    348c:	69 8d       	ldd	r22, Y+25	; 0x19
    348e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	4a ef       	ldi	r20, 0xFA	; 250
    349a:	54 e4       	ldi	r21, 0x44	; 68
    349c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	8d 8b       	std	Y+21, r24	; 0x15
    34a6:	9e 8b       	std	Y+22, r25	; 0x16
    34a8:	af 8b       	std	Y+23, r26	; 0x17
    34aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34ac:	6d 89       	ldd	r22, Y+21	; 0x15
    34ae:	7e 89       	ldd	r23, Y+22	; 0x16
    34b0:	8f 89       	ldd	r24, Y+23	; 0x17
    34b2:	98 8d       	ldd	r25, Y+24	; 0x18
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e8       	ldi	r20, 0x80	; 128
    34ba:	5f e3       	ldi	r21, 0x3F	; 63
    34bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34c0:	88 23       	and	r24, r24
    34c2:	2c f4       	brge	.+10     	; 0x34ce <SMD_voidContralHalfStep+0x73c>
		__ticks = 1;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	9c 8b       	std	Y+20, r25	; 0x14
    34ca:	8b 8b       	std	Y+19, r24	; 0x13
    34cc:	3f c0       	rjmp	.+126    	; 0x354c <SMD_voidContralHalfStep+0x7ba>
	else if (__tmp > 65535)
    34ce:	6d 89       	ldd	r22, Y+21	; 0x15
    34d0:	7e 89       	ldd	r23, Y+22	; 0x16
    34d2:	8f 89       	ldd	r24, Y+23	; 0x17
    34d4:	98 8d       	ldd	r25, Y+24	; 0x18
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	3f ef       	ldi	r19, 0xFF	; 255
    34da:	4f e7       	ldi	r20, 0x7F	; 127
    34dc:	57 e4       	ldi	r21, 0x47	; 71
    34de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34e2:	18 16       	cp	r1, r24
    34e4:	4c f5       	brge	.+82     	; 0x3538 <SMD_voidContralHalfStep+0x7a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e6:	69 8d       	ldd	r22, Y+25	; 0x19
    34e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e2       	ldi	r20, 0x20	; 32
    34f4:	51 e4       	ldi	r21, 0x41	; 65
    34f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	9c 8b       	std	Y+20, r25	; 0x14
    350c:	8b 8b       	std	Y+19, r24	; 0x13
    350e:	0f c0       	rjmp	.+30     	; 0x352e <SMD_voidContralHalfStep+0x79c>
    3510:	88 ec       	ldi	r24, 0xC8	; 200
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	9a 8b       	std	Y+18, r25	; 0x12
    3516:	89 8b       	std	Y+17, r24	; 0x11
    3518:	89 89       	ldd	r24, Y+17	; 0x11
    351a:	9a 89       	ldd	r25, Y+18	; 0x12
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	f1 f7       	brne	.-4      	; 0x351c <SMD_voidContralHalfStep+0x78a>
    3520:	9a 8b       	std	Y+18, r25	; 0x12
    3522:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3524:	8b 89       	ldd	r24, Y+19	; 0x13
    3526:	9c 89       	ldd	r25, Y+20	; 0x14
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	9c 8b       	std	Y+20, r25	; 0x14
    352c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352e:	8b 89       	ldd	r24, Y+19	; 0x13
    3530:	9c 89       	ldd	r25, Y+20	; 0x14
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	69 f7       	brne	.-38     	; 0x3510 <SMD_voidContralHalfStep+0x77e>
    3536:	14 c0       	rjmp	.+40     	; 0x3560 <SMD_voidContralHalfStep+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3538:	6d 89       	ldd	r22, Y+21	; 0x15
    353a:	7e 89       	ldd	r23, Y+22	; 0x16
    353c:	8f 89       	ldd	r24, Y+23	; 0x17
    353e:	98 8d       	ldd	r25, Y+24	; 0x18
    3540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	9c 8b       	std	Y+20, r25	; 0x14
    354a:	8b 8b       	std	Y+19, r24	; 0x13
    354c:	8b 89       	ldd	r24, Y+19	; 0x13
    354e:	9c 89       	ldd	r25, Y+20	; 0x14
    3550:	98 8b       	std	Y+16, r25	; 0x10
    3552:	8f 87       	std	Y+15, r24	; 0x0f
    3554:	8f 85       	ldd	r24, Y+15	; 0x0f
    3556:	98 89       	ldd	r25, Y+16	; 0x10
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <SMD_voidContralHalfStep+0x7c6>
    355c:	98 8b       	std	Y+16, r25	; 0x10
    355e:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, LOW);
    3560:	80 e0       	ldi	r24, 0x00	; 0
    3562:	60 e0       	ldi	r22, 0x00	; 0
    3564:	40 e0       	ldi	r20, 0x00	; 0
    3566:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	61 e0       	ldi	r22, 0x01	; 1
    356e:	40 e0       	ldi	r20, 0x00	; 0
    3570:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	62 e0       	ldi	r22, 0x02	; 2
    3578:	40 e0       	ldi	r20, 0x00	; 0
    357a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	63 e0       	ldi	r22, 0x03	; 3
    3582:	41 e0       	ldi	r20, 0x01	; 1
    3584:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	a0 e2       	ldi	r26, 0x20	; 32
    358e:	b1 e4       	ldi	r27, 0x41	; 65
    3590:	8b 87       	std	Y+11, r24	; 0x0b
    3592:	9c 87       	std	Y+12, r25	; 0x0c
    3594:	ad 87       	std	Y+13, r26	; 0x0d
    3596:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3598:	6b 85       	ldd	r22, Y+11	; 0x0b
    359a:	7c 85       	ldd	r23, Y+12	; 0x0c
    359c:	8d 85       	ldd	r24, Y+13	; 0x0d
    359e:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	4a ef       	ldi	r20, 0xFA	; 250
    35a6:	54 e4       	ldi	r21, 0x44	; 68
    35a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	8f 83       	std	Y+7, r24	; 0x07
    35b2:	98 87       	std	Y+8, r25	; 0x08
    35b4:	a9 87       	std	Y+9, r26	; 0x09
    35b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35b8:	6f 81       	ldd	r22, Y+7	; 0x07
    35ba:	78 85       	ldd	r23, Y+8	; 0x08
    35bc:	89 85       	ldd	r24, Y+9	; 0x09
    35be:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	40 e8       	ldi	r20, 0x80	; 128
    35c6:	5f e3       	ldi	r21, 0x3F	; 63
    35c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35cc:	88 23       	and	r24, r24
    35ce:	2c f4       	brge	.+10     	; 0x35da <SMD_voidContralHalfStep+0x848>
		__ticks = 1;
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	9e 83       	std	Y+6, r25	; 0x06
    35d6:	8d 83       	std	Y+5, r24	; 0x05
    35d8:	3f c0       	rjmp	.+126    	; 0x3658 <SMD_voidContralHalfStep+0x8c6>
	else if (__tmp > 65535)
    35da:	6f 81       	ldd	r22, Y+7	; 0x07
    35dc:	78 85       	ldd	r23, Y+8	; 0x08
    35de:	89 85       	ldd	r24, Y+9	; 0x09
    35e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	3f ef       	ldi	r19, 0xFF	; 255
    35e6:	4f e7       	ldi	r20, 0x7F	; 127
    35e8:	57 e4       	ldi	r21, 0x47	; 71
    35ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35ee:	18 16       	cp	r1, r24
    35f0:	4c f5       	brge	.+82     	; 0x3644 <SMD_voidContralHalfStep+0x8b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e2       	ldi	r20, 0x20	; 32
    3600:	51 e4       	ldi	r21, 0x41	; 65
    3602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	bc 01       	movw	r22, r24
    360c:	cd 01       	movw	r24, r26
    360e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	9e 83       	std	Y+6, r25	; 0x06
    3618:	8d 83       	std	Y+5, r24	; 0x05
    361a:	0f c0       	rjmp	.+30     	; 0x363a <SMD_voidContralHalfStep+0x8a8>
    361c:	88 ec       	ldi	r24, 0xC8	; 200
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	9c 83       	std	Y+4, r25	; 0x04
    3622:	8b 83       	std	Y+3, r24	; 0x03
    3624:	8b 81       	ldd	r24, Y+3	; 0x03
    3626:	9c 81       	ldd	r25, Y+4	; 0x04
    3628:	01 97       	sbiw	r24, 0x01	; 1
    362a:	f1 f7       	brne	.-4      	; 0x3628 <SMD_voidContralHalfStep+0x896>
    362c:	9c 83       	std	Y+4, r25	; 0x04
    362e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3630:	8d 81       	ldd	r24, Y+5	; 0x05
    3632:	9e 81       	ldd	r25, Y+6	; 0x06
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	9e 83       	std	Y+6, r25	; 0x06
    3638:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363a:	8d 81       	ldd	r24, Y+5	; 0x05
    363c:	9e 81       	ldd	r25, Y+6	; 0x06
    363e:	00 97       	sbiw	r24, 0x00	; 0
    3640:	69 f7       	brne	.-38     	; 0x361c <SMD_voidContralHalfStep+0x88a>
    3642:	14 c0       	rjmp	.+40     	; 0x366c <SMD_voidContralHalfStep+0x8da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3644:	6f 81       	ldd	r22, Y+7	; 0x07
    3646:	78 85       	ldd	r23, Y+8	; 0x08
    3648:	89 85       	ldd	r24, Y+9	; 0x09
    364a:	9a 85       	ldd	r25, Y+10	; 0x0a
    364c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	9e 83       	std	Y+6, r25	; 0x06
    3656:	8d 83       	std	Y+5, r24	; 0x05
    3658:	8d 81       	ldd	r24, Y+5	; 0x05
    365a:	9e 81       	ldd	r25, Y+6	; 0x06
    365c:	9a 83       	std	Y+2, r25	; 0x02
    365e:	89 83       	std	Y+1, r24	; 0x01
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	9a 81       	ldd	r25, Y+2	; 0x02
    3664:	01 97       	sbiw	r24, 0x01	; 1
    3666:	f1 f7       	brne	.-4      	; 0x3664 <SMD_voidContralHalfStep+0x8d2>
    3668:	9a 83       	std	Y+2, r25	; 0x02
    366a:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(10);
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	60 e0       	ldi	r22, 0x00	; 0
    3670:	41 e0       	ldi	r20, 0x01	; 1
    3672:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	61 e0       	ldi	r22, 0x01	; 1
    367a:	40 e0       	ldi	r20, 0x00	; 0
    367c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	62 e0       	ldi	r22, 0x02	; 2
    3684:	40 e0       	ldi	r20, 0x00	; 0
    3686:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	63 e0       	ldi	r22, 0x03	; 3
    368e:	41 e0       	ldi	r20, 0x01	; 1
    3690:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
void SMD_voidContralHalfStep (u16 Copy_u16Angle)
{
    
    Local_u16TurnsNumber = Copy_u16Angle / StrideAngle_OneStep;
    u16 Local_u16LoopCounter = 0;
    for(Local_u16LoopCounter = 0; Local_u16LoopCounter <= Local_u16TurnsNumber / 8; Local_u16LoopCounter++)
    3694:	de 01       	movw	r26, r28
    3696:	ad 59       	subi	r26, 0x9D	; 157
    3698:	bf 4f       	sbci	r27, 0xFF	; 255
    369a:	fe 01       	movw	r30, r28
    369c:	ed 59       	subi	r30, 0x9D	; 157
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	80 81       	ld	r24, Z
    36a2:	91 81       	ldd	r25, Z+1	; 0x01
    36a4:	01 96       	adiw	r24, 0x01	; 1
    36a6:	11 96       	adiw	r26, 0x01	; 1
    36a8:	9c 93       	st	X, r25
    36aa:	8e 93       	st	-X, r24
    36ac:	80 91 e3 01 	lds	r24, 0x01E3
    36b0:	90 91 e4 01 	lds	r25, 0x01E4
    36b4:	9c 01       	movw	r18, r24
    36b6:	36 95       	lsr	r19
    36b8:	27 95       	ror	r18
    36ba:	36 95       	lsr	r19
    36bc:	27 95       	ror	r18
    36be:	36 95       	lsr	r19
    36c0:	27 95       	ror	r18
    36c2:	fe 01       	movw	r30, r28
    36c4:	ed 59       	subi	r30, 0x9D	; 157
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	80 81       	ld	r24, Z
    36ca:	91 81       	ldd	r25, Z+1	; 0x01
    36cc:	28 17       	cp	r18, r24
    36ce:	39 07       	cpc	r19, r25
    36d0:	08 f0       	brcs	.+2      	; 0x36d4 <SMD_voidContralHalfStep+0x942>
    36d2:	8d cb       	rjmp	.-2278   	; 0x2dee <SMD_voidContralHalfStep+0x5c>
        DIO_voidSetPinValue(SMD_PORT, SMD_BLUE_PIN, HIGH);
        DIO_voidSetPinValue(SMD_PORT, SMD_PINK_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_YELLOW_PIN, LOW);
        DIO_voidSetPinValue(SMD_PORT, SMD_ORANGE_PIN, HIGH);
    }
}
    36d4:	ca 59       	subi	r28, 0x9A	; 154
    36d6:	df 4f       	sbci	r29, 0xFF	; 255
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	de bf       	out	0x3e, r29	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	cd bf       	out	0x3d, r28	; 61
    36e2:	cf 91       	pop	r28
    36e4:	df 91       	pop	r29
    36e6:	1f 91       	pop	r17
    36e8:	0f 91       	pop	r16
    36ea:	08 95       	ret

000036ec <SMD_voidStop>:

void SMD_voidStop(void)
{
    36ec:	df 93       	push	r29
    36ee:	cf 93       	push	r28
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
    DIO_voidSetPortSpecificDirection(SMD_PORT, 0x00);
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	60 e0       	ldi	r22, 0x00	; 0
    36f8:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_voidSetPortSpecificDirection>
}
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	08 95       	ret

00003702 <LM35_voidInit>:
#include "LM35_private.h"
#include "LM35_config.h"


void LM35_voidInit(void)
{
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(LM35_PORT, LM35_CHANNEL, INPUT);
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	60 e0       	ldi	r22, 0x00	; 0
    370e:	40 e0       	ldi	r20, 0x00	; 0
    3710:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_voidSetPinDirection>
	ADC_voidInit();
    3714:	0e 94 67 13 	call	0x26ce	; 0x26ce <ADC_voidInit>
}
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <LM35_u8GetTempratureSynchronous>:

static u8 StepSize = (u8)(5000UL / 256UL);
u8 LM35_u8GetTempratureSynchronous (void)
{
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	00 d0       	rcall	.+0      	; 0x3724 <LM35_u8GetTempratureSynchronous+0x6>
    3724:	00 d0       	rcall	.+0      	; 0x3726 <LM35_u8GetTempratureSynchronous+0x8>
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8DigitalValue  = 0;
    372a:	1c 82       	std	Y+4, r1	; 0x04
	u16 Local_u8AnalogValue  = 0;
    372c:	1b 82       	std	Y+3, r1	; 0x03
    372e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8TempValue     = 0;
    3730:	19 82       	std	Y+1, r1	; 0x01
	
	Local_u8DigitalValue = ACD_voidStartConversionSynchronous(ADC_Channel_0);
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	0e 94 ab 13 	call	0x2756	; 0x2756 <ACD_voidStartConversionSynchronous>
    3738:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8AnalogValue  = (u16) ((u8)Local_u8DigitalValue * (u8)StepSize);
    373a:	8c 81       	ldd	r24, Y+4	; 0x04
    373c:	28 2f       	mov	r18, r24
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	80 91 a9 01 	lds	r24, 0x01A9
    3744:	88 2f       	mov	r24, r24
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	ac 01       	movw	r20, r24
    374a:	24 9f       	mul	r18, r20
    374c:	c0 01       	movw	r24, r0
    374e:	25 9f       	mul	r18, r21
    3750:	90 0d       	add	r25, r0
    3752:	34 9f       	mul	r19, r20
    3754:	90 0d       	add	r25, r0
    3756:	11 24       	eor	r1, r1
    3758:	9b 83       	std	Y+3, r25	; 0x03
    375a:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8TempValue    = (u8)((u32)Local_u8AnalogValue / 10UL);
    375c:	8a 81       	ldd	r24, Y+2	; 0x02
    375e:	9b 81       	ldd	r25, Y+3	; 0x03
    3760:	2a e0       	ldi	r18, 0x0A	; 10
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	b9 01       	movw	r22, r18
    3766:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__udivmodhi4>
    376a:	cb 01       	movw	r24, r22
    376c:	89 83       	std	Y+1, r24	; 0x01

	return(Local_u8TempValue);
    376e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3770:	0f 90       	pop	r0
    3772:	0f 90       	pop	r0
    3774:	0f 90       	pop	r0
    3776:	0f 90       	pop	r0
    3778:	cf 91       	pop	r28
    377a:	df 91       	pop	r29
    377c:	08 95       	ret

0000377e <LM35_u8GetTempratureASynchronous>:

u8 TempValue   = 255;
void LM35_u8GetTempratureASynchronous(u8 *Ref_u8Digital)
{
    377e:	df 93       	push	r29
    3780:	cf 93       	push	r28
    3782:	00 d0       	rcall	.+0      	; 0x3784 <LM35_u8GetTempratureASynchronous+0x6>
    3784:	00 d0       	rcall	.+0      	; 0x3786 <LM35_u8GetTempratureASynchronous+0x8>
    3786:	0f 92       	push	r0
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	9d 83       	std	Y+5, r25	; 0x05
    378e:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8DigitalValue  = 0;
    3790:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u8AnalogValue  = 0;
    3792:	1a 82       	std	Y+2, r1	; 0x02
    3794:	19 82       	std	Y+1, r1	; 0x01
	Local_u8AnalogValue = (u16) ((u8)(*Ref_u8Digital)) * (u8)StepSize;
    3796:	ec 81       	ldd	r30, Y+4	; 0x04
    3798:	fd 81       	ldd	r31, Y+5	; 0x05
    379a:	80 81       	ld	r24, Z
    379c:	28 2f       	mov	r18, r24
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	80 91 a9 01 	lds	r24, 0x01A9
    37a4:	88 2f       	mov	r24, r24
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	ac 01       	movw	r20, r24
    37aa:	24 9f       	mul	r18, r20
    37ac:	c0 01       	movw	r24, r0
    37ae:	25 9f       	mul	r18, r21
    37b0:	90 0d       	add	r25, r0
    37b2:	34 9f       	mul	r19, r20
    37b4:	90 0d       	add	r25, r0
    37b6:	11 24       	eor	r1, r1
    37b8:	9a 83       	std	Y+2, r25	; 0x02
    37ba:	89 83       	std	Y+1, r24	; 0x01
	TempValue = (u8)((u32)Local_u8AnalogValue / 10UL);
    37bc:	89 81       	ldd	r24, Y+1	; 0x01
    37be:	9a 81       	ldd	r25, Y+2	; 0x02
    37c0:	2a e0       	ldi	r18, 0x0A	; 10
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	b9 01       	movw	r22, r18
    37c6:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__udivmodhi4>
    37ca:	cb 01       	movw	r24, r22
    37cc:	80 93 aa 01 	sts	0x01AA, r24

}
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	cf 91       	pop	r28
    37dc:	df 91       	pop	r29
    37de:	08 95       	ret

000037e0 <LM35_ASynchronous>:

u8 LM35_ASynchronous (void)
{
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	cd b7       	in	r28, 0x3d	; 61
    37e6:	de b7       	in	r29, 0x3e	; 62
	ACD_voidStartConversionASynchronous(ADC_Channel_0, &LM35_u8GetTempratureASynchronous);
    37e8:	2f eb       	ldi	r18, 0xBF	; 191
    37ea:	3b e1       	ldi	r19, 0x1B	; 27
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	b9 01       	movw	r22, r18
    37f0:	0e 94 29 14 	call	0x2852	; 0x2852 <ACD_voidStartConversionASynchronous>
	return(TempValue);
    37f4:	80 91 aa 01 	lds	r24, 0x01AA
}
    37f8:	cf 91       	pop	r28
    37fa:	df 91       	pop	r29
    37fc:	08 95       	ret

000037fe <voidSendCommand>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

static void voidSendCommand(u8 Copy_u8Command)
{
    37fe:	df 93       	push	r29
    3800:	cf 93       	push	r28
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
    3806:	2f 97       	sbiw	r28, 0x0f	; 15
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	f8 94       	cli
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	cd bf       	out	0x3d, r28	; 61
    3812:	8f 87       	std	Y+15, r24	; 0x0f
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_Rw, LOW);
    3814:	83 e0       	ldi	r24, 0x03	; 3
    3816:	66 e0       	ldi	r22, 0x06	; 6
    3818:	40 e0       	ldi	r20, 0x00	; 0
    381a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_RS, LOW);
    381e:	83 e0       	ldi	r24, 0x03	; 3
    3820:	63 e0       	ldi	r22, 0x03	; 3
    3822:	40 e0       	ldi	r20, 0x00	; 0
    3824:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>

    DIO_voidSetPortSpecificValue(LCD_DATA_PORT, Copy_u8Command);
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	6f 85       	ldd	r22, Y+15	; 0x0f
    382c:	0e 94 a0 11 	call	0x2340	; 0x2340 <DIO_voidSetPortSpecificValue>

    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, LOW);
    3830:	83 e0       	ldi	r24, 0x03	; 3
    3832:	64 e0       	ldi	r22, 0x04	; 4
    3834:	40 e0       	ldi	r20, 0x00	; 0
    3836:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, HIGH);
    383a:	83 e0       	ldi	r24, 0x03	; 3
    383c:	64 e0       	ldi	r22, 0x04	; 4
    383e:	41 e0       	ldi	r20, 0x01	; 1
    3840:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	a0 e0       	ldi	r26, 0x00	; 0
    384a:	b0 e4       	ldi	r27, 0x40	; 64
    384c:	8b 87       	std	Y+11, r24	; 0x0b
    384e:	9c 87       	std	Y+12, r25	; 0x0c
    3850:	ad 87       	std	Y+13, r26	; 0x0d
    3852:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3854:	6b 85       	ldd	r22, Y+11	; 0x0b
    3856:	7c 85       	ldd	r23, Y+12	; 0x0c
    3858:	8d 85       	ldd	r24, Y+13	; 0x0d
    385a:	9e 85       	ldd	r25, Y+14	; 0x0e
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	4a ef       	ldi	r20, 0xFA	; 250
    3862:	54 e4       	ldi	r21, 0x44	; 68
    3864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	8f 83       	std	Y+7, r24	; 0x07
    386e:	98 87       	std	Y+8, r25	; 0x08
    3870:	a9 87       	std	Y+9, r26	; 0x09
    3872:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3874:	6f 81       	ldd	r22, Y+7	; 0x07
    3876:	78 85       	ldd	r23, Y+8	; 0x08
    3878:	89 85       	ldd	r24, Y+9	; 0x09
    387a:	9a 85       	ldd	r25, Y+10	; 0x0a
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e8       	ldi	r20, 0x80	; 128
    3882:	5f e3       	ldi	r21, 0x3F	; 63
    3884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3888:	88 23       	and	r24, r24
    388a:	2c f4       	brge	.+10     	; 0x3896 <voidSendCommand+0x98>
		__ticks = 1;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	9e 83       	std	Y+6, r25	; 0x06
    3892:	8d 83       	std	Y+5, r24	; 0x05
    3894:	3f c0       	rjmp	.+126    	; 0x3914 <voidSendCommand+0x116>
	else if (__tmp > 65535)
    3896:	6f 81       	ldd	r22, Y+7	; 0x07
    3898:	78 85       	ldd	r23, Y+8	; 0x08
    389a:	89 85       	ldd	r24, Y+9	; 0x09
    389c:	9a 85       	ldd	r25, Y+10	; 0x0a
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	3f ef       	ldi	r19, 0xFF	; 255
    38a2:	4f e7       	ldi	r20, 0x7F	; 127
    38a4:	57 e4       	ldi	r21, 0x47	; 71
    38a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38aa:	18 16       	cp	r1, r24
    38ac:	4c f5       	brge	.+82     	; 0x3900 <voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e2       	ldi	r20, 0x20	; 32
    38bc:	51 e4       	ldi	r21, 0x41	; 65
    38be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	9e 83       	std	Y+6, r25	; 0x06
    38d4:	8d 83       	std	Y+5, r24	; 0x05
    38d6:	0f c0       	rjmp	.+30     	; 0x38f6 <voidSendCommand+0xf8>
    38d8:	88 ec       	ldi	r24, 0xC8	; 200
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	9c 83       	std	Y+4, r25	; 0x04
    38de:	8b 83       	std	Y+3, r24	; 0x03
    38e0:	8b 81       	ldd	r24, Y+3	; 0x03
    38e2:	9c 81       	ldd	r25, Y+4	; 0x04
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <voidSendCommand+0xe6>
    38e8:	9c 83       	std	Y+4, r25	; 0x04
    38ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ec:	8d 81       	ldd	r24, Y+5	; 0x05
    38ee:	9e 81       	ldd	r25, Y+6	; 0x06
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	9e 83       	std	Y+6, r25	; 0x06
    38f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f6:	8d 81       	ldd	r24, Y+5	; 0x05
    38f8:	9e 81       	ldd	r25, Y+6	; 0x06
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	69 f7       	brne	.-38     	; 0x38d8 <voidSendCommand+0xda>
    38fe:	14 c0       	rjmp	.+40     	; 0x3928 <voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3900:	6f 81       	ldd	r22, Y+7	; 0x07
    3902:	78 85       	ldd	r23, Y+8	; 0x08
    3904:	89 85       	ldd	r24, Y+9	; 0x09
    3906:	9a 85       	ldd	r25, Y+10	; 0x0a
    3908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	9e 83       	std	Y+6, r25	; 0x06
    3912:	8d 83       	std	Y+5, r24	; 0x05
    3914:	8d 81       	ldd	r24, Y+5	; 0x05
    3916:	9e 81       	ldd	r25, Y+6	; 0x06
    3918:	9a 83       	std	Y+2, r25	; 0x02
    391a:	89 83       	std	Y+1, r24	; 0x01
    391c:	89 81       	ldd	r24, Y+1	; 0x01
    391e:	9a 81       	ldd	r25, Y+2	; 0x02
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <voidSendCommand+0x122>
    3924:	9a 83       	std	Y+2, r25	; 0x02
    3926:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, LOW);
    3928:	83 e0       	ldi	r24, 0x03	; 3
    392a:	64 e0       	ldi	r22, 0x04	; 4
    392c:	40 e0       	ldi	r20, 0x00	; 0
    392e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
}
    3932:	2f 96       	adiw	r28, 0x0f	; 15
    3934:	0f b6       	in	r0, 0x3f	; 63
    3936:	f8 94       	cli
    3938:	de bf       	out	0x3e, r29	; 62
    393a:	0f be       	out	0x3f, r0	; 63
    393c:	cd bf       	out	0x3d, r28	; 61
    393e:	cf 91       	pop	r28
    3940:	df 91       	pop	r29
    3942:	08 95       	ret

00003944 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    3944:	df 93       	push	r29
    3946:	cf 93       	push	r28
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62
    394c:	2f 97       	sbiw	r28, 0x0f	; 15
    394e:	0f b6       	in	r0, 0x3f	; 63
    3950:	f8 94       	cli
    3952:	de bf       	out	0x3e, r29	; 62
    3954:	0f be       	out	0x3f, r0	; 63
    3956:	cd bf       	out	0x3d, r28	; 61
    3958:	8f 87       	std	Y+15, r24	; 0x0f

    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_RS, HIGH);
    395a:	83 e0       	ldi	r24, 0x03	; 3
    395c:	63 e0       	ldi	r22, 0x03	; 3
    395e:	41 e0       	ldi	r20, 0x01	; 1
    3960:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_Rw, LOW);
    3964:	83 e0       	ldi	r24, 0x03	; 3
    3966:	66 e0       	ldi	r22, 0x06	; 6
    3968:	40 e0       	ldi	r20, 0x00	; 0
    396a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    

    DIO_voidSetPortSpecificValue(LCD_DATA_PORT, Copy_u8Data);
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	6f 85       	ldd	r22, Y+15	; 0x0f
    3972:	0e 94 a0 11 	call	0x2340	; 0x2340 <DIO_voidSetPortSpecificValue>

    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, LOW);
    3976:	83 e0       	ldi	r24, 0x03	; 3
    3978:	64 e0       	ldi	r22, 0x04	; 4
    397a:	40 e0       	ldi	r20, 0x00	; 0
    397c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, HIGH);
    3980:	83 e0       	ldi	r24, 0x03	; 3
    3982:	64 e0       	ldi	r22, 0x04	; 4
    3984:	41 e0       	ldi	r20, 0x01	; 1
    3986:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	a0 e0       	ldi	r26, 0x00	; 0
    3990:	b0 e4       	ldi	r27, 0x40	; 64
    3992:	8b 87       	std	Y+11, r24	; 0x0b
    3994:	9c 87       	std	Y+12, r25	; 0x0c
    3996:	ad 87       	std	Y+13, r26	; 0x0d
    3998:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    399a:	6b 85       	ldd	r22, Y+11	; 0x0b
    399c:	7c 85       	ldd	r23, Y+12	; 0x0c
    399e:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	4a ef       	ldi	r20, 0xFA	; 250
    39a8:	54 e4       	ldi	r21, 0x44	; 68
    39aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	8f 83       	std	Y+7, r24	; 0x07
    39b4:	98 87       	std	Y+8, r25	; 0x08
    39b6:	a9 87       	std	Y+9, r26	; 0x09
    39b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39ba:	6f 81       	ldd	r22, Y+7	; 0x07
    39bc:	78 85       	ldd	r23, Y+8	; 0x08
    39be:	89 85       	ldd	r24, Y+9	; 0x09
    39c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	40 e8       	ldi	r20, 0x80	; 128
    39c8:	5f e3       	ldi	r21, 0x3F	; 63
    39ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39ce:	88 23       	and	r24, r24
    39d0:	2c f4       	brge	.+10     	; 0x39dc <LCD_voidSendData+0x98>
		__ticks = 1;
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	9e 83       	std	Y+6, r25	; 0x06
    39d8:	8d 83       	std	Y+5, r24	; 0x05
    39da:	3f c0       	rjmp	.+126    	; 0x3a5a <LCD_voidSendData+0x116>
	else if (__tmp > 65535)
    39dc:	6f 81       	ldd	r22, Y+7	; 0x07
    39de:	78 85       	ldd	r23, Y+8	; 0x08
    39e0:	89 85       	ldd	r24, Y+9	; 0x09
    39e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	3f ef       	ldi	r19, 0xFF	; 255
    39e8:	4f e7       	ldi	r20, 0x7F	; 127
    39ea:	57 e4       	ldi	r21, 0x47	; 71
    39ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39f0:	18 16       	cp	r1, r24
    39f2:	4c f5       	brge	.+82     	; 0x3a46 <LCD_voidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e2       	ldi	r20, 0x20	; 32
    3a02:	51 e4       	ldi	r21, 0x41	; 65
    3a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	bc 01       	movw	r22, r24
    3a0e:	cd 01       	movw	r24, r26
    3a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	9e 83       	std	Y+6, r25	; 0x06
    3a1a:	8d 83       	std	Y+5, r24	; 0x05
    3a1c:	0f c0       	rjmp	.+30     	; 0x3a3c <LCD_voidSendData+0xf8>
    3a1e:	88 ec       	ldi	r24, 0xC8	; 200
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	9c 83       	std	Y+4, r25	; 0x04
    3a24:	8b 83       	std	Y+3, r24	; 0x03
    3a26:	8b 81       	ldd	r24, Y+3	; 0x03
    3a28:	9c 81       	ldd	r25, Y+4	; 0x04
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	f1 f7       	brne	.-4      	; 0x3a2a <LCD_voidSendData+0xe6>
    3a2e:	9c 83       	std	Y+4, r25	; 0x04
    3a30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a32:	8d 81       	ldd	r24, Y+5	; 0x05
    3a34:	9e 81       	ldd	r25, Y+6	; 0x06
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	9e 83       	std	Y+6, r25	; 0x06
    3a3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a40:	00 97       	sbiw	r24, 0x00	; 0
    3a42:	69 f7       	brne	.-38     	; 0x3a1e <LCD_voidSendData+0xda>
    3a44:	14 c0       	rjmp	.+40     	; 0x3a6e <LCD_voidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a46:	6f 81       	ldd	r22, Y+7	; 0x07
    3a48:	78 85       	ldd	r23, Y+8	; 0x08
    3a4a:	89 85       	ldd	r24, Y+9	; 0x09
    3a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	9e 83       	std	Y+6, r25	; 0x06
    3a58:	8d 83       	std	Y+5, r24	; 0x05
    3a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5e:	9a 83       	std	Y+2, r25	; 0x02
    3a60:	89 83       	std	Y+1, r24	; 0x01
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	9a 81       	ldd	r25, Y+2	; 0x02
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	f1 f7       	brne	.-4      	; 0x3a66 <LCD_voidSendData+0x122>
    3a6a:	9a 83       	std	Y+2, r25	; 0x02
    3a6c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_CONTROL_EN, LOW);
    3a6e:	83 e0       	ldi	r24, 0x03	; 3
    3a70:	64 e0       	ldi	r22, 0x04	; 4
    3a72:	40 e0       	ldi	r20, 0x00	; 0
    3a74:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
}
    3a78:	2f 96       	adiw	r28, 0x0f	; 15
    3a7a:	0f b6       	in	r0, 0x3f	; 63
    3a7c:	f8 94       	cli
    3a7e:	de bf       	out	0x3e, r29	; 62
    3a80:	0f be       	out	0x3f, r0	; 63
    3a82:	cd bf       	out	0x3d, r28	; 61
    3a84:	cf 91       	pop	r28
    3a86:	df 91       	pop	r29
    3a88:	08 95       	ret

00003a8a <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    3a8a:	df 93       	push	r29
    3a8c:	cf 93       	push	r28
    3a8e:	cd b7       	in	r28, 0x3d	; 61
    3a90:	de b7       	in	r29, 0x3e	; 62
    3a92:	2d 97       	sbiw	r28, 0x0d	; 13
    3a94:	0f b6       	in	r0, 0x3f	; 63
    3a96:	f8 94       	cli
    3a98:	de bf       	out	0x3e, r29	; 62
    3a9a:	0f be       	out	0x3f, r0	; 63
    3a9c:	cd bf       	out	0x3d, r28	; 61
    3a9e:	9d 87       	std	Y+13, r25	; 0x0d
    3aa0:	8c 87       	std	Y+12, r24	; 0x0c
	if(Copy_u32Number == 0)
    3aa2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3aa4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3aa6:	00 97       	sbiw	r24, 0x00	; 0
    3aa8:	19 f4       	brne	.+6      	; 0x3ab0 <LCD_voidSendNumber+0x26>
	{
		LCD_voidSendData('0');
    3aaa:	80 e3       	ldi	r24, 0x30	; 48
    3aac:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_voidSendData>
	}
    u8 Local_u8SpllitedNumber[10];
    s8 Local_s8LoopCounter = 0;
    3ab0:	19 82       	std	Y+1, r1	; 0x01
    3ab2:	1f c0       	rjmp	.+62     	; 0x3af2 <LCD_voidSendNumber+0x68>
    while (Copy_u32Number != 0)
    {
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	e8 2f       	mov	r30, r24
    3ab8:	ff 27       	eor	r31, r31
    3aba:	e7 fd       	sbrc	r30, 7
    3abc:	f0 95       	com	r31
    3abe:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ac0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ac2:	2a e0       	ldi	r18, 0x0A	; 10
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	b9 01       	movw	r22, r18
    3ac8:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__udivmodhi4>
    3acc:	28 2f       	mov	r18, r24
    3ace:	ce 01       	movw	r24, r28
    3ad0:	02 96       	adiw	r24, 0x02	; 2
    3ad2:	e8 0f       	add	r30, r24
    3ad4:	f9 1f       	adc	r31, r25
    3ad6:	20 83       	st	Z, r18
        Copy_u32Number /= 10;
    3ad8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ada:	9d 85       	ldd	r25, Y+13	; 0x0d
    3adc:	2a e0       	ldi	r18, 0x0A	; 10
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	b9 01       	movw	r22, r18
    3ae2:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__udivmodhi4>
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	9d 87       	std	Y+13, r25	; 0x0d
    3aea:	8c 87       	std	Y+12, r24	; 0x0c
        Local_s8LoopCounter++;
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
    3aee:	8f 5f       	subi	r24, 0xFF	; 255
    3af0:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_voidSendData('0');
	}
    u8 Local_u8SpllitedNumber[10];
    s8 Local_s8LoopCounter = 0;
    while (Copy_u32Number != 0)
    3af2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3af4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3af6:	00 97       	sbiw	r24, 0x00	; 0
    3af8:	e9 f6       	brne	.-70     	; 0x3ab4 <LCD_voidSendNumber+0x2a>
    {
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	81 50       	subi	r24, 0x01	; 1
    3afe:	89 83       	std	Y+1, r24	; 0x01
    3b00:	11 c0       	rjmp	.+34     	; 0x3b24 <LCD_voidSendNumber+0x9a>
    while (Local_s8LoopCounter >= 0)
    {
        LCD_voidSendData(Local_u8SpllitedNumber[Local_s8LoopCounter] + '0');
    3b02:	89 81       	ldd	r24, Y+1	; 0x01
    3b04:	28 2f       	mov	r18, r24
    3b06:	33 27       	eor	r19, r19
    3b08:	27 fd       	sbrc	r18, 7
    3b0a:	30 95       	com	r19
    3b0c:	ce 01       	movw	r24, r28
    3b0e:	02 96       	adiw	r24, 0x02	; 2
    3b10:	fc 01       	movw	r30, r24
    3b12:	e2 0f       	add	r30, r18
    3b14:	f3 1f       	adc	r31, r19
    3b16:	80 81       	ld	r24, Z
    3b18:	80 5d       	subi	r24, 0xD0	; 208
    3b1a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_voidSendData>
        Local_s8LoopCounter--;
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
    3b20:	81 50       	subi	r24, 0x01	; 1
    3b22:	89 83       	std	Y+1, r24	; 0x01
        Local_u8SpllitedNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
    while (Local_s8LoopCounter >= 0)
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
    3b26:	88 23       	and	r24, r24
    3b28:	64 f7       	brge	.-40     	; 0x3b02 <LCD_voidSendNumber+0x78>
    {
        LCD_voidSendData(Local_u8SpllitedNumber[Local_s8LoopCounter] + '0');
        Local_s8LoopCounter--;
    }
    
}
    3b2a:	2d 96       	adiw	r28, 0x0d	; 13
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	f8 94       	cli
    3b30:	de bf       	out	0x3e, r29	; 62
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	cd bf       	out	0x3d, r28	; 61
    3b36:	cf 91       	pop	r28
    3b38:	df 91       	pop	r29
    3b3a:	08 95       	ret

00003b3c <LCD_voidGotoXY>:

void LCD_voidGotoXY(u8 Copy_u8X, u8 Copy_u8Y)
{
    3b3c:	df 93       	push	r29
    3b3e:	cf 93       	push	r28
    3b40:	00 d0       	rcall	.+0      	; 0x3b42 <LCD_voidGotoXY+0x6>
    3b42:	0f 92       	push	r0
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	8a 83       	std	Y+2, r24	; 0x02
    3b4a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Address = 0;
    3b4c:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u8X == 0)
    3b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b50:	88 23       	and	r24, r24
    3b52:	19 f4       	brne	.+6      	; 0x3b5a <LCD_voidGotoXY+0x1e>
    {
        Local_u8Address = Copy_u8Y;
    3b54:	8b 81       	ldd	r24, Y+3	; 0x03
    3b56:	89 83       	std	Y+1, r24	; 0x01
    3b58:	06 c0       	rjmp	.+12     	; 0x3b66 <LCD_voidGotoXY+0x2a>
    }
    else if(Copy_u8X == 1)
    3b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5c:	81 30       	cpi	r24, 0x01	; 1
    3b5e:	19 f4       	brne	.+6      	; 0x3b66 <LCD_voidGotoXY+0x2a>
    {
        Local_u8Address = Copy_u8Y + 0x40;
    3b60:	8b 81       	ldd	r24, Y+3	; 0x03
    3b62:	80 5c       	subi	r24, 0xC0	; 192
    3b64:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {

    }
    SET_BIT(Local_u8Address, 7);
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
    3b68:	80 68       	ori	r24, 0x80	; 128
    3b6a:	89 83       	std	Y+1, r24	; 0x01
    voidSendCommand(Local_u8Address);
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
    3b6e:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <voidSendCommand>
}
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	cf 91       	pop	r28
    3b7a:	df 91       	pop	r29
    3b7c:	08 95       	ret

00003b7e <LCD_voidSendSrting>:

void LCD_voidSendSrting(const u8 * Ref_pu8String)
{
    3b7e:	df 93       	push	r29
    3b80:	cf 93       	push	r28
    3b82:	00 d0       	rcall	.+0      	; 0x3b84 <LCD_voidSendSrting+0x6>
    3b84:	0f 92       	push	r0
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
    3b8a:	9b 83       	std	Y+3, r25	; 0x03
    3b8c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopCounter = 0;
    3b8e:	19 82       	std	Y+1, r1	; 0x01
    3b90:	0e c0       	rjmp	.+28     	; 0x3bae <LCD_voidSendSrting+0x30>
	while(Ref_pu8String[Local_u8LoopCounter] != NULL_TERMINATOR)
    {
		LCD_voidSendData(Ref_pu8String[Local_u8LoopCounter]);
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	28 2f       	mov	r18, r24
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	e2 0f       	add	r30, r18
    3ba0:	f3 1f       	adc	r31, r19
    3ba2:	80 81       	ld	r24, Z
    3ba4:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_voidSendData>
		Local_u8LoopCounter++;
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	8f 5f       	subi	r24, 0xFF	; 255
    3bac:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendSrting(const u8 * Ref_pu8String)
{
	u8 Local_u8LoopCounter = 0;
	while(Ref_pu8String[Local_u8LoopCounter] != NULL_TERMINATOR)
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	28 2f       	mov	r18, r24
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    3bb8:	fc 01       	movw	r30, r24
    3bba:	e2 0f       	add	r30, r18
    3bbc:	f3 1f       	adc	r31, r19
    3bbe:	80 81       	ld	r24, Z
    3bc0:	88 23       	and	r24, r24
    3bc2:	39 f7       	brne	.-50     	; 0x3b92 <LCD_voidSendSrting+0x14>
    {
		LCD_voidSendData(Ref_pu8String[Local_u8LoopCounter]);
		Local_u8LoopCounter++;
	}
}
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	cf 91       	pop	r28
    3bcc:	df 91       	pop	r29
    3bce:	08 95       	ret

00003bd0 <LCD_voidSendCustomCharacter>:

void LCD_voidSendCustomCharacter(u8 * Ref_pu8CharacterArray, u8 Copy_u8PatternNumber, u8 Copy_u8XPosition, u8 Copy_u8YPosition)
{
    3bd0:	df 93       	push	r29
    3bd2:	cf 93       	push	r28
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
    3bd8:	27 97       	sbiw	r28, 0x07	; 7
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	f8 94       	cli
    3bde:	de bf       	out	0x3e, r29	; 62
    3be0:	0f be       	out	0x3f, r0	; 63
    3be2:	cd bf       	out	0x3d, r28	; 61
    3be4:	9c 83       	std	Y+4, r25	; 0x04
    3be6:	8b 83       	std	Y+3, r24	; 0x03
    3be8:	6d 83       	std	Y+5, r22	; 0x05
    3bea:	4e 83       	std	Y+6, r20	; 0x06
    3bec:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8LoopCounter = 0;
    3bee:	1a 82       	std	Y+2, r1	; 0x02
    /*CALCULATE THE CGRAM ADDRESS OF THE PATTERN = PatternNumber * 8 (The Frist Location)*/
    u8 Local_u8CGRAMAddress = Copy_u8PatternNumber * 8; 
    3bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf2:	88 2f       	mov	r24, r24
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	88 0f       	add	r24, r24
    3bf8:	99 1f       	adc	r25, r25
    3bfa:	88 0f       	add	r24, r24
    3bfc:	99 1f       	adc	r25, r25
    3bfe:	88 0f       	add	r24, r24
    3c00:	99 1f       	adc	r25, r25
    3c02:	89 83       	std	Y+1, r24	; 0x01
    /*SET THE 6th OF THE SET CGRAM ADDRESS*/
    SET_BIT(Local_u8CGRAMAddress, 6);
    3c04:	89 81       	ldd	r24, Y+1	; 0x01
    3c06:	80 64       	ori	r24, 0x40	; 64
    3c08:	89 83       	std	Y+1, r24	; 0x01
    /*SEND THE CGRAM ADDRESS COMMAND TO LCD*/
    voidSendCommand(Local_u8CGRAMAddress);
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <voidSendCommand>
    /*LOOP ON THE ARRAY AND SEND EASH ELEMENT TO THE LCD TO BE STORED*/
    for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    3c10:	1a 82       	std	Y+2, r1	; 0x02
    3c12:	0e c0       	rjmp	.+28     	; 0x3c30 <LCD_voidSendCustomCharacter+0x60>
    {
        LCD_voidSendData(Ref_pu8CharacterArray[Local_u8LoopCounter]);
    3c14:	8a 81       	ldd	r24, Y+2	; 0x02
    3c16:	28 2f       	mov	r18, r24
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c1e:	fc 01       	movw	r30, r24
    3c20:	e2 0f       	add	r30, r18
    3c22:	f3 1f       	adc	r31, r19
    3c24:	80 81       	ld	r24, Z
    3c26:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_voidSendData>
    /*SET THE 6th OF THE SET CGRAM ADDRESS*/
    SET_BIT(Local_u8CGRAMAddress, 6);
    /*SEND THE CGRAM ADDRESS COMMAND TO LCD*/
    voidSendCommand(Local_u8CGRAMAddress);
    /*LOOP ON THE ARRAY AND SEND EASH ELEMENT TO THE LCD TO BE STORED*/
    for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    3c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2c:	8f 5f       	subi	r24, 0xFF	; 255
    3c2e:	8a 83       	std	Y+2, r24	; 0x02
    3c30:	8a 81       	ldd	r24, Y+2	; 0x02
    3c32:	88 30       	cpi	r24, 0x08	; 8
    3c34:	78 f3       	brcs	.-34     	; 0x3c14 <LCD_voidSendCustomCharacter+0x44>
    {
        LCD_voidSendData(Ref_pu8CharacterArray[Local_u8LoopCounter]);
    }
    /*Send Command To DDRAM To Store The Data*/
    LCD_voidGotoXY(Copy_u8XPosition, Copy_u8YPosition);
    3c36:	8e 81       	ldd	r24, Y+6	; 0x06
    3c38:	6f 81       	ldd	r22, Y+7	; 0x07
    3c3a:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
    /*Send The Pattern Number To Display*/
    LCD_voidSendData(Copy_u8PatternNumber);
    3c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c40:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_voidSendData>
}
    3c44:	27 96       	adiw	r28, 0x07	; 7
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	f8 94       	cli
    3c4a:	de bf       	out	0x3e, r29	; 62
    3c4c:	0f be       	out	0x3f, r0	; 63
    3c4e:	cd bf       	out	0x3d, r28	; 61
    3c50:	cf 91       	pop	r28
    3c52:	df 91       	pop	r29
    3c54:	08 95       	ret

00003c56 <LCD_voidInit>:
void LCD_voidInit(void)
{
    3c56:	df 93       	push	r29
    3c58:	cf 93       	push	r28
    3c5a:	cd b7       	in	r28, 0x3d	; 61
    3c5c:	de b7       	in	r29, 0x3e	; 62
    3c5e:	2e 97       	sbiw	r28, 0x0e	; 14
    3c60:	0f b6       	in	r0, 0x3f	; 63
    3c62:	f8 94       	cli
    3c64:	de bf       	out	0x3e, r29	; 62
    3c66:	0f be       	out	0x3f, r0	; 63
    3c68:	cd bf       	out	0x3d, r28	; 61
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	a0 e2       	ldi	r26, 0x20	; 32
    3c70:	b2 e4       	ldi	r27, 0x42	; 66
    3c72:	8b 87       	std	Y+11, r24	; 0x0b
    3c74:	9c 87       	std	Y+12, r25	; 0x0c
    3c76:	ad 87       	std	Y+13, r26	; 0x0d
    3c78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	4a ef       	ldi	r20, 0xFA	; 250
    3c88:	54 e4       	ldi	r21, 0x44	; 68
    3c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	8f 83       	std	Y+7, r24	; 0x07
    3c94:	98 87       	std	Y+8, r25	; 0x08
    3c96:	a9 87       	std	Y+9, r26	; 0x09
    3c98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c9c:	78 85       	ldd	r23, Y+8	; 0x08
    3c9e:	89 85       	ldd	r24, Y+9	; 0x09
    3ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	40 e8       	ldi	r20, 0x80	; 128
    3ca8:	5f e3       	ldi	r21, 0x3F	; 63
    3caa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cae:	88 23       	and	r24, r24
    3cb0:	2c f4       	brge	.+10     	; 0x3cbc <LCD_voidInit+0x66>
		__ticks = 1;
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	9e 83       	std	Y+6, r25	; 0x06
    3cb8:	8d 83       	std	Y+5, r24	; 0x05
    3cba:	3f c0       	rjmp	.+126    	; 0x3d3a <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    3cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    3cbe:	78 85       	ldd	r23, Y+8	; 0x08
    3cc0:	89 85       	ldd	r24, Y+9	; 0x09
    3cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	3f ef       	ldi	r19, 0xFF	; 255
    3cc8:	4f e7       	ldi	r20, 0x7F	; 127
    3cca:	57 e4       	ldi	r21, 0x47	; 71
    3ccc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cd0:	18 16       	cp	r1, r24
    3cd2:	4c f5       	brge	.+82     	; 0x3d26 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cda:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	40 e2       	ldi	r20, 0x20	; 32
    3ce2:	51 e4       	ldi	r21, 0x41	; 65
    3ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	bc 01       	movw	r22, r24
    3cee:	cd 01       	movw	r24, r26
    3cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	9e 83       	std	Y+6, r25	; 0x06
    3cfa:	8d 83       	std	Y+5, r24	; 0x05
    3cfc:	0f c0       	rjmp	.+30     	; 0x3d1c <LCD_voidInit+0xc6>
    3cfe:	88 ec       	ldi	r24, 0xC8	; 200
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	9c 83       	std	Y+4, r25	; 0x04
    3d04:	8b 83       	std	Y+3, r24	; 0x03
    3d06:	8b 81       	ldd	r24, Y+3	; 0x03
    3d08:	9c 81       	ldd	r25, Y+4	; 0x04
    3d0a:	01 97       	sbiw	r24, 0x01	; 1
    3d0c:	f1 f7       	brne	.-4      	; 0x3d0a <LCD_voidInit+0xb4>
    3d0e:	9c 83       	std	Y+4, r25	; 0x04
    3d10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d12:	8d 81       	ldd	r24, Y+5	; 0x05
    3d14:	9e 81       	ldd	r25, Y+6	; 0x06
    3d16:	01 97       	sbiw	r24, 0x01	; 1
    3d18:	9e 83       	std	Y+6, r25	; 0x06
    3d1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	69 f7       	brne	.-38     	; 0x3cfe <LCD_voidInit+0xa8>
    3d24:	14 c0       	rjmp	.+40     	; 0x3d4e <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d26:	6f 81       	ldd	r22, Y+7	; 0x07
    3d28:	78 85       	ldd	r23, Y+8	; 0x08
    3d2a:	89 85       	ldd	r24, Y+9	; 0x09
    3d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d32:	dc 01       	movw	r26, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	9e 83       	std	Y+6, r25	; 0x06
    3d38:	8d 83       	std	Y+5, r24	; 0x05
    3d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3e:	9a 83       	std	Y+2, r25	; 0x02
    3d40:	89 83       	std	Y+1, r24	; 0x01
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
    3d44:	9a 81       	ldd	r25, Y+2	; 0x02
    3d46:	01 97       	sbiw	r24, 0x01	; 1
    3d48:	f1 f7       	brne	.-4      	; 0x3d46 <LCD_voidInit+0xf0>
    3d4a:	9a 83       	std	Y+2, r25	; 0x02
    3d4c:	89 83       	std	Y+1, r24	; 0x01
    
    _delay_ms(40);
    /*FUNCTION SET COMMAND*/
    voidSendCommand(LCD_FUNCTION_SET_CMD);
    3d4e:	88 e3       	ldi	r24, 0x38	; 56
    3d50:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <voidSendCommand>
    /*DISPLAY ON/OFF CONTROL*/
    voidSendCommand(LCD_ON_OFF_CONTROL);
    3d54:	8c e0       	ldi	r24, 0x0C	; 12
    3d56:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <voidSendCommand>
    /*DISPLAY CLEAR*/
    voidSendCommand(LCD_DISPLAY_CLEAR);
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <voidSendCommand>

}
    3d60:	2e 96       	adiw	r28, 0x0e	; 14
    3d62:	0f b6       	in	r0, 0x3f	; 63
    3d64:	f8 94       	cli
    3d66:	de bf       	out	0x3e, r29	; 62
    3d68:	0f be       	out	0x3f, r0	; 63
    3d6a:	cd bf       	out	0x3d, r28	; 61
    3d6c:	cf 91       	pop	r28
    3d6e:	df 91       	pop	r29
    3d70:	08 95       	ret

00003d72 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
    3d72:	df 93       	push	r29
    3d74:	cf 93       	push	r28
    3d76:	cd b7       	in	r28, 0x3d	; 61
    3d78:	de b7       	in	r29, 0x3e	; 62
    voidSendCommand(LCD_DISPLAY_CLEAR);
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <voidSendCommand>
}
    3d80:	cf 91       	pop	r28
    3d82:	df 91       	pop	r29
    3d84:	08 95       	ret

00003d86 <LCD_voidInitPins>:

void LCD_voidInitPins (void)
{
    3d86:	df 93       	push	r29
    3d88:	cf 93       	push	r28
    3d8a:	cd b7       	in	r28, 0x3d	; 61
    3d8c:	de b7       	in	r29, 0x3e	; 62

    /*Set Data Port To Be OutPut*/
    DIO_voidSetPortDirection(LCD_DATA_PORT, OUTPUT);
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	61 e0       	ldi	r22, 0x01	; 1
    3d92:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <DIO_voidSetPortDirection>
    /*Set Contol pin To Be OutPut*/
    DIO_voidSetPortSpecificDirection(LCD_CONTROL_PORT, LCD_SET_CONTROL_PINS);
    3d96:	83 e0       	ldi	r24, 0x03	; 3
    3d98:	68 e5       	ldi	r22, 0x58	; 88
    3d9a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <DIO_voidSetPortSpecificDirection>
}
    3d9e:	cf 91       	pop	r28
    3da0:	df 91       	pop	r29
    3da2:	08 95       	ret

00003da4 <KPD_voidInit>:
};



void KPD_voidInit(void)
{
    3da4:	df 93       	push	r29
    3da6:	cf 93       	push	r28
    3da8:	0f 92       	push	r0
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8LoopCounter = 0;
    3dae:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < KPD_NUM_OF_COLS; Local_u8LoopCounter++)
    3db0:	19 82       	std	Y+1, r1	; 0x01
    3db2:	33 c0       	rjmp	.+102    	; 0x3e1a <KPD_voidInit+0x76>
	{
		/*Set Rows Pin To Be Input*/
		DIO_voidSetPinDirection(KPD_ROWS_PORT, u8RowsArray[Local_u8LoopCounter], INPUT);
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	88 2f       	mov	r24, r24
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	fc 01       	movw	r30, r24
    3dbc:	e5 55       	subi	r30, 0x55	; 85
    3dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    3dc0:	90 81       	ld	r25, Z
    3dc2:	82 e0       	ldi	r24, 0x02	; 2
    3dc4:	69 2f       	mov	r22, r25
    3dc6:	40 e0       	ldi	r20, 0x00	; 0
    3dc8:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_voidSetPinDirection>
		/*Set Rows Pin To Be Pullup*/
		DIO_voidSetPinPullUp(KPD_ROWS_PORT, u8RowsArray[Local_u8LoopCounter], PULLUP);
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	88 2f       	mov	r24, r24
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	e5 55       	subi	r30, 0x55	; 85
    3dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd8:	90 81       	ld	r25, Z
    3dda:	82 e0       	ldi	r24, 0x02	; 2
    3ddc:	69 2f       	mov	r22, r25
    3dde:	41 e0       	ldi	r20, 0x01	; 1
    3de0:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <DIO_voidSetPinPullUp>
		/*Set Cols Pin To Be Output*/
		DIO_voidSetPinDirection(KPD_COLS_PORT, u8ColsArray[Local_u8LoopCounter], OUTPUT);
    3de4:	89 81       	ldd	r24, Y+1	; 0x01
    3de6:	88 2f       	mov	r24, r24
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	fc 01       	movw	r30, r24
    3dec:	e1 55       	subi	r30, 0x51	; 81
    3dee:	fe 4f       	sbci	r31, 0xFE	; 254
    3df0:	90 81       	ld	r25, Z
    3df2:	82 e0       	ldi	r24, 0x02	; 2
    3df4:	69 2f       	mov	r22, r25
    3df6:	41 e0       	ldi	r20, 0x01	; 1
    3df8:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_voidSetPinDirection>
		/*Set Cols Pin To Be High*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8LoopCounter], HIGH);
    3dfc:	89 81       	ldd	r24, Y+1	; 0x01
    3dfe:	88 2f       	mov	r24, r24
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	fc 01       	movw	r30, r24
    3e04:	e1 55       	subi	r30, 0x51	; 81
    3e06:	fe 4f       	sbci	r31, 0xFE	; 254
    3e08:	90 81       	ld	r25, Z
    3e0a:	82 e0       	ldi	r24, 0x02	; 2
    3e0c:	69 2f       	mov	r22, r25
    3e0e:	41 e0       	ldi	r20, 0x01	; 1
    3e10:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>


void KPD_voidInit(void)
{
	u8 Local_u8LoopCounter = 0;
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < KPD_NUM_OF_COLS; Local_u8LoopCounter++)
    3e14:	89 81       	ldd	r24, Y+1	; 0x01
    3e16:	8f 5f       	subi	r24, 0xFF	; 255
    3e18:	89 83       	std	Y+1, r24	; 0x01
    3e1a:	89 81       	ldd	r24, Y+1	; 0x01
    3e1c:	84 30       	cpi	r24, 0x04	; 4
    3e1e:	50 f2       	brcs	.-108    	; 0x3db4 <KPD_voidInit+0x10>
		DIO_voidSetPinDirection(KPD_COLS_PORT, u8ColsArray[Local_u8LoopCounter], OUTPUT);
		/*Set Cols Pin To Be High*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8LoopCounter], HIGH);

	}
}
    3e20:	0f 90       	pop	r0
    3e22:	cf 91       	pop	r28
    3e24:	df 91       	pop	r29
    3e26:	08 95       	ret

00003e28 <KPD_u8GetPressKey>:




u8 KPD_u8GetPressKey(void)
{
    3e28:	df 93       	push	r29
    3e2a:	cf 93       	push	r28
    3e2c:	00 d0       	rcall	.+0      	; 0x3e2e <KPD_u8GetPressKey+0x6>
    3e2e:	00 d0       	rcall	.+0      	; 0x3e30 <KPD_u8GetPressKey+0x8>
    3e30:	0f 92       	push	r0
    3e32:	cd b7       	in	r28, 0x3d	; 61
    3e34:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8ButtonsArray[KPD_NUM_OF_ROWS][KPD_NUM_OF_COLS] = KPD_VAL;
	u8 Local_u8RowsIndex;
	u8 Local_u8ColsIndex;
	u8 Local_u8RowValue;
	u8 Local_u8Pressedkey = KPD_DEFAULT_VAL;
    3e36:	8f ef       	ldi	r24, 0xFF	; 255
    3e38:	89 83       	std	Y+1, r24	; 0x01
	voidDeactivateColumns();
    3e3a:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <voidDeactivateColumns>
	for(Local_u8ColsIndex = 0; Local_u8ColsIndex < KPD_NUM_OF_COLS; Local_u8ColsIndex++)
    3e3e:	1b 82       	std	Y+3, r1	; 0x03
    3e40:	57 c0       	rjmp	.+174    	; 0x3ef0 <KPD_u8GetPressKey+0xc8>
	{
		/*Activate The Current Column*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColsIndex], LOW);
    3e42:	8b 81       	ldd	r24, Y+3	; 0x03
    3e44:	88 2f       	mov	r24, r24
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	fc 01       	movw	r30, r24
    3e4a:	e1 55       	subi	r30, 0x51	; 81
    3e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e4e:	90 81       	ld	r25, Z
    3e50:	82 e0       	ldi	r24, 0x02	; 2
    3e52:	69 2f       	mov	r22, r25
    3e54:	40 e0       	ldi	r20, 0x00	; 0
    3e56:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
		/*Read Row Value*/
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < KPD_NUM_OF_ROWS; Local_u8RowsIndex++)
    3e5a:	1c 82       	std	Y+4, r1	; 0x04
    3e5c:	37 c0       	rjmp	.+110    	; 0x3ecc <KPD_u8GetPressKey+0xa4>
		{
			Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, u8RowsArray[Local_u8RowsIndex]);
    3e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e60:	88 2f       	mov	r24, r24
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	fc 01       	movw	r30, r24
    3e66:	e5 55       	subi	r30, 0x55	; 85
    3e68:	fe 4f       	sbci	r31, 0xFE	; 254
    3e6a:	90 81       	ld	r25, Z
    3e6c:	82 e0       	ldi	r24, 0x02	; 2
    3e6e:	69 2f       	mov	r22, r25
    3e70:	0e 94 da 10 	call	0x21b4	; 0x21b4 <DIO_u8GetPinValue>
    3e74:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_u8RowValue == 0)
    3e76:	8a 81       	ldd	r24, Y+2	; 0x02
    3e78:	88 23       	and	r24, r24
    3e7a:	29 f5       	brne	.+74     	; 0x3ec6 <KPD_u8GetPressKey+0x9e>
			{
				/*Get The Press Key*/
				Local_u8Pressedkey = Local_u8ButtonsArray[Local_u8RowsIndex][Local_u8ColsIndex];
    3e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e7e:	48 2f       	mov	r20, r24
    3e80:	50 e0       	ldi	r21, 0x00	; 0
    3e82:	8b 81       	ldd	r24, Y+3	; 0x03
    3e84:	28 2f       	mov	r18, r24
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	ca 01       	movw	r24, r20
    3e8a:	88 0f       	add	r24, r24
    3e8c:	99 1f       	adc	r25, r25
    3e8e:	88 0f       	add	r24, r24
    3e90:	99 1f       	adc	r25, r25
    3e92:	82 0f       	add	r24, r18
    3e94:	93 1f       	adc	r25, r19
    3e96:	fc 01       	movw	r30, r24
    3e98:	ed 54       	subi	r30, 0x4D	; 77
    3e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e9c:	80 81       	ld	r24, Z
    3e9e:	89 83       	std	Y+1, r24	; 0x01
    3ea0:	0c c0       	rjmp	.+24     	; 0x3eba <KPD_u8GetPressKey+0x92>
				/*Polling Until The Kay Is Released*/
				while (Local_u8RowValue == 0)
				{
					Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, u8RowsArray[Local_u8RowsIndex]);
    3ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ea4:	88 2f       	mov	r24, r24
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	e5 55       	subi	r30, 0x55	; 85
    3eac:	fe 4f       	sbci	r31, 0xFE	; 254
    3eae:	90 81       	ld	r25, Z
    3eb0:	82 e0       	ldi	r24, 0x02	; 2
    3eb2:	69 2f       	mov	r22, r25
    3eb4:	0e 94 da 10 	call	0x21b4	; 0x21b4 <DIO_u8GetPinValue>
    3eb8:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_u8RowValue == 0)
			{
				/*Get The Press Key*/
				Local_u8Pressedkey = Local_u8ButtonsArray[Local_u8RowsIndex][Local_u8ColsIndex];
				/*Polling Until The Kay Is Released*/
				while (Local_u8RowValue == 0)
    3eba:	8a 81       	ldd	r24, Y+2	; 0x02
    3ebc:	88 23       	and	r24, r24
    3ebe:	89 f3       	breq	.-30     	; 0x3ea2 <KPD_u8GetPressKey+0x7a>
				{
					Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, u8RowsArray[Local_u8RowsIndex]);
				}

				/*Return The Key*/
				return (Local_u8Pressedkey);
    3ec0:	89 81       	ldd	r24, Y+1	; 0x01
    3ec2:	8d 83       	std	Y+5, r24	; 0x05
    3ec4:	1b c0       	rjmp	.+54     	; 0x3efc <KPD_u8GetPressKey+0xd4>
	for(Local_u8ColsIndex = 0; Local_u8ColsIndex < KPD_NUM_OF_COLS; Local_u8ColsIndex++)
	{
		/*Activate The Current Column*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColsIndex], LOW);
		/*Read Row Value*/
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < KPD_NUM_OF_ROWS; Local_u8RowsIndex++)
    3ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ec8:	8f 5f       	subi	r24, 0xFF	; 255
    3eca:	8c 83       	std	Y+4, r24	; 0x04
    3ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ece:	84 30       	cpi	r24, 0x04	; 4
    3ed0:	30 f2       	brcs	.-116    	; 0x3e5e <KPD_u8GetPressKey+0x36>
			}


		}
		/*DeActivate The Current Column*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColsIndex], HIGH);
    3ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed4:	88 2f       	mov	r24, r24
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	fc 01       	movw	r30, r24
    3eda:	e1 55       	subi	r30, 0x51	; 81
    3edc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ede:	90 81       	ld	r25, Z
    3ee0:	82 e0       	ldi	r24, 0x02	; 2
    3ee2:	69 2f       	mov	r22, r25
    3ee4:	41 e0       	ldi	r20, 0x01	; 1
    3ee6:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
	u8 Local_u8RowsIndex;
	u8 Local_u8ColsIndex;
	u8 Local_u8RowValue;
	u8 Local_u8Pressedkey = KPD_DEFAULT_VAL;
	voidDeactivateColumns();
	for(Local_u8ColsIndex = 0; Local_u8ColsIndex < KPD_NUM_OF_COLS; Local_u8ColsIndex++)
    3eea:	8b 81       	ldd	r24, Y+3	; 0x03
    3eec:	8f 5f       	subi	r24, 0xFF	; 255
    3eee:	8b 83       	std	Y+3, r24	; 0x03
    3ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef2:	84 30       	cpi	r24, 0x04	; 4
    3ef4:	08 f4       	brcc	.+2      	; 0x3ef8 <KPD_u8GetPressKey+0xd0>
    3ef6:	a5 cf       	rjmp	.-182    	; 0x3e42 <KPD_u8GetPressKey+0x1a>
		}
		/*DeActivate The Current Column*/
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColsIndex], HIGH);
	}
	/*Return The Default Pressed Key*/
	return (Local_u8Pressedkey);
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	8d 83       	std	Y+5, r24	; 0x05
    3efc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3efe:	0f 90       	pop	r0
    3f00:	0f 90       	pop	r0
    3f02:	0f 90       	pop	r0
    3f04:	0f 90       	pop	r0
    3f06:	0f 90       	pop	r0
    3f08:	cf 91       	pop	r28
    3f0a:	df 91       	pop	r29
    3f0c:	08 95       	ret

00003f0e <voidDeactivateColumns>:

static void voidDeactivateColumns(void)
{
    3f0e:	df 93       	push	r29
    3f10:	cf 93       	push	r28
    3f12:	0f 92       	push	r0
    3f14:	cd b7       	in	r28, 0x3d	; 61
    3f16:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ColumnsCounter = 0;
    3f18:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter < KPD_NUM_OF_COLS; Local_u8ColumnsCounter++)
    3f1a:	19 82       	std	Y+1, r1	; 0x01
    3f1c:	0f c0       	rjmp	.+30     	; 0x3f3c <voidDeactivateColumns+0x2e>
	{
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColumnsCounter], HIGH);
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	88 2f       	mov	r24, r24
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	fc 01       	movw	r30, r24
    3f26:	e1 55       	subi	r30, 0x51	; 81
    3f28:	fe 4f       	sbci	r31, 0xFE	; 254
    3f2a:	90 81       	ld	r25, Z
    3f2c:	82 e0       	ldi	r24, 0x02	; 2
    3f2e:	69 2f       	mov	r22, r25
    3f30:	41 e0       	ldi	r20, 0x01	; 1
    3f32:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <DIO_voidSetPinValue>
}

static void voidDeactivateColumns(void)
{
	u8 Local_u8ColumnsCounter = 0;
	for(Local_u8ColumnsCounter = 0; Local_u8ColumnsCounter < KPD_NUM_OF_COLS; Local_u8ColumnsCounter++)
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
    3f38:	8f 5f       	subi	r24, 0xFF	; 255
    3f3a:	89 83       	std	Y+1, r24	; 0x01
    3f3c:	89 81       	ldd	r24, Y+1	; 0x01
    3f3e:	84 30       	cpi	r24, 0x04	; 4
    3f40:	70 f3       	brcs	.-36     	; 0x3f1e <voidDeactivateColumns+0x10>
	{
		DIO_voidSetPinValue(KPD_COLS_PORT, u8ColsArray[Local_u8ColumnsCounter], HIGH);
	}
}
    3f42:	0f 90       	pop	r0
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	08 95       	ret

00003f4a <main>:
u8 Trys = 0;
u8 DownCount = 10;
u8 LightValue = 0;
u8 Mapping_Light = 0;
void main (void)
{
    3f4a:	df 93       	push	r29
    3f4c:	cf 93       	push	r28
    3f4e:	cd b7       	in	r28, 0x3d	; 61
    3f50:	de b7       	in	r29, 0x3e	; 62
    3f52:	6c 97       	sbiw	r28, 0x1c	; 28
    3f54:	0f b6       	in	r0, 0x3f	; 63
    3f56:	f8 94       	cli
    3f58:	de bf       	out	0x3e, r29	; 62
    3f5a:	0f be       	out	0x3f, r0	; 63
    3f5c:	cd bf       	out	0x3d, r28	; 61
	//u8 TempValue = 0;
	UART_voidInit();
    3f5e:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_voidInit>
	KPD_voidInit();
    3f62:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <KPD_voidInit>
	LCD_voidInitPins();
    3f66:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <LCD_voidInitPins>
	LCD_voidInit();
    3f6a:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <LCD_voidInit>
	ADC_voidInit();
    3f6e:	0e 94 67 13 	call	0x26ce	; 0x26ce <ADC_voidInit>
	LM35_voidInit();
    3f72:	0e 94 81 1b 	call	0x3702	; 0x3702 <LM35_voidInit>
	EXTI_voidInit();
    3f76:	0e 94 40 0b 	call	0x1680	; 0x1680 <EXTI_voidInit>
	GIE_voidEnableGlobalInterrupt();
    3f7a:	0e 94 24 0b 	call	0x1648	; 0x1648 <GIE_voidEnableGlobalInterrupt>
	EXTI_voidInterruptContal(EXTI_INT0, EXTI_ENABLE);
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
    3f80:	60 e0       	ldi	r22, 0x00	; 0
    3f82:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <EXTI_voidInterruptContal>
	DIO_voidSetPinDirection(PORTD, PIN0, INPUT);
    3f86:	83 e0       	ldi	r24, 0x03	; 3
    3f88:	60 e0       	ldi	r22, 0x00	; 0
    3f8a:	40 e0       	ldi	r20, 0x00	; 0
    3f8c:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD, PIN1, OUTPUT);
    3f90:	83 e0       	ldi	r24, 0x03	; 3
    3f92:	61 e0       	ldi	r22, 0x01	; 1
    3f94:	41 e0       	ldi	r20, 0x01	; 1
    3f96:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA, PIN1, INPUT);
    3f9a:	80 e0       	ldi	r24, 0x00	; 0
    3f9c:	61 e0       	ldi	r22, 0x01	; 1
    3f9e:	40 e0       	ldi	r20, 0x00	; 0
    3fa0:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD, PIN2, INPUT);
    3fa4:	83 e0       	ldi	r24, 0x03	; 3
    3fa6:	62 e0       	ldi	r22, 0x02	; 2
    3fa8:	40 e0       	ldi	r20, 0x00	; 0
    3faa:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <DIO_voidSetPinDirection>
	LCD_voidGotoXY(0, 3);
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	63 e0       	ldi	r22, 0x03	; 3
    3fb2:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendSrting("WELCOME :)");
    3fb6:	80 e6       	ldi	r24, 0x60	; 96
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
    3fbe:	80 e0       	ldi	r24, 0x00	; 0
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	a8 e4       	ldi	r26, 0x48	; 72
    3fc4:	b3 e4       	ldi	r27, 0x43	; 67
    3fc6:	89 8f       	std	Y+25, r24	; 0x19
    3fc8:	9a 8f       	std	Y+26, r25	; 0x1a
    3fca:	ab 8f       	std	Y+27, r26	; 0x1b
    3fcc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fce:	69 8d       	ldd	r22, Y+25	; 0x19
    3fd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	4a ef       	ldi	r20, 0xFA	; 250
    3fdc:	54 e4       	ldi	r21, 0x44	; 68
    3fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	8d 8b       	std	Y+21, r24	; 0x15
    3fe8:	9e 8b       	std	Y+22, r25	; 0x16
    3fea:	af 8b       	std	Y+23, r26	; 0x17
    3fec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fee:	6d 89       	ldd	r22, Y+21	; 0x15
    3ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	40 e8       	ldi	r20, 0x80	; 128
    3ffc:	5f e3       	ldi	r21, 0x3F	; 63
    3ffe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4002:	88 23       	and	r24, r24
    4004:	2c f4       	brge	.+10     	; 0x4010 <main+0xc6>
		__ticks = 1;
    4006:	81 e0       	ldi	r24, 0x01	; 1
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	9c 8b       	std	Y+20, r25	; 0x14
    400c:	8b 8b       	std	Y+19, r24	; 0x13
    400e:	3f c0       	rjmp	.+126    	; 0x408e <main+0x144>
	else if (__tmp > 65535)
    4010:	6d 89       	ldd	r22, Y+21	; 0x15
    4012:	7e 89       	ldd	r23, Y+22	; 0x16
    4014:	8f 89       	ldd	r24, Y+23	; 0x17
    4016:	98 8d       	ldd	r25, Y+24	; 0x18
    4018:	20 e0       	ldi	r18, 0x00	; 0
    401a:	3f ef       	ldi	r19, 0xFF	; 255
    401c:	4f e7       	ldi	r20, 0x7F	; 127
    401e:	57 e4       	ldi	r21, 0x47	; 71
    4020:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4024:	18 16       	cp	r1, r24
    4026:	4c f5       	brge	.+82     	; 0x407a <main+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4028:	69 8d       	ldd	r22, Y+25	; 0x19
    402a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    402c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    402e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4030:	20 e0       	ldi	r18, 0x00	; 0
    4032:	30 e0       	ldi	r19, 0x00	; 0
    4034:	40 e2       	ldi	r20, 0x20	; 32
    4036:	51 e4       	ldi	r21, 0x41	; 65
    4038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	bc 01       	movw	r22, r24
    4042:	cd 01       	movw	r24, r26
    4044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	9c 8b       	std	Y+20, r25	; 0x14
    404e:	8b 8b       	std	Y+19, r24	; 0x13
    4050:	0f c0       	rjmp	.+30     	; 0x4070 <main+0x126>
    4052:	88 ec       	ldi	r24, 0xC8	; 200
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	9a 8b       	std	Y+18, r25	; 0x12
    4058:	89 8b       	std	Y+17, r24	; 0x11
    405a:	89 89       	ldd	r24, Y+17	; 0x11
    405c:	9a 89       	ldd	r25, Y+18	; 0x12
    405e:	01 97       	sbiw	r24, 0x01	; 1
    4060:	f1 f7       	brne	.-4      	; 0x405e <main+0x114>
    4062:	9a 8b       	std	Y+18, r25	; 0x12
    4064:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4066:	8b 89       	ldd	r24, Y+19	; 0x13
    4068:	9c 89       	ldd	r25, Y+20	; 0x14
    406a:	01 97       	sbiw	r24, 0x01	; 1
    406c:	9c 8b       	std	Y+20, r25	; 0x14
    406e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4070:	8b 89       	ldd	r24, Y+19	; 0x13
    4072:	9c 89       	ldd	r25, Y+20	; 0x14
    4074:	00 97       	sbiw	r24, 0x00	; 0
    4076:	69 f7       	brne	.-38     	; 0x4052 <main+0x108>
    4078:	14 c0       	rjmp	.+40     	; 0x40a2 <main+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    407a:	6d 89       	ldd	r22, Y+21	; 0x15
    407c:	7e 89       	ldd	r23, Y+22	; 0x16
    407e:	8f 89       	ldd	r24, Y+23	; 0x17
    4080:	98 8d       	ldd	r25, Y+24	; 0x18
    4082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4086:	dc 01       	movw	r26, r24
    4088:	cb 01       	movw	r24, r22
    408a:	9c 8b       	std	Y+20, r25	; 0x14
    408c:	8b 8b       	std	Y+19, r24	; 0x13
    408e:	8b 89       	ldd	r24, Y+19	; 0x13
    4090:	9c 89       	ldd	r25, Y+20	; 0x14
    4092:	98 8b       	std	Y+16, r25	; 0x10
    4094:	8f 87       	std	Y+15, r24	; 0x0f
    4096:	8f 85       	ldd	r24, Y+15	; 0x0f
    4098:	98 89       	ldd	r25, Y+16	; 0x10
    409a:	01 97       	sbiw	r24, 0x01	; 1
    409c:	f1 f7       	brne	.-4      	; 0x409a <main+0x150>
    409e:	98 8b       	std	Y+16, r25	; 0x10
    40a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	LCD_voidClearDisplay();
    40a2:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
	LCD_voidClearDisplay();
    40a6:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
	LCD_voidGotoXY(0, 3);
    40aa:	80 e0       	ldi	r24, 0x00	; 0
    40ac:	63 e0       	ldi	r22, 0x03	; 3
    40ae:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendSrting("SELECT MODE ");
    40b2:	8b e6       	ldi	r24, 0x6B	; 107
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	a8 e4       	ldi	r26, 0x48	; 72
    40c0:	b3 e4       	ldi	r27, 0x43	; 67
    40c2:	8b 87       	std	Y+11, r24	; 0x0b
    40c4:	9c 87       	std	Y+12, r25	; 0x0c
    40c6:	ad 87       	std	Y+13, r26	; 0x0d
    40c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    40cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    40ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    40d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	4a ef       	ldi	r20, 0xFA	; 250
    40d8:	54 e4       	ldi	r21, 0x44	; 68
    40da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40de:	dc 01       	movw	r26, r24
    40e0:	cb 01       	movw	r24, r22
    40e2:	8f 83       	std	Y+7, r24	; 0x07
    40e4:	98 87       	std	Y+8, r25	; 0x08
    40e6:	a9 87       	std	Y+9, r26	; 0x09
    40e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40ea:	6f 81       	ldd	r22, Y+7	; 0x07
    40ec:	78 85       	ldd	r23, Y+8	; 0x08
    40ee:	89 85       	ldd	r24, Y+9	; 0x09
    40f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	40 e8       	ldi	r20, 0x80	; 128
    40f8:	5f e3       	ldi	r21, 0x3F	; 63
    40fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40fe:	88 23       	and	r24, r24
    4100:	2c f4       	brge	.+10     	; 0x410c <main+0x1c2>
		__ticks = 1;
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	9e 83       	std	Y+6, r25	; 0x06
    4108:	8d 83       	std	Y+5, r24	; 0x05
    410a:	3f c0       	rjmp	.+126    	; 0x418a <main+0x240>
	else if (__tmp > 65535)
    410c:	6f 81       	ldd	r22, Y+7	; 0x07
    410e:	78 85       	ldd	r23, Y+8	; 0x08
    4110:	89 85       	ldd	r24, Y+9	; 0x09
    4112:	9a 85       	ldd	r25, Y+10	; 0x0a
    4114:	20 e0       	ldi	r18, 0x00	; 0
    4116:	3f ef       	ldi	r19, 0xFF	; 255
    4118:	4f e7       	ldi	r20, 0x7F	; 127
    411a:	57 e4       	ldi	r21, 0x47	; 71
    411c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4120:	18 16       	cp	r1, r24
    4122:	4c f5       	brge	.+82     	; 0x4176 <main+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4124:	6b 85       	ldd	r22, Y+11	; 0x0b
    4126:	7c 85       	ldd	r23, Y+12	; 0x0c
    4128:	8d 85       	ldd	r24, Y+13	; 0x0d
    412a:	9e 85       	ldd	r25, Y+14	; 0x0e
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	30 e0       	ldi	r19, 0x00	; 0
    4130:	40 e2       	ldi	r20, 0x20	; 32
    4132:	51 e4       	ldi	r21, 0x41	; 65
    4134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	bc 01       	movw	r22, r24
    413e:	cd 01       	movw	r24, r26
    4140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4144:	dc 01       	movw	r26, r24
    4146:	cb 01       	movw	r24, r22
    4148:	9e 83       	std	Y+6, r25	; 0x06
    414a:	8d 83       	std	Y+5, r24	; 0x05
    414c:	0f c0       	rjmp	.+30     	; 0x416c <main+0x222>
    414e:	88 ec       	ldi	r24, 0xC8	; 200
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	9c 83       	std	Y+4, r25	; 0x04
    4154:	8b 83       	std	Y+3, r24	; 0x03
    4156:	8b 81       	ldd	r24, Y+3	; 0x03
    4158:	9c 81       	ldd	r25, Y+4	; 0x04
    415a:	01 97       	sbiw	r24, 0x01	; 1
    415c:	f1 f7       	brne	.-4      	; 0x415a <main+0x210>
    415e:	9c 83       	std	Y+4, r25	; 0x04
    4160:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4162:	8d 81       	ldd	r24, Y+5	; 0x05
    4164:	9e 81       	ldd	r25, Y+6	; 0x06
    4166:	01 97       	sbiw	r24, 0x01	; 1
    4168:	9e 83       	std	Y+6, r25	; 0x06
    416a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    416c:	8d 81       	ldd	r24, Y+5	; 0x05
    416e:	9e 81       	ldd	r25, Y+6	; 0x06
    4170:	00 97       	sbiw	r24, 0x00	; 0
    4172:	69 f7       	brne	.-38     	; 0x414e <main+0x204>
    4174:	14 c0       	rjmp	.+40     	; 0x419e <main+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4176:	6f 81       	ldd	r22, Y+7	; 0x07
    4178:	78 85       	ldd	r23, Y+8	; 0x08
    417a:	89 85       	ldd	r24, Y+9	; 0x09
    417c:	9a 85       	ldd	r25, Y+10	; 0x0a
    417e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	9e 83       	std	Y+6, r25	; 0x06
    4188:	8d 83       	std	Y+5, r24	; 0x05
    418a:	8d 81       	ldd	r24, Y+5	; 0x05
    418c:	9e 81       	ldd	r25, Y+6	; 0x06
    418e:	9a 83       	std	Y+2, r25	; 0x02
    4190:	89 83       	std	Y+1, r24	; 0x01
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	9a 81       	ldd	r25, Y+2	; 0x02
    4196:	01 97       	sbiw	r24, 0x01	; 1
    4198:	f1 f7       	brne	.-4      	; 0x4196 <main+0x24c>
    419a:	9a 83       	std	Y+2, r25	; 0x02
    419c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	LCD_voidClearDisplay();
    419e:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
	LCD_voidGotoXY(0, 0);
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	60 e0       	ldi	r22, 0x00	; 0
    41a6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendSrting("ADMIN -> 1");
    41aa:	88 e7       	ldi	r24, 0x78	; 120
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
	LCD_voidGotoXY(1, 0);
    41b2:	81 e0       	ldi	r24, 0x01	; 1
    41b4:	60 e0       	ldi	r22, 0x00	; 0
    41b6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendSrting("USER -> 2");
    41ba:	83 e8       	ldi	r24, 0x83	; 131
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
	Start();
    41c2:	0e 94 20 2c 	call	0x5840	; 0x5840 <Start>
	EXTI_voidSetCallBack(&Door);
    41c6:	8e e4       	ldi	r24, 0x4E	; 78
    41c8:	91 e2       	ldi	r25, 0x21	; 33
    41ca:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <EXTI_voidSetCallBack>

	do
	{
		SelectMode = KPD_u8GetPressKey();
    41ce:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    41d2:	80 93 ef 01 	sts	0x01EF, r24
	}while(SelectMode == 255);
    41d6:	80 91 ef 01 	lds	r24, 0x01EF
    41da:	8f 3f       	cpi	r24, 0xFF	; 255
    41dc:	c1 f3       	breq	.-16     	; 0x41ce <main+0x284>

	if(SelectMode == 1)
    41de:	80 91 ef 01 	lds	r24, 0x01EF
    41e2:	81 30       	cpi	r24, 0x01	; 1
    41e4:	19 f5       	brne	.+70     	; 0x422c <main+0x2e2>
	{
		Start();
    41e6:	0e 94 20 2c 	call	0x5840	; 0x5840 <Start>
		LCD_voidClearDisplay();
    41ea:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
		LCD_voidSendSrting("ADMIN MODE");
    41ee:	8d e8       	ldi	r24, 0x8D	; 141
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
		do
		{
			PressedKey = KPD_u8GetPressKey();
    41f6:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    41fa:	80 93 ed 01 	sts	0x01ED, r24
		}while(PressedKey == 255);
    41fe:	80 91 ed 01 	lds	r24, 0x01ED
    4202:	8f 3f       	cpi	r24, 0xFF	; 255
    4204:	c1 f3       	breq	.-16     	; 0x41f6 <main+0x2ac>
		if(PressedKey == 'O')
    4206:	80 91 ed 01 	lds	r24, 0x01ED
    420a:	8f 34       	cpi	r24, 0x4F	; 79
    420c:	a9 f5       	brne	.+106    	; 0x4278 <main+0x32e>
		{
			LCD_voidClearDisplay();
    420e:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
			LCD_voidGotoXY(0, 0);
    4212:	80 e0       	ldi	r24, 0x00	; 0
    4214:	60 e0       	ldi	r22, 0x00	; 0
    4216:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("Enter Password");
    421a:	88 e9       	ldi	r24, 0x98	; 152
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
			LCD_voidGotoXY(1, 0);
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	60 e0       	ldi	r22, 0x00	; 0
    4226:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
    422a:	26 c0       	rjmp	.+76     	; 0x4278 <main+0x32e>
		}

	}
	else if(SelectMode == 2)
    422c:	80 91 ef 01 	lds	r24, 0x01EF
    4230:	82 30       	cpi	r24, 0x02	; 2
    4232:	11 f5       	brne	.+68     	; 0x4278 <main+0x32e>
	{
		Start();
    4234:	0e 94 20 2c 	call	0x5840	; 0x5840 <Start>
		LCD_voidClearDisplay();
    4238:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
		LCD_voidSendSrting("USER MODE");
    423c:	87 ea       	ldi	r24, 0xA7	; 167
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
		do
		{
			PressedKey = KPD_u8GetPressKey();
    4244:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    4248:	80 93 ed 01 	sts	0x01ED, r24
		}while(PressedKey == 255);
    424c:	80 91 ed 01 	lds	r24, 0x01ED
    4250:	8f 3f       	cpi	r24, 0xFF	; 255
    4252:	c1 f3       	breq	.-16     	; 0x4244 <main+0x2fa>
		if(PressedKey == 'O')
    4254:	80 91 ed 01 	lds	r24, 0x01ED
    4258:	8f 34       	cpi	r24, 0x4F	; 79
    425a:	71 f4       	brne	.+28     	; 0x4278 <main+0x32e>
		{
			LCD_voidClearDisplay();
    425c:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
			LCD_voidGotoXY(0, 0);
    4260:	80 e0       	ldi	r24, 0x00	; 0
    4262:	60 e0       	ldi	r22, 0x00	; 0
    4264:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("Enter Password");
    4268:	88 e9       	ldi	r24, 0x98	; 152
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
			LCD_voidGotoXY(1, 0);
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	60 e0       	ldi	r22, 0x00	; 0
    4274:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		}
	}
	while(1)
	{

		EXTI_voidSetCallBack(&Door);
    4278:	8e e4       	ldi	r24, 0x4E	; 78
    427a:	91 e2       	ldi	r25, 0x21	; 33
    427c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <EXTI_voidSetCallBack>
		if(SelectMode == 1)
    4280:	80 91 ef 01 	lds	r24, 0x01EF
    4284:	81 30       	cpi	r24, 0x01	; 1
    4286:	19 f4       	brne	.+6      	; 0x428e <main+0x344>
		{
			Admin();
    4288:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <Admin>
    428c:	f5 cf       	rjmp	.-22     	; 0x4278 <main+0x32e>
		}
	    else if(SelectMode == 2)
    428e:	80 91 ef 01 	lds	r24, 0x01EF
    4292:	82 30       	cpi	r24, 0x02	; 2
    4294:	89 f7       	brne	.-30     	; 0x4278 <main+0x32e>
		{

			User();
    4296:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <User>
    429a:	ee cf       	rjmp	.-36     	; 0x4278 <main+0x32e>

0000429c <Door>:

	}
}

void Door (void)
{
    429c:	df 93       	push	r29
    429e:	cf 93       	push	r28
    42a0:	cd b7       	in	r28, 0x3d	; 61
    42a2:	de b7       	in	r29, 0x3e	; 62
    42a4:	2f 97       	sbiw	r28, 0x0f	; 15
    42a6:	0f b6       	in	r0, 0x3f	; 63
    42a8:	f8 94       	cli
    42aa:	de bf       	out	0x3e, r29	; 62
    42ac:	0f be       	out	0x3f, r0	; 63
    42ae:	cd bf       	out	0x3d, r28	; 61

		u8 Local_u8Pir = 0;
    42b0:	1f 86       	std	Y+15, r1	; 0x0f
		LCD_voidClearDisplay();
    42b2:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
		Temp = 'O';
    42b6:	8f e4       	ldi	r24, 0x4F	; 79
    42b8:	80 93 f6 01 	sts	0x01F6, r24
		UART_TransmitData(Temp);
    42bc:	80 91 f6 01 	lds	r24, 0x01F6
    42c0:	88 2f       	mov	r24, r24
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
		Local_u8Pir = DIO_u8GetPinValue(PORTD, PIN2);
    42c8:	83 e0       	ldi	r24, 0x03	; 3
    42ca:	62 e0       	ldi	r22, 0x02	; 2
    42cc:	0e 94 da 10 	call	0x21b4	; 0x21b4 <DIO_u8GetPinValue>
    42d0:	8f 87       	std	Y+15, r24	; 0x0f
		UART_TransmitData(Local_u8Pir);
    42d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    42d4:	88 2f       	mov	r24, r24
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
		LCD_voidSendSrting("Door is Open");
    42dc:	81 eb       	ldi	r24, 0xB1	; 177
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	aa ef       	ldi	r26, 0xFA	; 250
    42ea:	b3 e4       	ldi	r27, 0x43	; 67
    42ec:	8b 87       	std	Y+11, r24	; 0x0b
    42ee:	9c 87       	std	Y+12, r25	; 0x0c
    42f0:	ad 87       	std	Y+13, r26	; 0x0d
    42f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	4a ef       	ldi	r20, 0xFA	; 250
    4302:	54 e4       	ldi	r21, 0x44	; 68
    4304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	8f 83       	std	Y+7, r24	; 0x07
    430e:	98 87       	std	Y+8, r25	; 0x08
    4310:	a9 87       	std	Y+9, r26	; 0x09
    4312:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4314:	6f 81       	ldd	r22, Y+7	; 0x07
    4316:	78 85       	ldd	r23, Y+8	; 0x08
    4318:	89 85       	ldd	r24, Y+9	; 0x09
    431a:	9a 85       	ldd	r25, Y+10	; 0x0a
    431c:	20 e0       	ldi	r18, 0x00	; 0
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	40 e8       	ldi	r20, 0x80	; 128
    4322:	5f e3       	ldi	r21, 0x3F	; 63
    4324:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4328:	88 23       	and	r24, r24
    432a:	2c f4       	brge	.+10     	; 0x4336 <Door+0x9a>
		__ticks = 1;
    432c:	81 e0       	ldi	r24, 0x01	; 1
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	9e 83       	std	Y+6, r25	; 0x06
    4332:	8d 83       	std	Y+5, r24	; 0x05
    4334:	3f c0       	rjmp	.+126    	; 0x43b4 <Door+0x118>
	else if (__tmp > 65535)
    4336:	6f 81       	ldd	r22, Y+7	; 0x07
    4338:	78 85       	ldd	r23, Y+8	; 0x08
    433a:	89 85       	ldd	r24, Y+9	; 0x09
    433c:	9a 85       	ldd	r25, Y+10	; 0x0a
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	3f ef       	ldi	r19, 0xFF	; 255
    4342:	4f e7       	ldi	r20, 0x7F	; 127
    4344:	57 e4       	ldi	r21, 0x47	; 71
    4346:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    434a:	18 16       	cp	r1, r24
    434c:	4c f5       	brge	.+82     	; 0x43a0 <Door+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    434e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4350:	7c 85       	ldd	r23, Y+12	; 0x0c
    4352:	8d 85       	ldd	r24, Y+13	; 0x0d
    4354:	9e 85       	ldd	r25, Y+14	; 0x0e
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	40 e2       	ldi	r20, 0x20	; 32
    435c:	51 e4       	ldi	r21, 0x41	; 65
    435e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4362:	dc 01       	movw	r26, r24
    4364:	cb 01       	movw	r24, r22
    4366:	bc 01       	movw	r22, r24
    4368:	cd 01       	movw	r24, r26
    436a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	9e 83       	std	Y+6, r25	; 0x06
    4374:	8d 83       	std	Y+5, r24	; 0x05
    4376:	0f c0       	rjmp	.+30     	; 0x4396 <Door+0xfa>
    4378:	88 ec       	ldi	r24, 0xC8	; 200
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	9c 83       	std	Y+4, r25	; 0x04
    437e:	8b 83       	std	Y+3, r24	; 0x03
    4380:	8b 81       	ldd	r24, Y+3	; 0x03
    4382:	9c 81       	ldd	r25, Y+4	; 0x04
    4384:	01 97       	sbiw	r24, 0x01	; 1
    4386:	f1 f7       	brne	.-4      	; 0x4384 <Door+0xe8>
    4388:	9c 83       	std	Y+4, r25	; 0x04
    438a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    438c:	8d 81       	ldd	r24, Y+5	; 0x05
    438e:	9e 81       	ldd	r25, Y+6	; 0x06
    4390:	01 97       	sbiw	r24, 0x01	; 1
    4392:	9e 83       	std	Y+6, r25	; 0x06
    4394:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4396:	8d 81       	ldd	r24, Y+5	; 0x05
    4398:	9e 81       	ldd	r25, Y+6	; 0x06
    439a:	00 97       	sbiw	r24, 0x00	; 0
    439c:	69 f7       	brne	.-38     	; 0x4378 <Door+0xdc>
    439e:	14 c0       	rjmp	.+40     	; 0x43c8 <Door+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a0:	6f 81       	ldd	r22, Y+7	; 0x07
    43a2:	78 85       	ldd	r23, Y+8	; 0x08
    43a4:	89 85       	ldd	r24, Y+9	; 0x09
    43a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ac:	dc 01       	movw	r26, r24
    43ae:	cb 01       	movw	r24, r22
    43b0:	9e 83       	std	Y+6, r25	; 0x06
    43b2:	8d 83       	std	Y+5, r24	; 0x05
    43b4:	8d 81       	ldd	r24, Y+5	; 0x05
    43b6:	9e 81       	ldd	r25, Y+6	; 0x06
    43b8:	9a 83       	std	Y+2, r25	; 0x02
    43ba:	89 83       	std	Y+1, r24	; 0x01
    43bc:	89 81       	ldd	r24, Y+1	; 0x01
    43be:	9a 81       	ldd	r25, Y+2	; 0x02
    43c0:	01 97       	sbiw	r24, 0x01	; 1
    43c2:	f1 f7       	brne	.-4      	; 0x43c0 <Door+0x124>
    43c4:	9a 83       	std	Y+2, r25	; 0x02
    43c6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_voidClearDisplay();
    43c8:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
		LCD_voidGotoXY(0, 0);
    43cc:	80 e0       	ldi	r24, 0x00	; 0
    43ce:	60 e0       	ldi	r22, 0x00	; 0
    43d0:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("TEMP -> 1");
    43d4:	8e eb       	ldi	r24, 0xBE	; 190
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
		LCD_voidGotoXY(1, 0);
    43dc:	81 e0       	ldi	r24, 0x01	; 1
    43de:	60 e0       	ldi	r22, 0x00	; 0
    43e0:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("LIGHT -> 2");
    43e4:	88 ec       	ldi	r24, 0xC8	; 200
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
}
    43ec:	2f 96       	adiw	r28, 0x0f	; 15
    43ee:	0f b6       	in	r0, 0x3f	; 63
    43f0:	f8 94       	cli
    43f2:	de bf       	out	0x3e, r29	; 62
    43f4:	0f be       	out	0x3f, r0	; 63
    43f6:	cd bf       	out	0x3d, r28	; 61
    43f8:	cf 91       	pop	r28
    43fa:	df 91       	pop	r29
    43fc:	08 95       	ret

000043fe <Wrong>:

void Wrong (void)
{
    43fe:	df 93       	push	r29
    4400:	cf 93       	push	r28
    4402:	cd b7       	in	r28, 0x3d	; 61
    4404:	de b7       	in	r29, 0x3e	; 62
    4406:	2e 97       	sbiw	r28, 0x0e	; 14
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	f8 94       	cli
    440c:	de bf       	out	0x3e, r29	; 62
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClearDisplay();
    4412:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
	LCD_voidGotoXY(0, 0);
    4416:	80 e0       	ldi	r24, 0x00	; 0
    4418:	60 e0       	ldi	r22, 0x00	; 0
    441a:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendSrting("WRONG PASS");
    441e:	83 ed       	ldi	r24, 0xD3	; 211
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
	LCD_voidGotoXY(1, 4);
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	64 e0       	ldi	r22, 0x04	; 4
    442a:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendSrting("TRY AGAIN");
    442e:	8e ed       	ldi	r24, 0xDE	; 222
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
    4436:	80 e0       	ldi	r24, 0x00	; 0
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	aa ef       	ldi	r26, 0xFA	; 250
    443c:	b3 e4       	ldi	r27, 0x43	; 67
    443e:	8b 87       	std	Y+11, r24	; 0x0b
    4440:	9c 87       	std	Y+12, r25	; 0x0c
    4442:	ad 87       	std	Y+13, r26	; 0x0d
    4444:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4446:	6b 85       	ldd	r22, Y+11	; 0x0b
    4448:	7c 85       	ldd	r23, Y+12	; 0x0c
    444a:	8d 85       	ldd	r24, Y+13	; 0x0d
    444c:	9e 85       	ldd	r25, Y+14	; 0x0e
    444e:	20 e0       	ldi	r18, 0x00	; 0
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	4a ef       	ldi	r20, 0xFA	; 250
    4454:	54 e4       	ldi	r21, 0x44	; 68
    4456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    445a:	dc 01       	movw	r26, r24
    445c:	cb 01       	movw	r24, r22
    445e:	8f 83       	std	Y+7, r24	; 0x07
    4460:	98 87       	std	Y+8, r25	; 0x08
    4462:	a9 87       	std	Y+9, r26	; 0x09
    4464:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4466:	6f 81       	ldd	r22, Y+7	; 0x07
    4468:	78 85       	ldd	r23, Y+8	; 0x08
    446a:	89 85       	ldd	r24, Y+9	; 0x09
    446c:	9a 85       	ldd	r25, Y+10	; 0x0a
    446e:	20 e0       	ldi	r18, 0x00	; 0
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	40 e8       	ldi	r20, 0x80	; 128
    4474:	5f e3       	ldi	r21, 0x3F	; 63
    4476:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    447a:	88 23       	and	r24, r24
    447c:	2c f4       	brge	.+10     	; 0x4488 <Wrong+0x8a>
		__ticks = 1;
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	9e 83       	std	Y+6, r25	; 0x06
    4484:	8d 83       	std	Y+5, r24	; 0x05
    4486:	3f c0       	rjmp	.+126    	; 0x4506 <Wrong+0x108>
	else if (__tmp > 65535)
    4488:	6f 81       	ldd	r22, Y+7	; 0x07
    448a:	78 85       	ldd	r23, Y+8	; 0x08
    448c:	89 85       	ldd	r24, Y+9	; 0x09
    448e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	3f ef       	ldi	r19, 0xFF	; 255
    4494:	4f e7       	ldi	r20, 0x7F	; 127
    4496:	57 e4       	ldi	r21, 0x47	; 71
    4498:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    449c:	18 16       	cp	r1, r24
    449e:	4c f5       	brge	.+82     	; 0x44f2 <Wrong+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    44a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    44a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    44a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	30 e0       	ldi	r19, 0x00	; 0
    44ac:	40 e2       	ldi	r20, 0x20	; 32
    44ae:	51 e4       	ldi	r21, 0x41	; 65
    44b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b4:	dc 01       	movw	r26, r24
    44b6:	cb 01       	movw	r24, r22
    44b8:	bc 01       	movw	r22, r24
    44ba:	cd 01       	movw	r24, r26
    44bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c0:	dc 01       	movw	r26, r24
    44c2:	cb 01       	movw	r24, r22
    44c4:	9e 83       	std	Y+6, r25	; 0x06
    44c6:	8d 83       	std	Y+5, r24	; 0x05
    44c8:	0f c0       	rjmp	.+30     	; 0x44e8 <Wrong+0xea>
    44ca:	88 ec       	ldi	r24, 0xC8	; 200
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	9c 83       	std	Y+4, r25	; 0x04
    44d0:	8b 83       	std	Y+3, r24	; 0x03
    44d2:	8b 81       	ldd	r24, Y+3	; 0x03
    44d4:	9c 81       	ldd	r25, Y+4	; 0x04
    44d6:	01 97       	sbiw	r24, 0x01	; 1
    44d8:	f1 f7       	brne	.-4      	; 0x44d6 <Wrong+0xd8>
    44da:	9c 83       	std	Y+4, r25	; 0x04
    44dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44de:	8d 81       	ldd	r24, Y+5	; 0x05
    44e0:	9e 81       	ldd	r25, Y+6	; 0x06
    44e2:	01 97       	sbiw	r24, 0x01	; 1
    44e4:	9e 83       	std	Y+6, r25	; 0x06
    44e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ea:	9e 81       	ldd	r25, Y+6	; 0x06
    44ec:	00 97       	sbiw	r24, 0x00	; 0
    44ee:	69 f7       	brne	.-38     	; 0x44ca <Wrong+0xcc>
    44f0:	14 c0       	rjmp	.+40     	; 0x451a <Wrong+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44f2:	6f 81       	ldd	r22, Y+7	; 0x07
    44f4:	78 85       	ldd	r23, Y+8	; 0x08
    44f6:	89 85       	ldd	r24, Y+9	; 0x09
    44f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    44fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44fe:	dc 01       	movw	r26, r24
    4500:	cb 01       	movw	r24, r22
    4502:	9e 83       	std	Y+6, r25	; 0x06
    4504:	8d 83       	std	Y+5, r24	; 0x05
    4506:	8d 81       	ldd	r24, Y+5	; 0x05
    4508:	9e 81       	ldd	r25, Y+6	; 0x06
    450a:	9a 83       	std	Y+2, r25	; 0x02
    450c:	89 83       	std	Y+1, r24	; 0x01
    450e:	89 81       	ldd	r24, Y+1	; 0x01
    4510:	9a 81       	ldd	r25, Y+2	; 0x02
    4512:	01 97       	sbiw	r24, 0x01	; 1
    4514:	f1 f7       	brne	.-4      	; 0x4512 <Wrong+0x114>
    4516:	9a 83       	std	Y+2, r25	; 0x02
    4518:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_voidClearDisplay();
    451a:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
	Counter = 0;
    451e:	10 92 eb 01 	sts	0x01EB, r1
	CheckCounter = 0;
    4522:	10 92 ea 01 	sts	0x01EA, r1
	Trys++;
    4526:	80 91 f1 01 	lds	r24, 0x01F1
    452a:	8f 5f       	subi	r24, 0xFF	; 255
    452c:	80 93 f1 01 	sts	0x01F1, r24
	if(Trys != 2)
    4530:	80 91 f1 01 	lds	r24, 0x01F1
    4534:	82 30       	cpi	r24, 0x02	; 2
    4536:	71 f0       	breq	.+28     	; 0x4554 <Wrong+0x156>
	{
		LCD_voidClearDisplay();
    4538:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
		LCD_voidGotoXY(0, 0);
    453c:	80 e0       	ldi	r24, 0x00	; 0
    453e:	60 e0       	ldi	r22, 0x00	; 0
    4540:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("Enter Password");
    4544:	88 e9       	ldi	r24, 0x98	; 152
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
		LCD_voidGotoXY(1, 0);
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	60 e0       	ldi	r22, 0x00	; 0
    4550:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	}
}
    4554:	2e 96       	adiw	r28, 0x0e	; 14
    4556:	0f b6       	in	r0, 0x3f	; 63
    4558:	f8 94       	cli
    455a:	de bf       	out	0x3e, r29	; 62
    455c:	0f be       	out	0x3f, r0	; 63
    455e:	cd bf       	out	0x3d, r28	; 61
    4560:	cf 91       	pop	r28
    4562:	df 91       	pop	r29
    4564:	08 95       	ret

00004566 <SendAdmin>:

void SendAdmin (void)
{
    4566:	0f 93       	push	r16
    4568:	1f 93       	push	r17
    456a:	df 93       	push	r29
    456c:	cf 93       	push	r28
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
    4572:	ed 97       	sbiw	r28, 0x3d	; 61
    4574:	0f b6       	in	r0, 0x3f	; 63
    4576:	f8 94       	cli
    4578:	de bf       	out	0x3e, r29	; 62
    457a:	0f be       	out	0x3f, r0	; 63
    457c:	cd bf       	out	0x3d, r28	; 61

	u8 LightValue = 0;
    457e:	1d ae       	std	Y+61, r1	; 0x3d
	u8 Local_u8Key = 0;
    4580:	1c ae       	std	Y+60, r1	; 0x3c
	u8 Key = 0;
    4582:	1b ae       	std	Y+59, r1	; 0x3b
	u8 Mapping_Light = 0;
    4584:	1a ae       	std	Y+58, r1	; 0x3a
	u8 TempValue = 0;
    4586:	19 ae       	std	Y+57, r1	; 0x39
	LCD_voidGotoXY(0, 0);
    4588:	80 e0       	ldi	r24, 0x00	; 0
    458a:	60 e0       	ldi	r22, 0x00	; 0
    458c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendSrting("1-> TEMP");
    4590:	88 ee       	ldi	r24, 0xE8	; 232
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
	LCD_voidGotoXY(1, 0);
    4598:	81 e0       	ldi	r24, 0x01	; 1
    459a:	60 e0       	ldi	r22, 0x00	; 0
    459c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendSrting("3-> LIGHT ");
    45a0:	81 ef       	ldi	r24, 0xF1	; 241
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
	LCD_voidGotoXY(0, 9);
    45a8:	80 e0       	ldi	r24, 0x00	; 0
    45aa:	69 e0       	ldi	r22, 0x09	; 9
    45ac:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendSrting("2-> FAN");
    45b0:	8c ef       	ldi	r24, 0xFC	; 252
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
	do
	{
		Local_u8Key = KPD_u8GetPressKey();
    45b8:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    45bc:	8c af       	std	Y+60, r24	; 0x3c
	}while(Local_u8Key == 255);
    45be:	8c ad       	ldd	r24, Y+60	; 0x3c
    45c0:	8f 3f       	cpi	r24, 0xFF	; 255
    45c2:	d1 f3       	breq	.-12     	; 0x45b8 <SendAdmin+0x52>
    45c4:	ec c0       	rjmp	.+472    	; 0x479e <SendAdmin+0x238>
	while(Local_u8Key == 1)
	{
		LCD_voidClearDisplay();
    45c6:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
		Temp = 'T';
    45ca:	84 e5       	ldi	r24, 0x54	; 84
    45cc:	80 93 f6 01 	sts	0x01F6, r24
		UART_TransmitData(Temp);
    45d0:	80 91 f6 01 	lds	r24, 0x01F6
    45d4:	88 2f       	mov	r24, r24
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
		U8TempValue = LM35_u8GetTempratureSynchronous();
    45dc:	0e 94 8f 1b 	call	0x371e	; 0x371e <LM35_u8GetTempratureSynchronous>
    45e0:	80 93 e5 01 	sts	0x01E5, r24
		LCD_voidGotoXY(0, 0);
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	60 e0       	ldi	r22, 0x00	; 0
    45e8:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("TEMP: ");
    45ec:	84 e0       	ldi	r24, 0x04	; 4
    45ee:	91 e0       	ldi	r25, 0x01	; 1
    45f0:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
		LCD_voidGotoXY(0, 5);
    45f4:	80 e0       	ldi	r24, 0x00	; 0
    45f6:	65 e0       	ldi	r22, 0x05	; 5
    45f8:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendNumber(U8TempValue);
    45fc:	80 91 e5 01 	lds	r24, 0x01E5
    4600:	88 2f       	mov	r24, r24
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <LCD_voidSendNumber>
		UART_TransmitData(U8TempValue);
    4608:	80 91 e5 01 	lds	r24, 0x01E5
    460c:	88 2f       	mov	r24, r24
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
		if(U8TempValue < 25)
    4614:	80 91 e5 01 	lds	r24, 0x01E5
    4618:	89 31       	cpi	r24, 0x19	; 25
    461a:	50 f4       	brcc	.+20     	; 0x4630 <SendAdmin+0xca>
		{
			Speed = 20;
    461c:	84 e1       	ldi	r24, 0x14	; 20
    461e:	80 93 f5 01 	sts	0x01F5, r24
			UART_TransmitData(Speed);
    4622:	80 91 f5 01 	lds	r24, 0x01F5
    4626:	88 2f       	mov	r24, r24
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    462e:	31 c0       	rjmp	.+98     	; 0x4692 <SendAdmin+0x12c>
		}
		else if(U8TempValue >= 25 &&  U8TempValue < 30)
    4630:	80 91 e5 01 	lds	r24, 0x01E5
    4634:	89 31       	cpi	r24, 0x19	; 25
    4636:	70 f0       	brcs	.+28     	; 0x4654 <SendAdmin+0xee>
    4638:	80 91 e5 01 	lds	r24, 0x01E5
    463c:	8e 31       	cpi	r24, 0x1E	; 30
    463e:	50 f4       	brcc	.+20     	; 0x4654 <SendAdmin+0xee>
		{
			Speed = 70;
    4640:	86 e4       	ldi	r24, 0x46	; 70
    4642:	80 93 f5 01 	sts	0x01F5, r24
			UART_TransmitData(Speed);
    4646:	80 91 f5 01 	lds	r24, 0x01F5
    464a:	88 2f       	mov	r24, r24
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    4652:	1f c0       	rjmp	.+62     	; 0x4692 <SendAdmin+0x12c>
		}
		else if(U8TempValue >= 30 && U8TempValue < 35)
    4654:	80 91 e5 01 	lds	r24, 0x01E5
    4658:	8e 31       	cpi	r24, 0x1E	; 30
    465a:	70 f0       	brcs	.+28     	; 0x4678 <SendAdmin+0x112>
    465c:	80 91 e5 01 	lds	r24, 0x01E5
    4660:	83 32       	cpi	r24, 0x23	; 35
    4662:	50 f4       	brcc	.+20     	; 0x4678 <SendAdmin+0x112>
		{
			Speed = 150;
    4664:	86 e9       	ldi	r24, 0x96	; 150
    4666:	80 93 f5 01 	sts	0x01F5, r24
			UART_TransmitData(Speed);
    466a:	80 91 f5 01 	lds	r24, 0x01F5
    466e:	88 2f       	mov	r24, r24
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    4676:	0d c0       	rjmp	.+26     	; 0x4692 <SendAdmin+0x12c>
		}
		else if(U8TempValue >= 35)
    4678:	80 91 e5 01 	lds	r24, 0x01E5
    467c:	83 32       	cpi	r24, 0x23	; 35
    467e:	48 f0       	brcs	.+18     	; 0x4692 <SendAdmin+0x12c>
		{
			Speed = 255;
    4680:	8f ef       	ldi	r24, 0xFF	; 255
    4682:	80 93 f5 01 	sts	0x01F5, r24
			UART_TransmitData(Speed);
    4686:	80 91 f5 01 	lds	r24, 0x01F5
    468a:	88 2f       	mov	r24, r24
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
		}

		LCD_voidGotoXY(1, 0);
    4692:	81 e0       	ldi	r24, 0x01	; 1
    4694:	60 e0       	ldi	r22, 0x00	; 0
    4696:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("1-> TO SET ");
    469a:	8b e0       	ldi	r24, 0x0B	; 11
    469c:	91 e0       	ldi	r25, 0x01	; 1
    469e:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
    46a2:	80 e0       	ldi	r24, 0x00	; 0
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	a8 ec       	ldi	r26, 0xC8	; 200
    46a8:	b2 e4       	ldi	r27, 0x42	; 66
    46aa:	8d ab       	std	Y+53, r24	; 0x35
    46ac:	9e ab       	std	Y+54, r25	; 0x36
    46ae:	af ab       	std	Y+55, r26	; 0x37
    46b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46b2:	6d a9       	ldd	r22, Y+53	; 0x35
    46b4:	7e a9       	ldd	r23, Y+54	; 0x36
    46b6:	8f a9       	ldd	r24, Y+55	; 0x37
    46b8:	98 ad       	ldd	r25, Y+56	; 0x38
    46ba:	20 e0       	ldi	r18, 0x00	; 0
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	4a ef       	ldi	r20, 0xFA	; 250
    46c0:	54 e4       	ldi	r21, 0x44	; 68
    46c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c6:	dc 01       	movw	r26, r24
    46c8:	cb 01       	movw	r24, r22
    46ca:	89 ab       	std	Y+49, r24	; 0x31
    46cc:	9a ab       	std	Y+50, r25	; 0x32
    46ce:	ab ab       	std	Y+51, r26	; 0x33
    46d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    46d2:	69 a9       	ldd	r22, Y+49	; 0x31
    46d4:	7a a9       	ldd	r23, Y+50	; 0x32
    46d6:	8b a9       	ldd	r24, Y+51	; 0x33
    46d8:	9c a9       	ldd	r25, Y+52	; 0x34
    46da:	20 e0       	ldi	r18, 0x00	; 0
    46dc:	30 e0       	ldi	r19, 0x00	; 0
    46de:	40 e8       	ldi	r20, 0x80	; 128
    46e0:	5f e3       	ldi	r21, 0x3F	; 63
    46e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46e6:	88 23       	and	r24, r24
    46e8:	2c f4       	brge	.+10     	; 0x46f4 <SendAdmin+0x18e>
		__ticks = 1;
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	98 ab       	std	Y+48, r25	; 0x30
    46f0:	8f a7       	std	Y+47, r24	; 0x2f
    46f2:	3f c0       	rjmp	.+126    	; 0x4772 <SendAdmin+0x20c>
	else if (__tmp > 65535)
    46f4:	69 a9       	ldd	r22, Y+49	; 0x31
    46f6:	7a a9       	ldd	r23, Y+50	; 0x32
    46f8:	8b a9       	ldd	r24, Y+51	; 0x33
    46fa:	9c a9       	ldd	r25, Y+52	; 0x34
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	3f ef       	ldi	r19, 0xFF	; 255
    4700:	4f e7       	ldi	r20, 0x7F	; 127
    4702:	57 e4       	ldi	r21, 0x47	; 71
    4704:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4708:	18 16       	cp	r1, r24
    470a:	4c f5       	brge	.+82     	; 0x475e <SendAdmin+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    470c:	6d a9       	ldd	r22, Y+53	; 0x35
    470e:	7e a9       	ldd	r23, Y+54	; 0x36
    4710:	8f a9       	ldd	r24, Y+55	; 0x37
    4712:	98 ad       	ldd	r25, Y+56	; 0x38
    4714:	20 e0       	ldi	r18, 0x00	; 0
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	40 e2       	ldi	r20, 0x20	; 32
    471a:	51 e4       	ldi	r21, 0x41	; 65
    471c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4720:	dc 01       	movw	r26, r24
    4722:	cb 01       	movw	r24, r22
    4724:	bc 01       	movw	r22, r24
    4726:	cd 01       	movw	r24, r26
    4728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    472c:	dc 01       	movw	r26, r24
    472e:	cb 01       	movw	r24, r22
    4730:	98 ab       	std	Y+48, r25	; 0x30
    4732:	8f a7       	std	Y+47, r24	; 0x2f
    4734:	0f c0       	rjmp	.+30     	; 0x4754 <SendAdmin+0x1ee>
    4736:	88 ec       	ldi	r24, 0xC8	; 200
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	9e a7       	std	Y+46, r25	; 0x2e
    473c:	8d a7       	std	Y+45, r24	; 0x2d
    473e:	8d a5       	ldd	r24, Y+45	; 0x2d
    4740:	9e a5       	ldd	r25, Y+46	; 0x2e
    4742:	01 97       	sbiw	r24, 0x01	; 1
    4744:	f1 f7       	brne	.-4      	; 0x4742 <SendAdmin+0x1dc>
    4746:	9e a7       	std	Y+46, r25	; 0x2e
    4748:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    474a:	8f a5       	ldd	r24, Y+47	; 0x2f
    474c:	98 a9       	ldd	r25, Y+48	; 0x30
    474e:	01 97       	sbiw	r24, 0x01	; 1
    4750:	98 ab       	std	Y+48, r25	; 0x30
    4752:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4754:	8f a5       	ldd	r24, Y+47	; 0x2f
    4756:	98 a9       	ldd	r25, Y+48	; 0x30
    4758:	00 97       	sbiw	r24, 0x00	; 0
    475a:	69 f7       	brne	.-38     	; 0x4736 <SendAdmin+0x1d0>
    475c:	14 c0       	rjmp	.+40     	; 0x4786 <SendAdmin+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    475e:	69 a9       	ldd	r22, Y+49	; 0x31
    4760:	7a a9       	ldd	r23, Y+50	; 0x32
    4762:	8b a9       	ldd	r24, Y+51	; 0x33
    4764:	9c a9       	ldd	r25, Y+52	; 0x34
    4766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    476a:	dc 01       	movw	r26, r24
    476c:	cb 01       	movw	r24, r22
    476e:	98 ab       	std	Y+48, r25	; 0x30
    4770:	8f a7       	std	Y+47, r24	; 0x2f
    4772:	8f a5       	ldd	r24, Y+47	; 0x2f
    4774:	98 a9       	ldd	r25, Y+48	; 0x30
    4776:	9c a7       	std	Y+44, r25	; 0x2c
    4778:	8b a7       	std	Y+43, r24	; 0x2b
    477a:	8b a5       	ldd	r24, Y+43	; 0x2b
    477c:	9c a5       	ldd	r25, Y+44	; 0x2c
    477e:	01 97       	sbiw	r24, 0x01	; 1
    4780:	f1 f7       	brne	.-4      	; 0x477e <SendAdmin+0x218>
    4782:	9c a7       	std	Y+44, r25	; 0x2c
    4784:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		do
		{
			Key = KPD_u8GetPressKey();
    4786:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    478a:	8b af       	std	Y+59, r24	; 0x3b
		}while(Key == 255);
    478c:	8b ad       	ldd	r24, Y+59	; 0x3b
    478e:	8f 3f       	cpi	r24, 0xFF	; 255
    4790:	d1 f3       	breq	.-12     	; 0x4786 <SendAdmin+0x220>
		if(Key == 'O')
    4792:	8b ad       	ldd	r24, Y+59	; 0x3b
    4794:	8f 34       	cpi	r24, 0x4F	; 79
    4796:	19 f4       	brne	.+6      	; 0x479e <SendAdmin+0x238>
		{
			LCD_voidClearDisplay();
    4798:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
    479c:	8b c1       	rjmp	.+790    	; 0x4ab4 <SendAdmin+0x54e>
	LCD_voidSendSrting("2-> FAN");
	do
	{
		Local_u8Key = KPD_u8GetPressKey();
	}while(Local_u8Key == 255);
	while(Local_u8Key == 1)
    479e:	8c ad       	ldd	r24, Y+60	; 0x3c
    47a0:	81 30       	cpi	r24, 0x01	; 1
    47a2:	09 f4       	brne	.+2      	; 0x47a6 <SendAdmin+0x240>
    47a4:	10 cf       	rjmp	.-480    	; 0x45c6 <SendAdmin+0x60>
    47a6:	86 c1       	rjmp	.+780    	; 0x4ab4 <SendAdmin+0x54e>
			break;
		}
	}
	while(Local_u8Key == 2)
	{
		LCD_voidClearDisplay();
    47a8:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
		Temp = 'F';
    47ac:	86 e4       	ldi	r24, 0x46	; 70
    47ae:	80 93 f6 01 	sts	0x01F6, r24
		UART_TransmitData(Temp);
    47b2:	80 91 f6 01 	lds	r24, 0x01F6
    47b6:	88 2f       	mov	r24, r24
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
		LCD_voidGotoXY(0, 0);
    47be:	80 e0       	ldi	r24, 0x00	; 0
    47c0:	60 e0       	ldi	r22, 0x00	; 0
    47c2:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("1-> HIGH");
    47c6:	87 e1       	ldi	r24, 0x17	; 23
    47c8:	91 e0       	ldi	r25, 0x01	; 1
    47ca:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
		LCD_voidGotoXY(0, 9);
    47ce:	80 e0       	ldi	r24, 0x00	; 0
    47d0:	69 e0       	ldi	r22, 0x09	; 9
    47d2:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("2-> MID");
    47d6:	80 e2       	ldi	r24, 0x20	; 32
    47d8:	91 e0       	ldi	r25, 0x01	; 1
    47da:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
		LCD_voidGotoXY(1, 0);
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	60 e0       	ldi	r22, 0x00	; 0
    47e2:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("3-> LOW");
    47e6:	88 e2       	ldi	r24, 0x28	; 40
    47e8:	91 e0       	ldi	r25, 0x01	; 1
    47ea:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>

		do
		{

			Switchfan = KPD_u8GetPressKey();
    47ee:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    47f2:	80 93 f4 01 	sts	0x01F4, r24
		}while(Switchfan == 255);
    47f6:	80 91 f4 01 	lds	r24, 0x01F4
    47fa:	8f 3f       	cpi	r24, 0xFF	; 255
    47fc:	c1 f3       	breq	.-16     	; 0x47ee <SendAdmin+0x288>
		if(Switchfan == 1)
    47fe:	80 91 f4 01 	lds	r24, 0x01F4
    4802:	81 30       	cpi	r24, 0x01	; 1
    4804:	a1 f4       	brne	.+40     	; 0x482e <SendAdmin+0x2c8>
		{
			LCD_voidClearDisplay();
    4806:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
			LCD_voidGotoXY(0, 0);
    480a:	80 e0       	ldi	r24, 0x00	; 0
    480c:	60 e0       	ldi	r22, 0x00	; 0
    480e:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("HIGH SPEED");
    4812:	80 e3       	ldi	r24, 0x30	; 48
    4814:	91 e0       	ldi	r25, 0x01	; 1
    4816:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
			Speed = 255;
    481a:	8f ef       	ldi	r24, 0xFF	; 255
    481c:	80 93 f5 01 	sts	0x01F5, r24
			UART_TransmitData(Speed);
    4820:	80 91 f5 01 	lds	r24, 0x01F5
    4824:	88 2f       	mov	r24, r24
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    482c:	a2 c0       	rjmp	.+324    	; 0x4972 <SendAdmin+0x40c>
		}
		else if(Switchfan == 2)
    482e:	80 91 f4 01 	lds	r24, 0x01F4
    4832:	82 30       	cpi	r24, 0x02	; 2
    4834:	a1 f4       	brne	.+40     	; 0x485e <SendAdmin+0x2f8>
		{
			LCD_voidClearDisplay();
    4836:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
			LCD_voidGotoXY(0, 0);
    483a:	80 e0       	ldi	r24, 0x00	; 0
    483c:	60 e0       	ldi	r22, 0x00	; 0
    483e:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("MID SPEED");
    4842:	8b e3       	ldi	r24, 0x3B	; 59
    4844:	91 e0       	ldi	r25, 0x01	; 1
    4846:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
			Speed = 150;
    484a:	86 e9       	ldi	r24, 0x96	; 150
    484c:	80 93 f5 01 	sts	0x01F5, r24
			UART_TransmitData(Speed);
    4850:	80 91 f5 01 	lds	r24, 0x01F5
    4854:	88 2f       	mov	r24, r24
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    485c:	8a c0       	rjmp	.+276    	; 0x4972 <SendAdmin+0x40c>
		}
		else if(Switchfan == 3)
    485e:	80 91 f4 01 	lds	r24, 0x01F4
    4862:	83 30       	cpi	r24, 0x03	; 3
    4864:	09 f0       	breq	.+2      	; 0x4868 <SendAdmin+0x302>
    4866:	85 c0       	rjmp	.+266    	; 0x4972 <SendAdmin+0x40c>
		{
			LCD_voidClearDisplay();
    4868:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
			LCD_voidGotoXY(0, 0);
    486c:	80 e0       	ldi	r24, 0x00	; 0
    486e:	60 e0       	ldi	r22, 0x00	; 0
    4870:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("LOW SPEED");
    4874:	85 e4       	ldi	r24, 0x45	; 69
    4876:	91 e0       	ldi	r25, 0x01	; 1
    4878:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
			Speed = 70;
    487c:	86 e4       	ldi	r24, 0x46	; 70
    487e:	80 93 f5 01 	sts	0x01F5, r24
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	a8 ec       	ldi	r26, 0xC8	; 200
    4888:	b2 e4       	ldi	r27, 0x42	; 66
    488a:	8f a3       	std	Y+39, r24	; 0x27
    488c:	98 a7       	std	Y+40, r25	; 0x28
    488e:	a9 a7       	std	Y+41, r26	; 0x29
    4890:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4892:	6f a1       	ldd	r22, Y+39	; 0x27
    4894:	78 a5       	ldd	r23, Y+40	; 0x28
    4896:	89 a5       	ldd	r24, Y+41	; 0x29
    4898:	9a a5       	ldd	r25, Y+42	; 0x2a
    489a:	20 e0       	ldi	r18, 0x00	; 0
    489c:	30 e0       	ldi	r19, 0x00	; 0
    489e:	4a ef       	ldi	r20, 0xFA	; 250
    48a0:	54 e4       	ldi	r21, 0x44	; 68
    48a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48a6:	dc 01       	movw	r26, r24
    48a8:	cb 01       	movw	r24, r22
    48aa:	8b a3       	std	Y+35, r24	; 0x23
    48ac:	9c a3       	std	Y+36, r25	; 0x24
    48ae:	ad a3       	std	Y+37, r26	; 0x25
    48b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    48b2:	6b a1       	ldd	r22, Y+35	; 0x23
    48b4:	7c a1       	ldd	r23, Y+36	; 0x24
    48b6:	8d a1       	ldd	r24, Y+37	; 0x25
    48b8:	9e a1       	ldd	r25, Y+38	; 0x26
    48ba:	20 e0       	ldi	r18, 0x00	; 0
    48bc:	30 e0       	ldi	r19, 0x00	; 0
    48be:	40 e8       	ldi	r20, 0x80	; 128
    48c0:	5f e3       	ldi	r21, 0x3F	; 63
    48c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48c6:	88 23       	and	r24, r24
    48c8:	2c f4       	brge	.+10     	; 0x48d4 <SendAdmin+0x36e>
		__ticks = 1;
    48ca:	81 e0       	ldi	r24, 0x01	; 1
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	9a a3       	std	Y+34, r25	; 0x22
    48d0:	89 a3       	std	Y+33, r24	; 0x21
    48d2:	3f c0       	rjmp	.+126    	; 0x4952 <SendAdmin+0x3ec>
	else if (__tmp > 65535)
    48d4:	6b a1       	ldd	r22, Y+35	; 0x23
    48d6:	7c a1       	ldd	r23, Y+36	; 0x24
    48d8:	8d a1       	ldd	r24, Y+37	; 0x25
    48da:	9e a1       	ldd	r25, Y+38	; 0x26
    48dc:	20 e0       	ldi	r18, 0x00	; 0
    48de:	3f ef       	ldi	r19, 0xFF	; 255
    48e0:	4f e7       	ldi	r20, 0x7F	; 127
    48e2:	57 e4       	ldi	r21, 0x47	; 71
    48e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    48e8:	18 16       	cp	r1, r24
    48ea:	4c f5       	brge	.+82     	; 0x493e <SendAdmin+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ec:	6f a1       	ldd	r22, Y+39	; 0x27
    48ee:	78 a5       	ldd	r23, Y+40	; 0x28
    48f0:	89 a5       	ldd	r24, Y+41	; 0x29
    48f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    48f4:	20 e0       	ldi	r18, 0x00	; 0
    48f6:	30 e0       	ldi	r19, 0x00	; 0
    48f8:	40 e2       	ldi	r20, 0x20	; 32
    48fa:	51 e4       	ldi	r21, 0x41	; 65
    48fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4900:	dc 01       	movw	r26, r24
    4902:	cb 01       	movw	r24, r22
    4904:	bc 01       	movw	r22, r24
    4906:	cd 01       	movw	r24, r26
    4908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    490c:	dc 01       	movw	r26, r24
    490e:	cb 01       	movw	r24, r22
    4910:	9a a3       	std	Y+34, r25	; 0x22
    4912:	89 a3       	std	Y+33, r24	; 0x21
    4914:	0f c0       	rjmp	.+30     	; 0x4934 <SendAdmin+0x3ce>
    4916:	88 ec       	ldi	r24, 0xC8	; 200
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	98 a3       	std	Y+32, r25	; 0x20
    491c:	8f 8f       	std	Y+31, r24	; 0x1f
    491e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4920:	98 a1       	ldd	r25, Y+32	; 0x20
    4922:	01 97       	sbiw	r24, 0x01	; 1
    4924:	f1 f7       	brne	.-4      	; 0x4922 <SendAdmin+0x3bc>
    4926:	98 a3       	std	Y+32, r25	; 0x20
    4928:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    492a:	89 a1       	ldd	r24, Y+33	; 0x21
    492c:	9a a1       	ldd	r25, Y+34	; 0x22
    492e:	01 97       	sbiw	r24, 0x01	; 1
    4930:	9a a3       	std	Y+34, r25	; 0x22
    4932:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4934:	89 a1       	ldd	r24, Y+33	; 0x21
    4936:	9a a1       	ldd	r25, Y+34	; 0x22
    4938:	00 97       	sbiw	r24, 0x00	; 0
    493a:	69 f7       	brne	.-38     	; 0x4916 <SendAdmin+0x3b0>
    493c:	14 c0       	rjmp	.+40     	; 0x4966 <SendAdmin+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    493e:	6b a1       	ldd	r22, Y+35	; 0x23
    4940:	7c a1       	ldd	r23, Y+36	; 0x24
    4942:	8d a1       	ldd	r24, Y+37	; 0x25
    4944:	9e a1       	ldd	r25, Y+38	; 0x26
    4946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    494a:	dc 01       	movw	r26, r24
    494c:	cb 01       	movw	r24, r22
    494e:	9a a3       	std	Y+34, r25	; 0x22
    4950:	89 a3       	std	Y+33, r24	; 0x21
    4952:	89 a1       	ldd	r24, Y+33	; 0x21
    4954:	9a a1       	ldd	r25, Y+34	; 0x22
    4956:	9e 8f       	std	Y+30, r25	; 0x1e
    4958:	8d 8f       	std	Y+29, r24	; 0x1d
    495a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    495c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    495e:	01 97       	sbiw	r24, 0x01	; 1
    4960:	f1 f7       	brne	.-4      	; 0x495e <SendAdmin+0x3f8>
    4962:	9e 8f       	std	Y+30, r25	; 0x1e
    4964:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			UART_TransmitData(Speed);
    4966:	80 91 f5 01 	lds	r24, 0x01F5
    496a:	88 2f       	mov	r24, r24
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	a8 ec       	ldi	r26, 0xC8	; 200
    4978:	b2 e4       	ldi	r27, 0x42	; 66
    497a:	89 8f       	std	Y+25, r24	; 0x19
    497c:	9a 8f       	std	Y+26, r25	; 0x1a
    497e:	ab 8f       	std	Y+27, r26	; 0x1b
    4980:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4982:	69 8d       	ldd	r22, Y+25	; 0x19
    4984:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4986:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4988:	9c 8d       	ldd	r25, Y+28	; 0x1c
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	4a ef       	ldi	r20, 0xFA	; 250
    4990:	54 e4       	ldi	r21, 0x44	; 68
    4992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4996:	dc 01       	movw	r26, r24
    4998:	cb 01       	movw	r24, r22
    499a:	8d 8b       	std	Y+21, r24	; 0x15
    499c:	9e 8b       	std	Y+22, r25	; 0x16
    499e:	af 8b       	std	Y+23, r26	; 0x17
    49a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    49a2:	6d 89       	ldd	r22, Y+21	; 0x15
    49a4:	7e 89       	ldd	r23, Y+22	; 0x16
    49a6:	8f 89       	ldd	r24, Y+23	; 0x17
    49a8:	98 8d       	ldd	r25, Y+24	; 0x18
    49aa:	20 e0       	ldi	r18, 0x00	; 0
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	40 e8       	ldi	r20, 0x80	; 128
    49b0:	5f e3       	ldi	r21, 0x3F	; 63
    49b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    49b6:	88 23       	and	r24, r24
    49b8:	2c f4       	brge	.+10     	; 0x49c4 <SendAdmin+0x45e>
		__ticks = 1;
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	9c 8b       	std	Y+20, r25	; 0x14
    49c0:	8b 8b       	std	Y+19, r24	; 0x13
    49c2:	3f c0       	rjmp	.+126    	; 0x4a42 <SendAdmin+0x4dc>
	else if (__tmp > 65535)
    49c4:	6d 89       	ldd	r22, Y+21	; 0x15
    49c6:	7e 89       	ldd	r23, Y+22	; 0x16
    49c8:	8f 89       	ldd	r24, Y+23	; 0x17
    49ca:	98 8d       	ldd	r25, Y+24	; 0x18
    49cc:	20 e0       	ldi	r18, 0x00	; 0
    49ce:	3f ef       	ldi	r19, 0xFF	; 255
    49d0:	4f e7       	ldi	r20, 0x7F	; 127
    49d2:	57 e4       	ldi	r21, 0x47	; 71
    49d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49d8:	18 16       	cp	r1, r24
    49da:	4c f5       	brge	.+82     	; 0x4a2e <SendAdmin+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49dc:	69 8d       	ldd	r22, Y+25	; 0x19
    49de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49e4:	20 e0       	ldi	r18, 0x00	; 0
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	40 e2       	ldi	r20, 0x20	; 32
    49ea:	51 e4       	ldi	r21, 0x41	; 65
    49ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f0:	dc 01       	movw	r26, r24
    49f2:	cb 01       	movw	r24, r22
    49f4:	bc 01       	movw	r22, r24
    49f6:	cd 01       	movw	r24, r26
    49f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fc:	dc 01       	movw	r26, r24
    49fe:	cb 01       	movw	r24, r22
    4a00:	9c 8b       	std	Y+20, r25	; 0x14
    4a02:	8b 8b       	std	Y+19, r24	; 0x13
    4a04:	0f c0       	rjmp	.+30     	; 0x4a24 <SendAdmin+0x4be>
    4a06:	88 ec       	ldi	r24, 0xC8	; 200
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	9a 8b       	std	Y+18, r25	; 0x12
    4a0c:	89 8b       	std	Y+17, r24	; 0x11
    4a0e:	89 89       	ldd	r24, Y+17	; 0x11
    4a10:	9a 89       	ldd	r25, Y+18	; 0x12
    4a12:	01 97       	sbiw	r24, 0x01	; 1
    4a14:	f1 f7       	brne	.-4      	; 0x4a12 <SendAdmin+0x4ac>
    4a16:	9a 8b       	std	Y+18, r25	; 0x12
    4a18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a1a:	8b 89       	ldd	r24, Y+19	; 0x13
    4a1c:	9c 89       	ldd	r25, Y+20	; 0x14
    4a1e:	01 97       	sbiw	r24, 0x01	; 1
    4a20:	9c 8b       	std	Y+20, r25	; 0x14
    4a22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a24:	8b 89       	ldd	r24, Y+19	; 0x13
    4a26:	9c 89       	ldd	r25, Y+20	; 0x14
    4a28:	00 97       	sbiw	r24, 0x00	; 0
    4a2a:	69 f7       	brne	.-38     	; 0x4a06 <SendAdmin+0x4a0>
    4a2c:	14 c0       	rjmp	.+40     	; 0x4a56 <SendAdmin+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    4a30:	7e 89       	ldd	r23, Y+22	; 0x16
    4a32:	8f 89       	ldd	r24, Y+23	; 0x17
    4a34:	98 8d       	ldd	r25, Y+24	; 0x18
    4a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a3a:	dc 01       	movw	r26, r24
    4a3c:	cb 01       	movw	r24, r22
    4a3e:	9c 8b       	std	Y+20, r25	; 0x14
    4a40:	8b 8b       	std	Y+19, r24	; 0x13
    4a42:	8b 89       	ldd	r24, Y+19	; 0x13
    4a44:	9c 89       	ldd	r25, Y+20	; 0x14
    4a46:	98 8b       	std	Y+16, r25	; 0x10
    4a48:	8f 87       	std	Y+15, r24	; 0x0f
    4a4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a4c:	98 89       	ldd	r25, Y+16	; 0x10
    4a4e:	01 97       	sbiw	r24, 0x01	; 1
    4a50:	f1 f7       	brne	.-4      	; 0x4a4e <SendAdmin+0x4e8>
    4a52:	98 8b       	std	Y+16, r25	; 0x10
    4a54:	8f 87       	std	Y+15, r24	; 0x0f
		}
		_delay_ms(100);
		do
		{
			Key = KPD_u8GetPressKey();
    4a56:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    4a5a:	8b af       	std	Y+59, r24	; 0x3b
		}while(Key == 255);
    4a5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a5e:	8f 3f       	cpi	r24, 0xFF	; 255
    4a60:	d1 f3       	breq	.-12     	; 0x4a56 <SendAdmin+0x4f0>
		if(Key == 'O')
    4a62:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a64:	8f 34       	cpi	r24, 0x4F	; 79
    4a66:	31 f5       	brne	.+76     	; 0x4ab4 <SendAdmin+0x54e>
		{
			LCD_voidClearDisplay();
    4a68:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
			LCD_voidGotoXY(0, 0);
    4a6c:	80 e0       	ldi	r24, 0x00	; 0
    4a6e:	60 e0       	ldi	r22, 0x00	; 0
    4a70:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("1-> HIGH");
    4a74:	87 e1       	ldi	r24, 0x17	; 23
    4a76:	91 e0       	ldi	r25, 0x01	; 1
    4a78:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
			LCD_voidGotoXY(0, 9);
    4a7c:	80 e0       	ldi	r24, 0x00	; 0
    4a7e:	69 e0       	ldi	r22, 0x09	; 9
    4a80:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("2-> MID");
    4a84:	80 e2       	ldi	r24, 0x20	; 32
    4a86:	91 e0       	ldi	r25, 0x01	; 1
    4a88:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
			LCD_voidGotoXY(1, 0);
    4a8c:	81 e0       	ldi	r24, 0x01	; 1
    4a8e:	60 e0       	ldi	r22, 0x00	; 0
    4a90:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("3-> LOW");
    4a94:	88 e2       	ldi	r24, 0x28	; 40
    4a96:	91 e0       	ldi	r25, 0x01	; 1
    4a98:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
			do
			{
				Key = KPD_u8GetPressKey();
    4a9c:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    4aa0:	8b af       	std	Y+59, r24	; 0x3b
			}while(Key == 255);
    4aa2:	8b ad       	ldd	r24, Y+59	; 0x3b
    4aa4:	8f 3f       	cpi	r24, 0xFF	; 255
    4aa6:	d1 f3       	breq	.-12     	; 0x4a9c <SendAdmin+0x536>
			if(Key == 'O')
    4aa8:	8b ad       	ldd	r24, Y+59	; 0x3b
    4aaa:	8f 34       	cpi	r24, 0x4F	; 79
    4aac:	19 f4       	brne	.+6      	; 0x4ab4 <SendAdmin+0x54e>
			{
				LCD_voidClearDisplay();
    4aae:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
    4ab2:	c1 c0       	rjmp	.+386    	; 0x4c36 <SendAdmin+0x6d0>
		{
			LCD_voidClearDisplay();
			break;
		}
	}
	while(Local_u8Key == 2)
    4ab4:	8c ad       	ldd	r24, Y+60	; 0x3c
    4ab6:	82 30       	cpi	r24, 0x02	; 2
    4ab8:	09 f4       	brne	.+2      	; 0x4abc <SendAdmin+0x556>
    4aba:	76 ce       	rjmp	.-788    	; 0x47a8 <SendAdmin+0x242>
    4abc:	bc c0       	rjmp	.+376    	; 0x4c36 <SendAdmin+0x6d0>

		}
	}
	while(Local_u8Key == 3)
	{
		LCD_voidClearDisplay();
    4abe:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
		Temp = 'L';
    4ac2:	8c e4       	ldi	r24, 0x4C	; 76
    4ac4:	80 93 f6 01 	sts	0x01F6, r24
		UART_TransmitData(Temp);
    4ac8:	80 91 f6 01 	lds	r24, 0x01F6
    4acc:	88 2f       	mov	r24, r24
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
		Mapping_Light = ACD_voidStartConversionSynchronous(ADC_Channel_1);
    4ad4:	81 e0       	ldi	r24, 0x01	; 1
    4ad6:	0e 94 ab 13 	call	0x2756	; 0x2756 <ACD_voidStartConversionSynchronous>
    4ada:	8a af       	std	Y+58, r24	; 0x3a
		LightValue = ADC_voidMapping(255, 0, 243, 2, Mapping_Light);
    4adc:	8a ad       	ldd	r24, Y+58	; 0x3a
    4ade:	e8 2f       	mov	r30, r24
    4ae0:	f0 e0       	ldi	r31, 0x00	; 0
    4ae2:	8f ef       	ldi	r24, 0xFF	; 255
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	60 e0       	ldi	r22, 0x00	; 0
    4ae8:	70 e0       	ldi	r23, 0x00	; 0
    4aea:	43 ef       	ldi	r20, 0xF3	; 243
    4aec:	50 e0       	ldi	r21, 0x00	; 0
    4aee:	22 e0       	ldi	r18, 0x02	; 2
    4af0:	30 e0       	ldi	r19, 0x00	; 0
    4af2:	8f 01       	movw	r16, r30
    4af4:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <ADC_voidMapping>
    4af8:	8d af       	std	Y+61, r24	; 0x3d
		LCD_voidGotoXY(0, 0);
    4afa:	80 e0       	ldi	r24, 0x00	; 0
    4afc:	60 e0       	ldi	r22, 0x00	; 0
    4afe:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("LIGHT: ");
    4b02:	8f e4       	ldi	r24, 0x4F	; 79
    4b04:	91 e0       	ldi	r25, 0x01	; 1
    4b06:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
		LCD_voidGotoXY(0, 7);
    4b0a:	80 e0       	ldi	r24, 0x00	; 0
    4b0c:	67 e0       	ldi	r22, 0x07	; 7
    4b0e:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendNumber(LightValue + 2);
    4b12:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b14:	88 2f       	mov	r24, r24
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	02 96       	adiw	r24, 0x02	; 2
    4b1a:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <LCD_voidSendNumber>
		UART_TransmitData(LightValue + 2);
    4b1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b20:	88 2f       	mov	r24, r24
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	02 96       	adiw	r24, 0x02	; 2
    4b26:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
		LCD_voidGotoXY(1, 0);
    4b2a:	81 e0       	ldi	r24, 0x01	; 1
    4b2c:	60 e0       	ldi	r22, 0x00	; 0
    4b2e:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("TO SET -> 3");
    4b32:	87 e5       	ldi	r24, 0x57	; 87
    4b34:	91 e0       	ldi	r25, 0x01	; 1
    4b36:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
    4b3a:	80 e0       	ldi	r24, 0x00	; 0
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	a8 ec       	ldi	r26, 0xC8	; 200
    4b40:	b2 e4       	ldi	r27, 0x42	; 66
    4b42:	8b 87       	std	Y+11, r24	; 0x0b
    4b44:	9c 87       	std	Y+12, r25	; 0x0c
    4b46:	ad 87       	std	Y+13, r26	; 0x0d
    4b48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b52:	20 e0       	ldi	r18, 0x00	; 0
    4b54:	30 e0       	ldi	r19, 0x00	; 0
    4b56:	4a ef       	ldi	r20, 0xFA	; 250
    4b58:	54 e4       	ldi	r21, 0x44	; 68
    4b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b5e:	dc 01       	movw	r26, r24
    4b60:	cb 01       	movw	r24, r22
    4b62:	8f 83       	std	Y+7, r24	; 0x07
    4b64:	98 87       	std	Y+8, r25	; 0x08
    4b66:	a9 87       	std	Y+9, r26	; 0x09
    4b68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    4b6c:	78 85       	ldd	r23, Y+8	; 0x08
    4b6e:	89 85       	ldd	r24, Y+9	; 0x09
    4b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b72:	20 e0       	ldi	r18, 0x00	; 0
    4b74:	30 e0       	ldi	r19, 0x00	; 0
    4b76:	40 e8       	ldi	r20, 0x80	; 128
    4b78:	5f e3       	ldi	r21, 0x3F	; 63
    4b7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b7e:	88 23       	and	r24, r24
    4b80:	2c f4       	brge	.+10     	; 0x4b8c <SendAdmin+0x626>
		__ticks = 1;
    4b82:	81 e0       	ldi	r24, 0x01	; 1
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	9e 83       	std	Y+6, r25	; 0x06
    4b88:	8d 83       	std	Y+5, r24	; 0x05
    4b8a:	3f c0       	rjmp	.+126    	; 0x4c0a <SendAdmin+0x6a4>
	else if (__tmp > 65535)
    4b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b8e:	78 85       	ldd	r23, Y+8	; 0x08
    4b90:	89 85       	ldd	r24, Y+9	; 0x09
    4b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b94:	20 e0       	ldi	r18, 0x00	; 0
    4b96:	3f ef       	ldi	r19, 0xFF	; 255
    4b98:	4f e7       	ldi	r20, 0x7F	; 127
    4b9a:	57 e4       	ldi	r21, 0x47	; 71
    4b9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ba0:	18 16       	cp	r1, r24
    4ba2:	4c f5       	brge	.+82     	; 0x4bf6 <SendAdmin+0x690>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ba4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ba6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bac:	20 e0       	ldi	r18, 0x00	; 0
    4bae:	30 e0       	ldi	r19, 0x00	; 0
    4bb0:	40 e2       	ldi	r20, 0x20	; 32
    4bb2:	51 e4       	ldi	r21, 0x41	; 65
    4bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bb8:	dc 01       	movw	r26, r24
    4bba:	cb 01       	movw	r24, r22
    4bbc:	bc 01       	movw	r22, r24
    4bbe:	cd 01       	movw	r24, r26
    4bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bc4:	dc 01       	movw	r26, r24
    4bc6:	cb 01       	movw	r24, r22
    4bc8:	9e 83       	std	Y+6, r25	; 0x06
    4bca:	8d 83       	std	Y+5, r24	; 0x05
    4bcc:	0f c0       	rjmp	.+30     	; 0x4bec <SendAdmin+0x686>
    4bce:	88 ec       	ldi	r24, 0xC8	; 200
    4bd0:	90 e0       	ldi	r25, 0x00	; 0
    4bd2:	9c 83       	std	Y+4, r25	; 0x04
    4bd4:	8b 83       	std	Y+3, r24	; 0x03
    4bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    4bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    4bda:	01 97       	sbiw	r24, 0x01	; 1
    4bdc:	f1 f7       	brne	.-4      	; 0x4bda <SendAdmin+0x674>
    4bde:	9c 83       	std	Y+4, r25	; 0x04
    4be0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4be2:	8d 81       	ldd	r24, Y+5	; 0x05
    4be4:	9e 81       	ldd	r25, Y+6	; 0x06
    4be6:	01 97       	sbiw	r24, 0x01	; 1
    4be8:	9e 83       	std	Y+6, r25	; 0x06
    4bea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bec:	8d 81       	ldd	r24, Y+5	; 0x05
    4bee:	9e 81       	ldd	r25, Y+6	; 0x06
    4bf0:	00 97       	sbiw	r24, 0x00	; 0
    4bf2:	69 f7       	brne	.-38     	; 0x4bce <SendAdmin+0x668>
    4bf4:	14 c0       	rjmp	.+40     	; 0x4c1e <SendAdmin+0x6b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    4bf8:	78 85       	ldd	r23, Y+8	; 0x08
    4bfa:	89 85       	ldd	r24, Y+9	; 0x09
    4bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c02:	dc 01       	movw	r26, r24
    4c04:	cb 01       	movw	r24, r22
    4c06:	9e 83       	std	Y+6, r25	; 0x06
    4c08:	8d 83       	std	Y+5, r24	; 0x05
    4c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c0e:	9a 83       	std	Y+2, r25	; 0x02
    4c10:	89 83       	std	Y+1, r24	; 0x01
    4c12:	89 81       	ldd	r24, Y+1	; 0x01
    4c14:	9a 81       	ldd	r25, Y+2	; 0x02
    4c16:	01 97       	sbiw	r24, 0x01	; 1
    4c18:	f1 f7       	brne	.-4      	; 0x4c16 <SendAdmin+0x6b0>
    4c1a:	9a 83       	std	Y+2, r25	; 0x02
    4c1c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		do
		{
			Key = KPD_u8GetPressKey();
    4c1e:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    4c22:	8b af       	std	Y+59, r24	; 0x3b
		}while(Key == 255);
    4c24:	8b ad       	ldd	r24, Y+59	; 0x3b
    4c26:	8f 3f       	cpi	r24, 0xFF	; 255
    4c28:	d1 f3       	breq	.-12     	; 0x4c1e <SendAdmin+0x6b8>
		if(Key == 'O')
    4c2a:	8b ad       	ldd	r24, Y+59	; 0x3b
    4c2c:	8f 34       	cpi	r24, 0x4F	; 79
    4c2e:	19 f4       	brne	.+6      	; 0x4c36 <SendAdmin+0x6d0>
		{
			LCD_voidClearDisplay();
    4c30:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
    4c34:	04 c0       	rjmp	.+8      	; 0x4c3e <SendAdmin+0x6d8>
				break;
			}

		}
	}
	while(Local_u8Key == 3)
    4c36:	8c ad       	ldd	r24, Y+60	; 0x3c
    4c38:	83 30       	cpi	r24, 0x03	; 3
    4c3a:	09 f4       	brne	.+2      	; 0x4c3e <SendAdmin+0x6d8>
    4c3c:	40 cf       	rjmp	.-384    	; 0x4abe <SendAdmin+0x558>
			LCD_voidClearDisplay();
			break;
		}
	}

}
    4c3e:	ed 96       	adiw	r28, 0x3d	; 61
    4c40:	0f b6       	in	r0, 0x3f	; 63
    4c42:	f8 94       	cli
    4c44:	de bf       	out	0x3e, r29	; 62
    4c46:	0f be       	out	0x3f, r0	; 63
    4c48:	cd bf       	out	0x3d, r28	; 61
    4c4a:	cf 91       	pop	r28
    4c4c:	df 91       	pop	r29
    4c4e:	1f 91       	pop	r17
    4c50:	0f 91       	pop	r16
    4c52:	08 95       	ret

00004c54 <Admin>:

void Admin (void)
{
    4c54:	df 93       	push	r29
    4c56:	cf 93       	push	r28
    4c58:	cd b7       	in	r28, 0x3d	; 61
    4c5a:	de b7       	in	r29, 0x3e	; 62
    4c5c:	6c 97       	sbiw	r28, 0x1c	; 28
    4c5e:	0f b6       	in	r0, 0x3f	; 63
    4c60:	f8 94       	cli
    4c62:	de bf       	out	0x3e, r29	; 62
    4c64:	0f be       	out	0x3f, r0	; 63
    4c66:	cd bf       	out	0x3d, r28	; 61
    4c68:	e7 c0       	rjmp	.+462    	; 0x4e38 <Admin+0x1e4>
	while(Trys < 2)
	{
		Start();
    4c6a:	0e 94 20 2c 	call	0x5840	; 0x5840 <Start>
		do
		{
			PressedKey = KPD_u8GetPressKey();
    4c6e:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    4c72:	80 93 ed 01 	sts	0x01ED, r24
		}while(PressedKey == 255);
    4c76:	80 91 ed 01 	lds	r24, 0x01ED
    4c7a:	8f 3f       	cpi	r24, 0xFF	; 255
    4c7c:	c1 f3       	breq	.-16     	; 0x4c6e <Admin+0x1a>
		if(PressedKey >= 0 && PressedKey != 'C')
    4c7e:	80 91 ed 01 	lds	r24, 0x01ED
    4c82:	83 34       	cpi	r24, 0x43	; 67
    4c84:	99 f0       	breq	.+38     	; 0x4cac <Admin+0x58>
		{
			LCD_voidSendData('*');
    4c86:	8a e2       	ldi	r24, 0x2A	; 42
    4c88:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_voidSendData>
			UPass[Counter] = PressedKey;
    4c8c:	80 91 eb 01 	lds	r24, 0x01EB
    4c90:	88 2f       	mov	r24, r24
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	20 91 ed 01 	lds	r18, 0x01ED
    4c98:	fc 01       	movw	r30, r24
    4c9a:	ea 51       	subi	r30, 0x1A	; 26
    4c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c9e:	20 83       	st	Z, r18
			Counter++;
    4ca0:	80 91 eb 01 	lds	r24, 0x01EB
    4ca4:	8f 5f       	subi	r24, 0xFF	; 255
    4ca6:	80 93 eb 01 	sts	0x01EB, r24
    4caa:	c6 c0       	rjmp	.+396    	; 0x4e38 <Admin+0x1e4>
		}
		else if(PressedKey == 'C')
    4cac:	80 91 ed 01 	lds	r24, 0x01ED
    4cb0:	83 34       	cpi	r24, 0x43	; 67
    4cb2:	09 f0       	breq	.+2      	; 0x4cb6 <Admin+0x62>
    4cb4:	c1 c0       	rjmp	.+386    	; 0x4e38 <Admin+0x1e4>
		{
			if(Counter == Size)
    4cb6:	90 91 eb 01 	lds	r25, 0x01EB
    4cba:	80 91 cd 01 	lds	r24, 0x01CD
    4cbe:	98 17       	cp	r25, r24
    4cc0:	09 f0       	breq	.+2      	; 0x4cc4 <Admin+0x70>
    4cc2:	b8 c0       	rjmp	.+368    	; 0x4e34 <Admin+0x1e0>
			{
				for(LoopCounter = 0; LoopCounter < Size; LoopCounter++)
    4cc4:	10 92 ec 01 	sts	0x01EC, r1
    4cc8:	1c c0       	rjmp	.+56     	; 0x4d02 <Admin+0xae>
				{
					if(UPass[LoopCounter] == AdminPassword[LoopCounter])
    4cca:	80 91 ec 01 	lds	r24, 0x01EC
    4cce:	88 2f       	mov	r24, r24
    4cd0:	90 e0       	ldi	r25, 0x00	; 0
    4cd2:	fc 01       	movw	r30, r24
    4cd4:	ea 51       	subi	r30, 0x1A	; 26
    4cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    4cd8:	20 81       	ld	r18, Z
    4cda:	80 91 ec 01 	lds	r24, 0x01EC
    4cde:	88 2f       	mov	r24, r24
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	e8 53       	subi	r30, 0x38	; 56
    4ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ce8:	80 81       	ld	r24, Z
    4cea:	28 17       	cp	r18, r24
    4cec:	29 f4       	brne	.+10     	; 0x4cf8 <Admin+0xa4>
					{
						CheckCounter++;
    4cee:	80 91 ea 01 	lds	r24, 0x01EA
    4cf2:	8f 5f       	subi	r24, 0xFF	; 255
    4cf4:	80 93 ea 01 	sts	0x01EA, r24
		}
		else if(PressedKey == 'C')
		{
			if(Counter == Size)
			{
				for(LoopCounter = 0; LoopCounter < Size; LoopCounter++)
    4cf8:	80 91 ec 01 	lds	r24, 0x01EC
    4cfc:	8f 5f       	subi	r24, 0xFF	; 255
    4cfe:	80 93 ec 01 	sts	0x01EC, r24
    4d02:	90 91 ec 01 	lds	r25, 0x01EC
    4d06:	80 91 cd 01 	lds	r24, 0x01CD
    4d0a:	98 17       	cp	r25, r24
    4d0c:	f0 f2       	brcs	.-68     	; 0x4cca <Admin+0x76>
					if(UPass[LoopCounter] == AdminPassword[LoopCounter])
					{
						CheckCounter++;
					}
				}
				if(CheckCounter == Size)
    4d0e:	90 91 ea 01 	lds	r25, 0x01EA
    4d12:	80 91 cd 01 	lds	r24, 0x01CD
    4d16:	98 17       	cp	r25, r24
    4d18:	09 f0       	breq	.+2      	; 0x4d1c <Admin+0xc8>
    4d1a:	89 c0       	rjmp	.+274    	; 0x4e2e <Admin+0x1da>
				{
					LCD_voidClearDisplay();
    4d1c:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
					LCD_voidGotoXY(0, 0);
    4d20:	80 e0       	ldi	r24, 0x00	; 0
    4d22:	60 e0       	ldi	r22, 0x00	; 0
    4d24:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
					LCD_voidSendSrting("CORRECT PASS");
    4d28:	83 e6       	ldi	r24, 0x63	; 99
    4d2a:	91 e0       	ldi	r25, 0x01	; 1
    4d2c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
    4d30:	80 e0       	ldi	r24, 0x00	; 0
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	aa ef       	ldi	r26, 0xFA	; 250
    4d36:	b3 e4       	ldi	r27, 0x43	; 67
    4d38:	89 8f       	std	Y+25, r24	; 0x19
    4d3a:	9a 8f       	std	Y+26, r25	; 0x1a
    4d3c:	ab 8f       	std	Y+27, r26	; 0x1b
    4d3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d40:	69 8d       	ldd	r22, Y+25	; 0x19
    4d42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d48:	20 e0       	ldi	r18, 0x00	; 0
    4d4a:	30 e0       	ldi	r19, 0x00	; 0
    4d4c:	4a ef       	ldi	r20, 0xFA	; 250
    4d4e:	54 e4       	ldi	r21, 0x44	; 68
    4d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d54:	dc 01       	movw	r26, r24
    4d56:	cb 01       	movw	r24, r22
    4d58:	8d 8b       	std	Y+21, r24	; 0x15
    4d5a:	9e 8b       	std	Y+22, r25	; 0x16
    4d5c:	af 8b       	std	Y+23, r26	; 0x17
    4d5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d60:	6d 89       	ldd	r22, Y+21	; 0x15
    4d62:	7e 89       	ldd	r23, Y+22	; 0x16
    4d64:	8f 89       	ldd	r24, Y+23	; 0x17
    4d66:	98 8d       	ldd	r25, Y+24	; 0x18
    4d68:	20 e0       	ldi	r18, 0x00	; 0
    4d6a:	30 e0       	ldi	r19, 0x00	; 0
    4d6c:	40 e8       	ldi	r20, 0x80	; 128
    4d6e:	5f e3       	ldi	r21, 0x3F	; 63
    4d70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d74:	88 23       	and	r24, r24
    4d76:	2c f4       	brge	.+10     	; 0x4d82 <Admin+0x12e>
		__ticks = 1;
    4d78:	81 e0       	ldi	r24, 0x01	; 1
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	9c 8b       	std	Y+20, r25	; 0x14
    4d7e:	8b 8b       	std	Y+19, r24	; 0x13
    4d80:	3f c0       	rjmp	.+126    	; 0x4e00 <Admin+0x1ac>
	else if (__tmp > 65535)
    4d82:	6d 89       	ldd	r22, Y+21	; 0x15
    4d84:	7e 89       	ldd	r23, Y+22	; 0x16
    4d86:	8f 89       	ldd	r24, Y+23	; 0x17
    4d88:	98 8d       	ldd	r25, Y+24	; 0x18
    4d8a:	20 e0       	ldi	r18, 0x00	; 0
    4d8c:	3f ef       	ldi	r19, 0xFF	; 255
    4d8e:	4f e7       	ldi	r20, 0x7F	; 127
    4d90:	57 e4       	ldi	r21, 0x47	; 71
    4d92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d96:	18 16       	cp	r1, r24
    4d98:	4c f5       	brge	.+82     	; 0x4dec <Admin+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d9a:	69 8d       	ldd	r22, Y+25	; 0x19
    4d9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4da0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4da2:	20 e0       	ldi	r18, 0x00	; 0
    4da4:	30 e0       	ldi	r19, 0x00	; 0
    4da6:	40 e2       	ldi	r20, 0x20	; 32
    4da8:	51 e4       	ldi	r21, 0x41	; 65
    4daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dae:	dc 01       	movw	r26, r24
    4db0:	cb 01       	movw	r24, r22
    4db2:	bc 01       	movw	r22, r24
    4db4:	cd 01       	movw	r24, r26
    4db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dba:	dc 01       	movw	r26, r24
    4dbc:	cb 01       	movw	r24, r22
    4dbe:	9c 8b       	std	Y+20, r25	; 0x14
    4dc0:	8b 8b       	std	Y+19, r24	; 0x13
    4dc2:	0f c0       	rjmp	.+30     	; 0x4de2 <Admin+0x18e>
    4dc4:	88 ec       	ldi	r24, 0xC8	; 200
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	9a 8b       	std	Y+18, r25	; 0x12
    4dca:	89 8b       	std	Y+17, r24	; 0x11
    4dcc:	89 89       	ldd	r24, Y+17	; 0x11
    4dce:	9a 89       	ldd	r25, Y+18	; 0x12
    4dd0:	01 97       	sbiw	r24, 0x01	; 1
    4dd2:	f1 f7       	brne	.-4      	; 0x4dd0 <Admin+0x17c>
    4dd4:	9a 8b       	std	Y+18, r25	; 0x12
    4dd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dd8:	8b 89       	ldd	r24, Y+19	; 0x13
    4dda:	9c 89       	ldd	r25, Y+20	; 0x14
    4ddc:	01 97       	sbiw	r24, 0x01	; 1
    4dde:	9c 8b       	std	Y+20, r25	; 0x14
    4de0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4de2:	8b 89       	ldd	r24, Y+19	; 0x13
    4de4:	9c 89       	ldd	r25, Y+20	; 0x14
    4de6:	00 97       	sbiw	r24, 0x00	; 0
    4de8:	69 f7       	brne	.-38     	; 0x4dc4 <Admin+0x170>
    4dea:	14 c0       	rjmp	.+40     	; 0x4e14 <Admin+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dec:	6d 89       	ldd	r22, Y+21	; 0x15
    4dee:	7e 89       	ldd	r23, Y+22	; 0x16
    4df0:	8f 89       	ldd	r24, Y+23	; 0x17
    4df2:	98 8d       	ldd	r25, Y+24	; 0x18
    4df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4df8:	dc 01       	movw	r26, r24
    4dfa:	cb 01       	movw	r24, r22
    4dfc:	9c 8b       	std	Y+20, r25	; 0x14
    4dfe:	8b 8b       	std	Y+19, r24	; 0x13
    4e00:	8b 89       	ldd	r24, Y+19	; 0x13
    4e02:	9c 89       	ldd	r25, Y+20	; 0x14
    4e04:	98 8b       	std	Y+16, r25	; 0x10
    4e06:	8f 87       	std	Y+15, r24	; 0x0f
    4e08:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e0a:	98 89       	ldd	r25, Y+16	; 0x10
    4e0c:	01 97       	sbiw	r24, 0x01	; 1
    4e0e:	f1 f7       	brne	.-4      	; 0x4e0c <Admin+0x1b8>
    4e10:	98 8b       	std	Y+16, r25	; 0x10
    4e12:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					LCD_voidClearDisplay();
    4e14:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
					Flag = 1;
    4e18:	81 e0       	ldi	r24, 0x01	; 1
    4e1a:	80 93 f0 01 	sts	0x01F0, r24
    4e1e:	02 c0       	rjmp	.+4      	; 0x4e24 <Admin+0x1d0>
					while(Flag == 1)
					{
						SendAdmin();
    4e20:	0e 94 b3 22 	call	0x4566	; 0x4566 <SendAdmin>
					LCD_voidGotoXY(0, 0);
					LCD_voidSendSrting("CORRECT PASS");
					_delay_ms(500);
					LCD_voidClearDisplay();
					Flag = 1;
					while(Flag == 1)
    4e24:	80 91 f0 01 	lds	r24, 0x01F0
    4e28:	81 30       	cpi	r24, 0x01	; 1
    4e2a:	d1 f3       	breq	.-12     	; 0x4e20 <Admin+0x1cc>
    4e2c:	05 c0       	rjmp	.+10     	; 0x4e38 <Admin+0x1e4>
						SendAdmin();
					}
				}
				else
				{
					Wrong();
    4e2e:	0e 94 ff 21 	call	0x43fe	; 0x43fe <Wrong>
    4e32:	02 c0       	rjmp	.+4      	; 0x4e38 <Admin+0x1e4>
				}
			}
			else
			{
				Wrong();
    4e34:	0e 94 ff 21 	call	0x43fe	; 0x43fe <Wrong>

}

void Admin (void)
{
	while(Trys < 2)
    4e38:	80 91 f1 01 	lds	r24, 0x01F1
    4e3c:	82 30       	cpi	r24, 0x02	; 2
    4e3e:	08 f4       	brcc	.+2      	; 0x4e42 <Admin+0x1ee>
    4e40:	14 cf       	rjmp	.-472    	; 0x4c6a <Admin+0x16>
    4e42:	9a c0       	rjmp	.+308    	; 0x4f78 <Admin+0x324>
			}
		}
	}
	while(Flag == 0)
	{
		LCD_voidClearDisplay();
    4e44:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
		LCD_voidGotoXY(0, 0);
    4e48:	80 e0       	ldi	r24, 0x00	; 0
    4e4a:	60 e0       	ldi	r22, 0x00	; 0
    4e4c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("MAX TRYS");
    4e50:	80 e7       	ldi	r24, 0x70	; 112
    4e52:	91 e0       	ldi	r25, 0x01	; 1
    4e54:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
		LCD_voidGotoXY(1, 0);
    4e58:	81 e0       	ldi	r24, 0x01	; 1
    4e5a:	60 e0       	ldi	r22, 0x00	; 0
    4e5c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendNumber(DownCount);
    4e60:	80 91 ce 01 	lds	r24, 0x01CE
    4e64:	88 2f       	mov	r24, r24
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <LCD_voidSendNumber>
    4e6c:	80 e0       	ldi	r24, 0x00	; 0
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	a8 ec       	ldi	r26, 0xC8	; 200
    4e72:	b2 e4       	ldi	r27, 0x42	; 66
    4e74:	8b 87       	std	Y+11, r24	; 0x0b
    4e76:	9c 87       	std	Y+12, r25	; 0x0c
    4e78:	ad 87       	std	Y+13, r26	; 0x0d
    4e7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e84:	20 e0       	ldi	r18, 0x00	; 0
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	4a ef       	ldi	r20, 0xFA	; 250
    4e8a:	54 e4       	ldi	r21, 0x44	; 68
    4e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e90:	dc 01       	movw	r26, r24
    4e92:	cb 01       	movw	r24, r22
    4e94:	8f 83       	std	Y+7, r24	; 0x07
    4e96:	98 87       	std	Y+8, r25	; 0x08
    4e98:	a9 87       	std	Y+9, r26	; 0x09
    4e9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    4e9e:	78 85       	ldd	r23, Y+8	; 0x08
    4ea0:	89 85       	ldd	r24, Y+9	; 0x09
    4ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea4:	20 e0       	ldi	r18, 0x00	; 0
    4ea6:	30 e0       	ldi	r19, 0x00	; 0
    4ea8:	40 e8       	ldi	r20, 0x80	; 128
    4eaa:	5f e3       	ldi	r21, 0x3F	; 63
    4eac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4eb0:	88 23       	and	r24, r24
    4eb2:	2c f4       	brge	.+10     	; 0x4ebe <Admin+0x26a>
		__ticks = 1;
    4eb4:	81 e0       	ldi	r24, 0x01	; 1
    4eb6:	90 e0       	ldi	r25, 0x00	; 0
    4eb8:	9e 83       	std	Y+6, r25	; 0x06
    4eba:	8d 83       	std	Y+5, r24	; 0x05
    4ebc:	3f c0       	rjmp	.+126    	; 0x4f3c <Admin+0x2e8>
	else if (__tmp > 65535)
    4ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    4ec0:	78 85       	ldd	r23, Y+8	; 0x08
    4ec2:	89 85       	ldd	r24, Y+9	; 0x09
    4ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ec6:	20 e0       	ldi	r18, 0x00	; 0
    4ec8:	3f ef       	ldi	r19, 0xFF	; 255
    4eca:	4f e7       	ldi	r20, 0x7F	; 127
    4ecc:	57 e4       	ldi	r21, 0x47	; 71
    4ece:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ed2:	18 16       	cp	r1, r24
    4ed4:	4c f5       	brge	.+82     	; 0x4f28 <Admin+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    4edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ede:	20 e0       	ldi	r18, 0x00	; 0
    4ee0:	30 e0       	ldi	r19, 0x00	; 0
    4ee2:	40 e2       	ldi	r20, 0x20	; 32
    4ee4:	51 e4       	ldi	r21, 0x41	; 65
    4ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eea:	dc 01       	movw	r26, r24
    4eec:	cb 01       	movw	r24, r22
    4eee:	bc 01       	movw	r22, r24
    4ef0:	cd 01       	movw	r24, r26
    4ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	cb 01       	movw	r24, r22
    4efa:	9e 83       	std	Y+6, r25	; 0x06
    4efc:	8d 83       	std	Y+5, r24	; 0x05
    4efe:	0f c0       	rjmp	.+30     	; 0x4f1e <Admin+0x2ca>
    4f00:	88 ec       	ldi	r24, 0xC8	; 200
    4f02:	90 e0       	ldi	r25, 0x00	; 0
    4f04:	9c 83       	std	Y+4, r25	; 0x04
    4f06:	8b 83       	std	Y+3, r24	; 0x03
    4f08:	8b 81       	ldd	r24, Y+3	; 0x03
    4f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f0c:	01 97       	sbiw	r24, 0x01	; 1
    4f0e:	f1 f7       	brne	.-4      	; 0x4f0c <Admin+0x2b8>
    4f10:	9c 83       	std	Y+4, r25	; 0x04
    4f12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f14:	8d 81       	ldd	r24, Y+5	; 0x05
    4f16:	9e 81       	ldd	r25, Y+6	; 0x06
    4f18:	01 97       	sbiw	r24, 0x01	; 1
    4f1a:	9e 83       	std	Y+6, r25	; 0x06
    4f1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f20:	9e 81       	ldd	r25, Y+6	; 0x06
    4f22:	00 97       	sbiw	r24, 0x00	; 0
    4f24:	69 f7       	brne	.-38     	; 0x4f00 <Admin+0x2ac>
    4f26:	14 c0       	rjmp	.+40     	; 0x4f50 <Admin+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f28:	6f 81       	ldd	r22, Y+7	; 0x07
    4f2a:	78 85       	ldd	r23, Y+8	; 0x08
    4f2c:	89 85       	ldd	r24, Y+9	; 0x09
    4f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f34:	dc 01       	movw	r26, r24
    4f36:	cb 01       	movw	r24, r22
    4f38:	9e 83       	std	Y+6, r25	; 0x06
    4f3a:	8d 83       	std	Y+5, r24	; 0x05
    4f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f40:	9a 83       	std	Y+2, r25	; 0x02
    4f42:	89 83       	std	Y+1, r24	; 0x01
    4f44:	89 81       	ldd	r24, Y+1	; 0x01
    4f46:	9a 81       	ldd	r25, Y+2	; 0x02
    4f48:	01 97       	sbiw	r24, 0x01	; 1
    4f4a:	f1 f7       	brne	.-4      	; 0x4f48 <Admin+0x2f4>
    4f4c:	9a 83       	std	Y+2, r25	; 0x02
    4f4e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		DownCount--;
    4f50:	80 91 ce 01 	lds	r24, 0x01CE
    4f54:	81 50       	subi	r24, 0x01	; 1
    4f56:	80 93 ce 01 	sts	0x01CE, r24
		if(DownCount == 0)
    4f5a:	80 91 ce 01 	lds	r24, 0x01CE
    4f5e:	88 23       	and	r24, r24
    4f60:	59 f4       	brne	.+22     	; 0x4f78 <Admin+0x324>
		{
			Trys = 0;
    4f62:	10 92 f1 01 	sts	0x01F1, r1
			DownCount = 10;
    4f66:	8a e0       	ldi	r24, 0x0A	; 10
    4f68:	80 93 ce 01 	sts	0x01CE, r24
			DownCount += 10;
    4f6c:	80 91 ce 01 	lds	r24, 0x01CE
    4f70:	86 5f       	subi	r24, 0xF6	; 246
    4f72:	80 93 ce 01 	sts	0x01CE, r24
    4f76:	05 c0       	rjmp	.+10     	; 0x4f82 <Admin+0x32e>
			{
				Wrong();
			}
		}
	}
	while(Flag == 0)
    4f78:	80 91 f0 01 	lds	r24, 0x01F0
    4f7c:	88 23       	and	r24, r24
    4f7e:	09 f4       	brne	.+2      	; 0x4f82 <Admin+0x32e>
    4f80:	61 cf       	rjmp	.-318    	; 0x4e44 <Admin+0x1f0>
			DownCount = 10;
			DownCount += 10;
			break;
		}
	}
	LCD_voidClearDisplay();
    4f82:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
	LCD_voidGotoXY(0, 0);
    4f86:	80 e0       	ldi	r24, 0x00	; 0
    4f88:	60 e0       	ldi	r22, 0x00	; 0
    4f8a:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendSrting("Enter Password");
    4f8e:	88 e9       	ldi	r24, 0x98	; 152
    4f90:	90 e0       	ldi	r25, 0x00	; 0
    4f92:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
	LCD_voidGotoXY(1, 0);
    4f96:	81 e0       	ldi	r24, 0x01	; 1
    4f98:	60 e0       	ldi	r22, 0x00	; 0
    4f9a:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
}
    4f9e:	6c 96       	adiw	r28, 0x1c	; 28
    4fa0:	0f b6       	in	r0, 0x3f	; 63
    4fa2:	f8 94       	cli
    4fa4:	de bf       	out	0x3e, r29	; 62
    4fa6:	0f be       	out	0x3f, r0	; 63
    4fa8:	cd bf       	out	0x3d, r28	; 61
    4faa:	cf 91       	pop	r28
    4fac:	df 91       	pop	r29
    4fae:	08 95       	ret

00004fb0 <User>:


void User (void)
{
    4fb0:	df 93       	push	r29
    4fb2:	cf 93       	push	r28
    4fb4:	cd b7       	in	r28, 0x3d	; 61
    4fb6:	de b7       	in	r29, 0x3e	; 62
    4fb8:	6c 97       	sbiw	r28, 0x1c	; 28
    4fba:	0f b6       	in	r0, 0x3f	; 63
    4fbc:	f8 94       	cli
    4fbe:	de bf       	out	0x3e, r29	; 62
    4fc0:	0f be       	out	0x3f, r0	; 63
    4fc2:	cd bf       	out	0x3d, r28	; 61
    4fc4:	e7 c0       	rjmp	.+462    	; 0x5194 <User+0x1e4>
	while(Trys < 2)
	{
		Start();
    4fc6:	0e 94 20 2c 	call	0x5840	; 0x5840 <Start>
		do
		{
			PressedKey = KPD_u8GetPressKey();
    4fca:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    4fce:	80 93 ed 01 	sts	0x01ED, r24
		}while(PressedKey == 255);
    4fd2:	80 91 ed 01 	lds	r24, 0x01ED
    4fd6:	8f 3f       	cpi	r24, 0xFF	; 255
    4fd8:	c1 f3       	breq	.-16     	; 0x4fca <User+0x1a>
		if(PressedKey >= 0 && PressedKey != 'C')
    4fda:	80 91 ed 01 	lds	r24, 0x01ED
    4fde:	83 34       	cpi	r24, 0x43	; 67
    4fe0:	99 f0       	breq	.+38     	; 0x5008 <User+0x58>
		{
			LCD_voidSendData('*');
    4fe2:	8a e2       	ldi	r24, 0x2A	; 42
    4fe4:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_voidSendData>
			UPass[Counter] = PressedKey;
    4fe8:	80 91 eb 01 	lds	r24, 0x01EB
    4fec:	88 2f       	mov	r24, r24
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	20 91 ed 01 	lds	r18, 0x01ED
    4ff4:	fc 01       	movw	r30, r24
    4ff6:	ea 51       	subi	r30, 0x1A	; 26
    4ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    4ffa:	20 83       	st	Z, r18
			Counter++;
    4ffc:	80 91 eb 01 	lds	r24, 0x01EB
    5000:	8f 5f       	subi	r24, 0xFF	; 255
    5002:	80 93 eb 01 	sts	0x01EB, r24
    5006:	c6 c0       	rjmp	.+396    	; 0x5194 <User+0x1e4>
		}
		else if(PressedKey == 'C')
    5008:	80 91 ed 01 	lds	r24, 0x01ED
    500c:	83 34       	cpi	r24, 0x43	; 67
    500e:	09 f0       	breq	.+2      	; 0x5012 <User+0x62>
    5010:	c1 c0       	rjmp	.+386    	; 0x5194 <User+0x1e4>
		{
			if(Counter == Size)
    5012:	90 91 eb 01 	lds	r25, 0x01EB
    5016:	80 91 cd 01 	lds	r24, 0x01CD
    501a:	98 17       	cp	r25, r24
    501c:	09 f0       	breq	.+2      	; 0x5020 <User+0x70>
    501e:	b8 c0       	rjmp	.+368    	; 0x5190 <User+0x1e0>
			{
				for(LoopCounter = 0; LoopCounter < Size; LoopCounter++)
    5020:	10 92 ec 01 	sts	0x01EC, r1
    5024:	1c c0       	rjmp	.+56     	; 0x505e <User+0xae>
				{
					if(UPass[LoopCounter] == UserPassword[LoopCounter])
    5026:	80 91 ec 01 	lds	r24, 0x01EC
    502a:	88 2f       	mov	r24, r24
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	fc 01       	movw	r30, r24
    5030:	ea 51       	subi	r30, 0x1A	; 26
    5032:	fe 4f       	sbci	r31, 0xFE	; 254
    5034:	20 81       	ld	r18, Z
    5036:	80 91 ec 01 	lds	r24, 0x01EC
    503a:	88 2f       	mov	r24, r24
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	fc 01       	movw	r30, r24
    5040:	ed 53       	subi	r30, 0x3D	; 61
    5042:	fe 4f       	sbci	r31, 0xFE	; 254
    5044:	80 81       	ld	r24, Z
    5046:	28 17       	cp	r18, r24
    5048:	29 f4       	brne	.+10     	; 0x5054 <User+0xa4>
					{
						CheckCounter++;
    504a:	80 91 ea 01 	lds	r24, 0x01EA
    504e:	8f 5f       	subi	r24, 0xFF	; 255
    5050:	80 93 ea 01 	sts	0x01EA, r24
		}
		else if(PressedKey == 'C')
		{
			if(Counter == Size)
			{
				for(LoopCounter = 0; LoopCounter < Size; LoopCounter++)
    5054:	80 91 ec 01 	lds	r24, 0x01EC
    5058:	8f 5f       	subi	r24, 0xFF	; 255
    505a:	80 93 ec 01 	sts	0x01EC, r24
    505e:	90 91 ec 01 	lds	r25, 0x01EC
    5062:	80 91 cd 01 	lds	r24, 0x01CD
    5066:	98 17       	cp	r25, r24
    5068:	f0 f2       	brcs	.-68     	; 0x5026 <User+0x76>
					if(UPass[LoopCounter] == UserPassword[LoopCounter])
					{
						CheckCounter++;
					}
				}
				if(CheckCounter == Size)
    506a:	90 91 ea 01 	lds	r25, 0x01EA
    506e:	80 91 cd 01 	lds	r24, 0x01CD
    5072:	98 17       	cp	r25, r24
    5074:	09 f0       	breq	.+2      	; 0x5078 <User+0xc8>
    5076:	89 c0       	rjmp	.+274    	; 0x518a <User+0x1da>
				{
					LCD_voidClearDisplay();
    5078:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
					LCD_voidGotoXY(0, 0);
    507c:	80 e0       	ldi	r24, 0x00	; 0
    507e:	60 e0       	ldi	r22, 0x00	; 0
    5080:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
					LCD_voidSendSrting("CORRECT PASS");
    5084:	83 e6       	ldi	r24, 0x63	; 99
    5086:	91 e0       	ldi	r25, 0x01	; 1
    5088:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
    508c:	80 e0       	ldi	r24, 0x00	; 0
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	aa ef       	ldi	r26, 0xFA	; 250
    5092:	b3 e4       	ldi	r27, 0x43	; 67
    5094:	89 8f       	std	Y+25, r24	; 0x19
    5096:	9a 8f       	std	Y+26, r25	; 0x1a
    5098:	ab 8f       	std	Y+27, r26	; 0x1b
    509a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    509c:	69 8d       	ldd	r22, Y+25	; 0x19
    509e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50a4:	20 e0       	ldi	r18, 0x00	; 0
    50a6:	30 e0       	ldi	r19, 0x00	; 0
    50a8:	4a ef       	ldi	r20, 0xFA	; 250
    50aa:	54 e4       	ldi	r21, 0x44	; 68
    50ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50b0:	dc 01       	movw	r26, r24
    50b2:	cb 01       	movw	r24, r22
    50b4:	8d 8b       	std	Y+21, r24	; 0x15
    50b6:	9e 8b       	std	Y+22, r25	; 0x16
    50b8:	af 8b       	std	Y+23, r26	; 0x17
    50ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    50bc:	6d 89       	ldd	r22, Y+21	; 0x15
    50be:	7e 89       	ldd	r23, Y+22	; 0x16
    50c0:	8f 89       	ldd	r24, Y+23	; 0x17
    50c2:	98 8d       	ldd	r25, Y+24	; 0x18
    50c4:	20 e0       	ldi	r18, 0x00	; 0
    50c6:	30 e0       	ldi	r19, 0x00	; 0
    50c8:	40 e8       	ldi	r20, 0x80	; 128
    50ca:	5f e3       	ldi	r21, 0x3F	; 63
    50cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    50d0:	88 23       	and	r24, r24
    50d2:	2c f4       	brge	.+10     	; 0x50de <User+0x12e>
		__ticks = 1;
    50d4:	81 e0       	ldi	r24, 0x01	; 1
    50d6:	90 e0       	ldi	r25, 0x00	; 0
    50d8:	9c 8b       	std	Y+20, r25	; 0x14
    50da:	8b 8b       	std	Y+19, r24	; 0x13
    50dc:	3f c0       	rjmp	.+126    	; 0x515c <User+0x1ac>
	else if (__tmp > 65535)
    50de:	6d 89       	ldd	r22, Y+21	; 0x15
    50e0:	7e 89       	ldd	r23, Y+22	; 0x16
    50e2:	8f 89       	ldd	r24, Y+23	; 0x17
    50e4:	98 8d       	ldd	r25, Y+24	; 0x18
    50e6:	20 e0       	ldi	r18, 0x00	; 0
    50e8:	3f ef       	ldi	r19, 0xFF	; 255
    50ea:	4f e7       	ldi	r20, 0x7F	; 127
    50ec:	57 e4       	ldi	r21, 0x47	; 71
    50ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    50f2:	18 16       	cp	r1, r24
    50f4:	4c f5       	brge	.+82     	; 0x5148 <User+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50f6:	69 8d       	ldd	r22, Y+25	; 0x19
    50f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50fe:	20 e0       	ldi	r18, 0x00	; 0
    5100:	30 e0       	ldi	r19, 0x00	; 0
    5102:	40 e2       	ldi	r20, 0x20	; 32
    5104:	51 e4       	ldi	r21, 0x41	; 65
    5106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    510a:	dc 01       	movw	r26, r24
    510c:	cb 01       	movw	r24, r22
    510e:	bc 01       	movw	r22, r24
    5110:	cd 01       	movw	r24, r26
    5112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5116:	dc 01       	movw	r26, r24
    5118:	cb 01       	movw	r24, r22
    511a:	9c 8b       	std	Y+20, r25	; 0x14
    511c:	8b 8b       	std	Y+19, r24	; 0x13
    511e:	0f c0       	rjmp	.+30     	; 0x513e <User+0x18e>
    5120:	88 ec       	ldi	r24, 0xC8	; 200
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	9a 8b       	std	Y+18, r25	; 0x12
    5126:	89 8b       	std	Y+17, r24	; 0x11
    5128:	89 89       	ldd	r24, Y+17	; 0x11
    512a:	9a 89       	ldd	r25, Y+18	; 0x12
    512c:	01 97       	sbiw	r24, 0x01	; 1
    512e:	f1 f7       	brne	.-4      	; 0x512c <User+0x17c>
    5130:	9a 8b       	std	Y+18, r25	; 0x12
    5132:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5134:	8b 89       	ldd	r24, Y+19	; 0x13
    5136:	9c 89       	ldd	r25, Y+20	; 0x14
    5138:	01 97       	sbiw	r24, 0x01	; 1
    513a:	9c 8b       	std	Y+20, r25	; 0x14
    513c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    513e:	8b 89       	ldd	r24, Y+19	; 0x13
    5140:	9c 89       	ldd	r25, Y+20	; 0x14
    5142:	00 97       	sbiw	r24, 0x00	; 0
    5144:	69 f7       	brne	.-38     	; 0x5120 <User+0x170>
    5146:	14 c0       	rjmp	.+40     	; 0x5170 <User+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5148:	6d 89       	ldd	r22, Y+21	; 0x15
    514a:	7e 89       	ldd	r23, Y+22	; 0x16
    514c:	8f 89       	ldd	r24, Y+23	; 0x17
    514e:	98 8d       	ldd	r25, Y+24	; 0x18
    5150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5154:	dc 01       	movw	r26, r24
    5156:	cb 01       	movw	r24, r22
    5158:	9c 8b       	std	Y+20, r25	; 0x14
    515a:	8b 8b       	std	Y+19, r24	; 0x13
    515c:	8b 89       	ldd	r24, Y+19	; 0x13
    515e:	9c 89       	ldd	r25, Y+20	; 0x14
    5160:	98 8b       	std	Y+16, r25	; 0x10
    5162:	8f 87       	std	Y+15, r24	; 0x0f
    5164:	8f 85       	ldd	r24, Y+15	; 0x0f
    5166:	98 89       	ldd	r25, Y+16	; 0x10
    5168:	01 97       	sbiw	r24, 0x01	; 1
    516a:	f1 f7       	brne	.-4      	; 0x5168 <User+0x1b8>
    516c:	98 8b       	std	Y+16, r25	; 0x10
    516e:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					LCD_voidClearDisplay();
    5170:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
					Flag = 1;
    5174:	81 e0       	ldi	r24, 0x01	; 1
    5176:	80 93 f0 01 	sts	0x01F0, r24
    517a:	02 c0       	rjmp	.+4      	; 0x5180 <User+0x1d0>
					while(Flag == 1)
					{

						ReceiveUser();
    517c:	0e 94 86 29 	call	0x530c	; 0x530c <ReceiveUser>
					LCD_voidGotoXY(0, 0);
					LCD_voidSendSrting("CORRECT PASS");
					_delay_ms(500);
					LCD_voidClearDisplay();
					Flag = 1;
					while(Flag == 1)
    5180:	80 91 f0 01 	lds	r24, 0x01F0
    5184:	81 30       	cpi	r24, 0x01	; 1
    5186:	d1 f3       	breq	.-12     	; 0x517c <User+0x1cc>
    5188:	05 c0       	rjmp	.+10     	; 0x5194 <User+0x1e4>
						ReceiveUser();
					}
				}
				else
				{
					Wrong();
    518a:	0e 94 ff 21 	call	0x43fe	; 0x43fe <Wrong>
    518e:	02 c0       	rjmp	.+4      	; 0x5194 <User+0x1e4>
				}
			}
			else
			{
				Wrong();
    5190:	0e 94 ff 21 	call	0x43fe	; 0x43fe <Wrong>
}


void User (void)
{
	while(Trys < 2)
    5194:	80 91 f1 01 	lds	r24, 0x01F1
    5198:	82 30       	cpi	r24, 0x02	; 2
    519a:	08 f4       	brcc	.+2      	; 0x519e <User+0x1ee>
    519c:	14 cf       	rjmp	.-472    	; 0x4fc6 <User+0x16>
    519e:	9a c0       	rjmp	.+308    	; 0x52d4 <User+0x324>
			}
		}
	}
	while(Flag == 0)
	{
		LCD_voidClearDisplay();
    51a0:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
		LCD_voidGotoXY(0, 0);
    51a4:	80 e0       	ldi	r24, 0x00	; 0
    51a6:	60 e0       	ldi	r22, 0x00	; 0
    51a8:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("MAX TRYS");
    51ac:	80 e7       	ldi	r24, 0x70	; 112
    51ae:	91 e0       	ldi	r25, 0x01	; 1
    51b0:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
		LCD_voidGotoXY(1, 0);
    51b4:	81 e0       	ldi	r24, 0x01	; 1
    51b6:	60 e0       	ldi	r22, 0x00	; 0
    51b8:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendNumber(DownCount);
    51bc:	80 91 ce 01 	lds	r24, 0x01CE
    51c0:	88 2f       	mov	r24, r24
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <LCD_voidSendNumber>
    51c8:	80 e0       	ldi	r24, 0x00	; 0
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	a8 ec       	ldi	r26, 0xC8	; 200
    51ce:	b2 e4       	ldi	r27, 0x42	; 66
    51d0:	8b 87       	std	Y+11, r24	; 0x0b
    51d2:	9c 87       	std	Y+12, r25	; 0x0c
    51d4:	ad 87       	std	Y+13, r26	; 0x0d
    51d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    51da:	7c 85       	ldd	r23, Y+12	; 0x0c
    51dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    51de:	9e 85       	ldd	r25, Y+14	; 0x0e
    51e0:	20 e0       	ldi	r18, 0x00	; 0
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	4a ef       	ldi	r20, 0xFA	; 250
    51e6:	54 e4       	ldi	r21, 0x44	; 68
    51e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ec:	dc 01       	movw	r26, r24
    51ee:	cb 01       	movw	r24, r22
    51f0:	8f 83       	std	Y+7, r24	; 0x07
    51f2:	98 87       	std	Y+8, r25	; 0x08
    51f4:	a9 87       	std	Y+9, r26	; 0x09
    51f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    51f8:	6f 81       	ldd	r22, Y+7	; 0x07
    51fa:	78 85       	ldd	r23, Y+8	; 0x08
    51fc:	89 85       	ldd	r24, Y+9	; 0x09
    51fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5200:	20 e0       	ldi	r18, 0x00	; 0
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	40 e8       	ldi	r20, 0x80	; 128
    5206:	5f e3       	ldi	r21, 0x3F	; 63
    5208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    520c:	88 23       	and	r24, r24
    520e:	2c f4       	brge	.+10     	; 0x521a <User+0x26a>
		__ticks = 1;
    5210:	81 e0       	ldi	r24, 0x01	; 1
    5212:	90 e0       	ldi	r25, 0x00	; 0
    5214:	9e 83       	std	Y+6, r25	; 0x06
    5216:	8d 83       	std	Y+5, r24	; 0x05
    5218:	3f c0       	rjmp	.+126    	; 0x5298 <User+0x2e8>
	else if (__tmp > 65535)
    521a:	6f 81       	ldd	r22, Y+7	; 0x07
    521c:	78 85       	ldd	r23, Y+8	; 0x08
    521e:	89 85       	ldd	r24, Y+9	; 0x09
    5220:	9a 85       	ldd	r25, Y+10	; 0x0a
    5222:	20 e0       	ldi	r18, 0x00	; 0
    5224:	3f ef       	ldi	r19, 0xFF	; 255
    5226:	4f e7       	ldi	r20, 0x7F	; 127
    5228:	57 e4       	ldi	r21, 0x47	; 71
    522a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    522e:	18 16       	cp	r1, r24
    5230:	4c f5       	brge	.+82     	; 0x5284 <User+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5232:	6b 85       	ldd	r22, Y+11	; 0x0b
    5234:	7c 85       	ldd	r23, Y+12	; 0x0c
    5236:	8d 85       	ldd	r24, Y+13	; 0x0d
    5238:	9e 85       	ldd	r25, Y+14	; 0x0e
    523a:	20 e0       	ldi	r18, 0x00	; 0
    523c:	30 e0       	ldi	r19, 0x00	; 0
    523e:	40 e2       	ldi	r20, 0x20	; 32
    5240:	51 e4       	ldi	r21, 0x41	; 65
    5242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5246:	dc 01       	movw	r26, r24
    5248:	cb 01       	movw	r24, r22
    524a:	bc 01       	movw	r22, r24
    524c:	cd 01       	movw	r24, r26
    524e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5252:	dc 01       	movw	r26, r24
    5254:	cb 01       	movw	r24, r22
    5256:	9e 83       	std	Y+6, r25	; 0x06
    5258:	8d 83       	std	Y+5, r24	; 0x05
    525a:	0f c0       	rjmp	.+30     	; 0x527a <User+0x2ca>
    525c:	88 ec       	ldi	r24, 0xC8	; 200
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	9c 83       	std	Y+4, r25	; 0x04
    5262:	8b 83       	std	Y+3, r24	; 0x03
    5264:	8b 81       	ldd	r24, Y+3	; 0x03
    5266:	9c 81       	ldd	r25, Y+4	; 0x04
    5268:	01 97       	sbiw	r24, 0x01	; 1
    526a:	f1 f7       	brne	.-4      	; 0x5268 <User+0x2b8>
    526c:	9c 83       	std	Y+4, r25	; 0x04
    526e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5270:	8d 81       	ldd	r24, Y+5	; 0x05
    5272:	9e 81       	ldd	r25, Y+6	; 0x06
    5274:	01 97       	sbiw	r24, 0x01	; 1
    5276:	9e 83       	std	Y+6, r25	; 0x06
    5278:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    527a:	8d 81       	ldd	r24, Y+5	; 0x05
    527c:	9e 81       	ldd	r25, Y+6	; 0x06
    527e:	00 97       	sbiw	r24, 0x00	; 0
    5280:	69 f7       	brne	.-38     	; 0x525c <User+0x2ac>
    5282:	14 c0       	rjmp	.+40     	; 0x52ac <User+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5284:	6f 81       	ldd	r22, Y+7	; 0x07
    5286:	78 85       	ldd	r23, Y+8	; 0x08
    5288:	89 85       	ldd	r24, Y+9	; 0x09
    528a:	9a 85       	ldd	r25, Y+10	; 0x0a
    528c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5290:	dc 01       	movw	r26, r24
    5292:	cb 01       	movw	r24, r22
    5294:	9e 83       	std	Y+6, r25	; 0x06
    5296:	8d 83       	std	Y+5, r24	; 0x05
    5298:	8d 81       	ldd	r24, Y+5	; 0x05
    529a:	9e 81       	ldd	r25, Y+6	; 0x06
    529c:	9a 83       	std	Y+2, r25	; 0x02
    529e:	89 83       	std	Y+1, r24	; 0x01
    52a0:	89 81       	ldd	r24, Y+1	; 0x01
    52a2:	9a 81       	ldd	r25, Y+2	; 0x02
    52a4:	01 97       	sbiw	r24, 0x01	; 1
    52a6:	f1 f7       	brne	.-4      	; 0x52a4 <User+0x2f4>
    52a8:	9a 83       	std	Y+2, r25	; 0x02
    52aa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		DownCount--;
    52ac:	80 91 ce 01 	lds	r24, 0x01CE
    52b0:	81 50       	subi	r24, 0x01	; 1
    52b2:	80 93 ce 01 	sts	0x01CE, r24
		if(DownCount == 0)
    52b6:	80 91 ce 01 	lds	r24, 0x01CE
    52ba:	88 23       	and	r24, r24
    52bc:	59 f4       	brne	.+22     	; 0x52d4 <User+0x324>
		{
			Trys = 0;
    52be:	10 92 f1 01 	sts	0x01F1, r1
			DownCount = 10;
    52c2:	8a e0       	ldi	r24, 0x0A	; 10
    52c4:	80 93 ce 01 	sts	0x01CE, r24
			DownCount += 10;
    52c8:	80 91 ce 01 	lds	r24, 0x01CE
    52cc:	86 5f       	subi	r24, 0xF6	; 246
    52ce:	80 93 ce 01 	sts	0x01CE, r24
    52d2:	05 c0       	rjmp	.+10     	; 0x52de <User+0x32e>
			{
				Wrong();
			}
		}
	}
	while(Flag == 0)
    52d4:	80 91 f0 01 	lds	r24, 0x01F0
    52d8:	88 23       	and	r24, r24
    52da:	09 f4       	brne	.+2      	; 0x52de <User+0x32e>
    52dc:	61 cf       	rjmp	.-318    	; 0x51a0 <User+0x1f0>
			DownCount = 10;
			DownCount += 10;
			break;
		}
	}
	LCD_voidClearDisplay();
    52de:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
	LCD_voidGotoXY(0, 0);
    52e2:	80 e0       	ldi	r24, 0x00	; 0
    52e4:	60 e0       	ldi	r22, 0x00	; 0
    52e6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendSrting("Enter Password");
    52ea:	88 e9       	ldi	r24, 0x98	; 152
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
	LCD_voidGotoXY(1, 0);
    52f2:	81 e0       	ldi	r24, 0x01	; 1
    52f4:	60 e0       	ldi	r22, 0x00	; 0
    52f6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
}
    52fa:	6c 96       	adiw	r28, 0x1c	; 28
    52fc:	0f b6       	in	r0, 0x3f	; 63
    52fe:	f8 94       	cli
    5300:	de bf       	out	0x3e, r29	; 62
    5302:	0f be       	out	0x3f, r0	; 63
    5304:	cd bf       	out	0x3d, r28	; 61
    5306:	cf 91       	pop	r28
    5308:	df 91       	pop	r29
    530a:	08 95       	ret

0000530c <ReceiveUser>:


void ReceiveUser (void)
{
    530c:	0f 93       	push	r16
    530e:	1f 93       	push	r17
    5310:	df 93       	push	r29
    5312:	cf 93       	push	r28
    5314:	cd b7       	in	r28, 0x3d	; 61
    5316:	de b7       	in	r29, 0x3e	; 62
    5318:	ae 97       	sbiw	r28, 0x2e	; 46
    531a:	0f b6       	in	r0, 0x3f	; 63
    531c:	f8 94       	cli
    531e:	de bf       	out	0x3e, r29	; 62
    5320:	0f be       	out	0x3f, r0	; 63
    5322:	cd bf       	out	0x3d, r28	; 61
	u8 LightValue = 0;
    5324:	1e a6       	std	Y+46, r1	; 0x2e
	u8 Local_u8Key = 0;
    5326:	1d a6       	std	Y+45, r1	; 0x2d
	u8 Key = 0;
    5328:	1c a6       	std	Y+44, r1	; 0x2c
	u8 Mapping_Light = 0;
    532a:	1b a6       	std	Y+43, r1	; 0x2b
	LCD_voidGotoXY(1, 0);
    532c:	81 e0       	ldi	r24, 0x01	; 1
    532e:	60 e0       	ldi	r22, 0x00	; 0
    5330:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendSrting("2-> LIGHT");
    5334:	89 e7       	ldi	r24, 0x79	; 121
    5336:	91 e0       	ldi	r25, 0x01	; 1
    5338:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
	LCD_voidGotoXY(0, 9);
    533c:	80 e0       	ldi	r24, 0x00	; 0
    533e:	69 e0       	ldi	r22, 0x09	; 9
    5340:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendSrting("1-> FAN");
    5344:	83 e8       	ldi	r24, 0x83	; 131
    5346:	91 e0       	ldi	r25, 0x01	; 1
    5348:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
	EXTI_voidSetCallBack(&Door);
    534c:	8e e4       	ldi	r24, 0x4E	; 78
    534e:	91 e2       	ldi	r25, 0x21	; 33
    5350:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <EXTI_voidSetCallBack>
	LCD_voidGotoXY(0, 0);
    5354:	80 e0       	ldi	r24, 0x00	; 0
    5356:	60 e0       	ldi	r22, 0x00	; 0
    5358:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	UART_TransmitData('T');
    535c:	84 e5       	ldi	r24, 0x54	; 84
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
	UART_TransmitData(U8TempValue);
    5364:	80 91 e5 01 	lds	r24, 0x01E5
    5368:	88 2f       	mov	r24, r24
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
	U8TempValue = 30;
    5370:	8e e1       	ldi	r24, 0x1E	; 30
    5372:	80 93 e5 01 	sts	0x01E5, r24
	LCD_voidSendSrting("TEMP: ");
    5376:	84 e0       	ldi	r24, 0x04	; 4
    5378:	91 e0       	ldi	r25, 0x01	; 1
    537a:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
	UART_TransmitData(Speed);
    537e:	80 91 f5 01 	lds	r24, 0x01F5
    5382:	88 2f       	mov	r24, r24
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
	LCD_voidGotoXY(0, 5);
    538a:	80 e0       	ldi	r24, 0x00	; 0
    538c:	65 e0       	ldi	r22, 0x05	; 5
    538e:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
	LCD_voidSendNumber(U8TempValue);
    5392:	80 91 e5 01 	lds	r24, 0x01E5
    5396:	88 2f       	mov	r24, r24
    5398:	90 e0       	ldi	r25, 0x00	; 0
    539a:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <LCD_voidSendNumber>

	do
	{
		Key = KPD_u8GetPressKey();
    539e:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    53a2:	8c a7       	std	Y+44, r24	; 0x2c
	}while(Key == 255);
    53a4:	8c a5       	ldd	r24, Y+44	; 0x2c
    53a6:	8f 3f       	cpi	r24, 0xFF	; 255
    53a8:	d1 f3       	breq	.-12     	; 0x539e <ReceiveUser+0x92>
    53aa:	7a c1       	rjmp	.+756    	; 0x56a0 <ReceiveUser+0x394>
	while(Key == 1)
	{
		LCD_voidClearDisplay();
    53ac:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
		Temp = 'F';
    53b0:	86 e4       	ldi	r24, 0x46	; 70
    53b2:	80 93 f6 01 	sts	0x01F6, r24
		UART_TransmitData(Temp);
    53b6:	80 91 f6 01 	lds	r24, 0x01F6
    53ba:	88 2f       	mov	r24, r24
    53bc:	90 e0       	ldi	r25, 0x00	; 0
    53be:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
		LCD_voidGotoXY(0, 0);
    53c2:	80 e0       	ldi	r24, 0x00	; 0
    53c4:	60 e0       	ldi	r22, 0x00	; 0
    53c6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("1-> HIGH");
    53ca:	87 e1       	ldi	r24, 0x17	; 23
    53cc:	91 e0       	ldi	r25, 0x01	; 1
    53ce:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
		LCD_voidGotoXY(0, 9);
    53d2:	80 e0       	ldi	r24, 0x00	; 0
    53d4:	69 e0       	ldi	r22, 0x09	; 9
    53d6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("2-> MID");
    53da:	80 e2       	ldi	r24, 0x20	; 32
    53dc:	91 e0       	ldi	r25, 0x01	; 1
    53de:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
		LCD_voidGotoXY(1, 0);
    53e2:	81 e0       	ldi	r24, 0x01	; 1
    53e4:	60 e0       	ldi	r22, 0x00	; 0
    53e6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("3-> LOW");
    53ea:	88 e2       	ldi	r24, 0x28	; 40
    53ec:	91 e0       	ldi	r25, 0x01	; 1
    53ee:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>

		do
		{

			Switchfan = KPD_u8GetPressKey();
    53f2:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    53f6:	80 93 f4 01 	sts	0x01F4, r24
		}while(Switchfan == 255);
    53fa:	80 91 f4 01 	lds	r24, 0x01F4
    53fe:	8f 3f       	cpi	r24, 0xFF	; 255
    5400:	c1 f3       	breq	.-16     	; 0x53f2 <ReceiveUser+0xe6>
		if(Switchfan == 1)
    5402:	80 91 f4 01 	lds	r24, 0x01F4
    5406:	81 30       	cpi	r24, 0x01	; 1
    5408:	a1 f4       	brne	.+40     	; 0x5432 <ReceiveUser+0x126>
		{
			LCD_voidClearDisplay();
    540a:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
			LCD_voidGotoXY(0, 0);
    540e:	80 e0       	ldi	r24, 0x00	; 0
    5410:	60 e0       	ldi	r22, 0x00	; 0
    5412:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("HIGH SPEED");
    5416:	80 e3       	ldi	r24, 0x30	; 48
    5418:	91 e0       	ldi	r25, 0x01	; 1
    541a:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
			Speed = 255;
    541e:	8f ef       	ldi	r24, 0xFF	; 255
    5420:	80 93 f5 01 	sts	0x01F5, r24
			UART_TransmitData(Speed);
    5424:	80 91 f5 01 	lds	r24, 0x01F5
    5428:	88 2f       	mov	r24, r24
    542a:	90 e0       	ldi	r25, 0x00	; 0
    542c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    5430:	a2 c0       	rjmp	.+324    	; 0x5576 <ReceiveUser+0x26a>
		}
		else if(Switchfan == 2)
    5432:	80 91 f4 01 	lds	r24, 0x01F4
    5436:	82 30       	cpi	r24, 0x02	; 2
    5438:	a1 f4       	brne	.+40     	; 0x5462 <ReceiveUser+0x156>
		{
			LCD_voidClearDisplay();
    543a:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
			LCD_voidGotoXY(0, 0);
    543e:	80 e0       	ldi	r24, 0x00	; 0
    5440:	60 e0       	ldi	r22, 0x00	; 0
    5442:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("MID SPEED");
    5446:	8b e3       	ldi	r24, 0x3B	; 59
    5448:	91 e0       	ldi	r25, 0x01	; 1
    544a:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
			Speed = 150;
    544e:	86 e9       	ldi	r24, 0x96	; 150
    5450:	80 93 f5 01 	sts	0x01F5, r24
			UART_TransmitData(Speed);
    5454:	80 91 f5 01 	lds	r24, 0x01F5
    5458:	88 2f       	mov	r24, r24
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    5460:	8a c0       	rjmp	.+276    	; 0x5576 <ReceiveUser+0x26a>
		}
		else if(Switchfan == 3)
    5462:	80 91 f4 01 	lds	r24, 0x01F4
    5466:	83 30       	cpi	r24, 0x03	; 3
    5468:	09 f0       	breq	.+2      	; 0x546c <ReceiveUser+0x160>
    546a:	85 c0       	rjmp	.+266    	; 0x5576 <ReceiveUser+0x26a>
		{
			LCD_voidClearDisplay();
    546c:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
			LCD_voidGotoXY(0, 0);
    5470:	80 e0       	ldi	r24, 0x00	; 0
    5472:	60 e0       	ldi	r22, 0x00	; 0
    5474:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("LOW SPEED");
    5478:	85 e4       	ldi	r24, 0x45	; 69
    547a:	91 e0       	ldi	r25, 0x01	; 1
    547c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
			Speed = 70;
    5480:	86 e4       	ldi	r24, 0x46	; 70
    5482:	80 93 f5 01 	sts	0x01F5, r24
    5486:	80 e0       	ldi	r24, 0x00	; 0
    5488:	90 e0       	ldi	r25, 0x00	; 0
    548a:	a8 ec       	ldi	r26, 0xC8	; 200
    548c:	b2 e4       	ldi	r27, 0x42	; 66
    548e:	8f a3       	std	Y+39, r24	; 0x27
    5490:	98 a7       	std	Y+40, r25	; 0x28
    5492:	a9 a7       	std	Y+41, r26	; 0x29
    5494:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5496:	6f a1       	ldd	r22, Y+39	; 0x27
    5498:	78 a5       	ldd	r23, Y+40	; 0x28
    549a:	89 a5       	ldd	r24, Y+41	; 0x29
    549c:	9a a5       	ldd	r25, Y+42	; 0x2a
    549e:	20 e0       	ldi	r18, 0x00	; 0
    54a0:	30 e0       	ldi	r19, 0x00	; 0
    54a2:	4a ef       	ldi	r20, 0xFA	; 250
    54a4:	54 e4       	ldi	r21, 0x44	; 68
    54a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54aa:	dc 01       	movw	r26, r24
    54ac:	cb 01       	movw	r24, r22
    54ae:	8b a3       	std	Y+35, r24	; 0x23
    54b0:	9c a3       	std	Y+36, r25	; 0x24
    54b2:	ad a3       	std	Y+37, r26	; 0x25
    54b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    54b6:	6b a1       	ldd	r22, Y+35	; 0x23
    54b8:	7c a1       	ldd	r23, Y+36	; 0x24
    54ba:	8d a1       	ldd	r24, Y+37	; 0x25
    54bc:	9e a1       	ldd	r25, Y+38	; 0x26
    54be:	20 e0       	ldi	r18, 0x00	; 0
    54c0:	30 e0       	ldi	r19, 0x00	; 0
    54c2:	40 e8       	ldi	r20, 0x80	; 128
    54c4:	5f e3       	ldi	r21, 0x3F	; 63
    54c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    54ca:	88 23       	and	r24, r24
    54cc:	2c f4       	brge	.+10     	; 0x54d8 <ReceiveUser+0x1cc>
		__ticks = 1;
    54ce:	81 e0       	ldi	r24, 0x01	; 1
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	9a a3       	std	Y+34, r25	; 0x22
    54d4:	89 a3       	std	Y+33, r24	; 0x21
    54d6:	3f c0       	rjmp	.+126    	; 0x5556 <ReceiveUser+0x24a>
	else if (__tmp > 65535)
    54d8:	6b a1       	ldd	r22, Y+35	; 0x23
    54da:	7c a1       	ldd	r23, Y+36	; 0x24
    54dc:	8d a1       	ldd	r24, Y+37	; 0x25
    54de:	9e a1       	ldd	r25, Y+38	; 0x26
    54e0:	20 e0       	ldi	r18, 0x00	; 0
    54e2:	3f ef       	ldi	r19, 0xFF	; 255
    54e4:	4f e7       	ldi	r20, 0x7F	; 127
    54e6:	57 e4       	ldi	r21, 0x47	; 71
    54e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54ec:	18 16       	cp	r1, r24
    54ee:	4c f5       	brge	.+82     	; 0x5542 <ReceiveUser+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54f0:	6f a1       	ldd	r22, Y+39	; 0x27
    54f2:	78 a5       	ldd	r23, Y+40	; 0x28
    54f4:	89 a5       	ldd	r24, Y+41	; 0x29
    54f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    54f8:	20 e0       	ldi	r18, 0x00	; 0
    54fa:	30 e0       	ldi	r19, 0x00	; 0
    54fc:	40 e2       	ldi	r20, 0x20	; 32
    54fe:	51 e4       	ldi	r21, 0x41	; 65
    5500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5504:	dc 01       	movw	r26, r24
    5506:	cb 01       	movw	r24, r22
    5508:	bc 01       	movw	r22, r24
    550a:	cd 01       	movw	r24, r26
    550c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5510:	dc 01       	movw	r26, r24
    5512:	cb 01       	movw	r24, r22
    5514:	9a a3       	std	Y+34, r25	; 0x22
    5516:	89 a3       	std	Y+33, r24	; 0x21
    5518:	0f c0       	rjmp	.+30     	; 0x5538 <ReceiveUser+0x22c>
    551a:	88 ec       	ldi	r24, 0xC8	; 200
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	98 a3       	std	Y+32, r25	; 0x20
    5520:	8f 8f       	std	Y+31, r24	; 0x1f
    5522:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5524:	98 a1       	ldd	r25, Y+32	; 0x20
    5526:	01 97       	sbiw	r24, 0x01	; 1
    5528:	f1 f7       	brne	.-4      	; 0x5526 <ReceiveUser+0x21a>
    552a:	98 a3       	std	Y+32, r25	; 0x20
    552c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    552e:	89 a1       	ldd	r24, Y+33	; 0x21
    5530:	9a a1       	ldd	r25, Y+34	; 0x22
    5532:	01 97       	sbiw	r24, 0x01	; 1
    5534:	9a a3       	std	Y+34, r25	; 0x22
    5536:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5538:	89 a1       	ldd	r24, Y+33	; 0x21
    553a:	9a a1       	ldd	r25, Y+34	; 0x22
    553c:	00 97       	sbiw	r24, 0x00	; 0
    553e:	69 f7       	brne	.-38     	; 0x551a <ReceiveUser+0x20e>
    5540:	14 c0       	rjmp	.+40     	; 0x556a <ReceiveUser+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5542:	6b a1       	ldd	r22, Y+35	; 0x23
    5544:	7c a1       	ldd	r23, Y+36	; 0x24
    5546:	8d a1       	ldd	r24, Y+37	; 0x25
    5548:	9e a1       	ldd	r25, Y+38	; 0x26
    554a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    554e:	dc 01       	movw	r26, r24
    5550:	cb 01       	movw	r24, r22
    5552:	9a a3       	std	Y+34, r25	; 0x22
    5554:	89 a3       	std	Y+33, r24	; 0x21
    5556:	89 a1       	ldd	r24, Y+33	; 0x21
    5558:	9a a1       	ldd	r25, Y+34	; 0x22
    555a:	9e 8f       	std	Y+30, r25	; 0x1e
    555c:	8d 8f       	std	Y+29, r24	; 0x1d
    555e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5560:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5562:	01 97       	sbiw	r24, 0x01	; 1
    5564:	f1 f7       	brne	.-4      	; 0x5562 <ReceiveUser+0x256>
    5566:	9e 8f       	std	Y+30, r25	; 0x1e
    5568:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			UART_TransmitData(Speed);
    556a:	80 91 f5 01 	lds	r24, 0x01F5
    556e:	88 2f       	mov	r24, r24
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    5576:	80 e0       	ldi	r24, 0x00	; 0
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	a8 ec       	ldi	r26, 0xC8	; 200
    557c:	b2 e4       	ldi	r27, 0x42	; 66
    557e:	89 8f       	std	Y+25, r24	; 0x19
    5580:	9a 8f       	std	Y+26, r25	; 0x1a
    5582:	ab 8f       	std	Y+27, r26	; 0x1b
    5584:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5586:	69 8d       	ldd	r22, Y+25	; 0x19
    5588:	7a 8d       	ldd	r23, Y+26	; 0x1a
    558a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    558c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    558e:	20 e0       	ldi	r18, 0x00	; 0
    5590:	30 e0       	ldi	r19, 0x00	; 0
    5592:	4a ef       	ldi	r20, 0xFA	; 250
    5594:	54 e4       	ldi	r21, 0x44	; 68
    5596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    559a:	dc 01       	movw	r26, r24
    559c:	cb 01       	movw	r24, r22
    559e:	8d 8b       	std	Y+21, r24	; 0x15
    55a0:	9e 8b       	std	Y+22, r25	; 0x16
    55a2:	af 8b       	std	Y+23, r26	; 0x17
    55a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    55a6:	6d 89       	ldd	r22, Y+21	; 0x15
    55a8:	7e 89       	ldd	r23, Y+22	; 0x16
    55aa:	8f 89       	ldd	r24, Y+23	; 0x17
    55ac:	98 8d       	ldd	r25, Y+24	; 0x18
    55ae:	20 e0       	ldi	r18, 0x00	; 0
    55b0:	30 e0       	ldi	r19, 0x00	; 0
    55b2:	40 e8       	ldi	r20, 0x80	; 128
    55b4:	5f e3       	ldi	r21, 0x3F	; 63
    55b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55ba:	88 23       	and	r24, r24
    55bc:	2c f4       	brge	.+10     	; 0x55c8 <ReceiveUser+0x2bc>
		__ticks = 1;
    55be:	81 e0       	ldi	r24, 0x01	; 1
    55c0:	90 e0       	ldi	r25, 0x00	; 0
    55c2:	9c 8b       	std	Y+20, r25	; 0x14
    55c4:	8b 8b       	std	Y+19, r24	; 0x13
    55c6:	3f c0       	rjmp	.+126    	; 0x5646 <ReceiveUser+0x33a>
	else if (__tmp > 65535)
    55c8:	6d 89       	ldd	r22, Y+21	; 0x15
    55ca:	7e 89       	ldd	r23, Y+22	; 0x16
    55cc:	8f 89       	ldd	r24, Y+23	; 0x17
    55ce:	98 8d       	ldd	r25, Y+24	; 0x18
    55d0:	20 e0       	ldi	r18, 0x00	; 0
    55d2:	3f ef       	ldi	r19, 0xFF	; 255
    55d4:	4f e7       	ldi	r20, 0x7F	; 127
    55d6:	57 e4       	ldi	r21, 0x47	; 71
    55d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55dc:	18 16       	cp	r1, r24
    55de:	4c f5       	brge	.+82     	; 0x5632 <ReceiveUser+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55e0:	69 8d       	ldd	r22, Y+25	; 0x19
    55e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55e8:	20 e0       	ldi	r18, 0x00	; 0
    55ea:	30 e0       	ldi	r19, 0x00	; 0
    55ec:	40 e2       	ldi	r20, 0x20	; 32
    55ee:	51 e4       	ldi	r21, 0x41	; 65
    55f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55f4:	dc 01       	movw	r26, r24
    55f6:	cb 01       	movw	r24, r22
    55f8:	bc 01       	movw	r22, r24
    55fa:	cd 01       	movw	r24, r26
    55fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5600:	dc 01       	movw	r26, r24
    5602:	cb 01       	movw	r24, r22
    5604:	9c 8b       	std	Y+20, r25	; 0x14
    5606:	8b 8b       	std	Y+19, r24	; 0x13
    5608:	0f c0       	rjmp	.+30     	; 0x5628 <ReceiveUser+0x31c>
    560a:	88 ec       	ldi	r24, 0xC8	; 200
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	9a 8b       	std	Y+18, r25	; 0x12
    5610:	89 8b       	std	Y+17, r24	; 0x11
    5612:	89 89       	ldd	r24, Y+17	; 0x11
    5614:	9a 89       	ldd	r25, Y+18	; 0x12
    5616:	01 97       	sbiw	r24, 0x01	; 1
    5618:	f1 f7       	brne	.-4      	; 0x5616 <ReceiveUser+0x30a>
    561a:	9a 8b       	std	Y+18, r25	; 0x12
    561c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    561e:	8b 89       	ldd	r24, Y+19	; 0x13
    5620:	9c 89       	ldd	r25, Y+20	; 0x14
    5622:	01 97       	sbiw	r24, 0x01	; 1
    5624:	9c 8b       	std	Y+20, r25	; 0x14
    5626:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5628:	8b 89       	ldd	r24, Y+19	; 0x13
    562a:	9c 89       	ldd	r25, Y+20	; 0x14
    562c:	00 97       	sbiw	r24, 0x00	; 0
    562e:	69 f7       	brne	.-38     	; 0x560a <ReceiveUser+0x2fe>
    5630:	14 c0       	rjmp	.+40     	; 0x565a <ReceiveUser+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5632:	6d 89       	ldd	r22, Y+21	; 0x15
    5634:	7e 89       	ldd	r23, Y+22	; 0x16
    5636:	8f 89       	ldd	r24, Y+23	; 0x17
    5638:	98 8d       	ldd	r25, Y+24	; 0x18
    563a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    563e:	dc 01       	movw	r26, r24
    5640:	cb 01       	movw	r24, r22
    5642:	9c 8b       	std	Y+20, r25	; 0x14
    5644:	8b 8b       	std	Y+19, r24	; 0x13
    5646:	8b 89       	ldd	r24, Y+19	; 0x13
    5648:	9c 89       	ldd	r25, Y+20	; 0x14
    564a:	98 8b       	std	Y+16, r25	; 0x10
    564c:	8f 87       	std	Y+15, r24	; 0x0f
    564e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5650:	98 89       	ldd	r25, Y+16	; 0x10
    5652:	01 97       	sbiw	r24, 0x01	; 1
    5654:	f1 f7       	brne	.-4      	; 0x5652 <ReceiveUser+0x346>
    5656:	98 8b       	std	Y+16, r25	; 0x10
    5658:	8f 87       	std	Y+15, r24	; 0x0f
		}
		_delay_ms(100);
		do
		{
			Key = KPD_u8GetPressKey();
    565a:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    565e:	8c a7       	std	Y+44, r24	; 0x2c
		}while(Key == 255);
    5660:	8c a5       	ldd	r24, Y+44	; 0x2c
    5662:	8f 3f       	cpi	r24, 0xFF	; 255
    5664:	d1 f3       	breq	.-12     	; 0x565a <ReceiveUser+0x34e>
		if(Key == 'O')
    5666:	8c a5       	ldd	r24, Y+44	; 0x2c
    5668:	8f 34       	cpi	r24, 0x4F	; 79
    566a:	d1 f4       	brne	.+52     	; 0x56a0 <ReceiveUser+0x394>
		{
			LCD_voidClearDisplay();
    566c:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
			LCD_voidGotoXY(0, 0);
    5670:	80 e0       	ldi	r24, 0x00	; 0
    5672:	60 e0       	ldi	r22, 0x00	; 0
    5674:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("1-> HIGH");
    5678:	87 e1       	ldi	r24, 0x17	; 23
    567a:	91 e0       	ldi	r25, 0x01	; 1
    567c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
			LCD_voidGotoXY(0, 9);
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	69 e0       	ldi	r22, 0x09	; 9
    5684:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("2-> MID");
    5688:	80 e2       	ldi	r24, 0x20	; 32
    568a:	91 e0       	ldi	r25, 0x01	; 1
    568c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
			LCD_voidGotoXY(1, 0);
    5690:	81 e0       	ldi	r24, 0x01	; 1
    5692:	60 e0       	ldi	r22, 0x00	; 0
    5694:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
			LCD_voidSendSrting("3-> LOW");
    5698:	88 e2       	ldi	r24, 0x28	; 40
    569a:	91 e0       	ldi	r25, 0x01	; 1
    569c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>

	do
	{
		Key = KPD_u8GetPressKey();
	}while(Key == 255);
	while(Key == 1)
    56a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    56a2:	81 30       	cpi	r24, 0x01	; 1
    56a4:	09 f4       	brne	.+2      	; 0x56a8 <ReceiveUser+0x39c>
    56a6:	82 ce       	rjmp	.-764    	; 0x53ac <ReceiveUser+0xa0>
    56a8:	bc c0       	rjmp	.+376    	; 0x5822 <ReceiveUser+0x516>
			LCD_voidSendSrting("3-> LOW");
		}
	}
	while(Key == 2)
	{
		LCD_voidClearDisplay();
    56aa:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
		Temp = 'L';
    56ae:	8c e4       	ldi	r24, 0x4C	; 76
    56b0:	80 93 f6 01 	sts	0x01F6, r24
		UART_TransmitData(Temp);
    56b4:	80 91 f6 01 	lds	r24, 0x01F6
    56b8:	88 2f       	mov	r24, r24
    56ba:	90 e0       	ldi	r25, 0x00	; 0
    56bc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
		Mapping_Light = ACD_voidStartConversionSynchronous(ADC_Channel_1);
    56c0:	81 e0       	ldi	r24, 0x01	; 1
    56c2:	0e 94 ab 13 	call	0x2756	; 0x2756 <ACD_voidStartConversionSynchronous>
    56c6:	8b a7       	std	Y+43, r24	; 0x2b
		LightValue = ADC_voidMapping(255, 0, 243, 2, Mapping_Light);
    56c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    56ca:	e8 2f       	mov	r30, r24
    56cc:	f0 e0       	ldi	r31, 0x00	; 0
    56ce:	8f ef       	ldi	r24, 0xFF	; 255
    56d0:	90 e0       	ldi	r25, 0x00	; 0
    56d2:	60 e0       	ldi	r22, 0x00	; 0
    56d4:	70 e0       	ldi	r23, 0x00	; 0
    56d6:	43 ef       	ldi	r20, 0xF3	; 243
    56d8:	50 e0       	ldi	r21, 0x00	; 0
    56da:	22 e0       	ldi	r18, 0x02	; 2
    56dc:	30 e0       	ldi	r19, 0x00	; 0
    56de:	8f 01       	movw	r16, r30
    56e0:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <ADC_voidMapping>
    56e4:	8e a7       	std	Y+46, r24	; 0x2e
		LCD_voidGotoXY(0, 0);
    56e6:	80 e0       	ldi	r24, 0x00	; 0
    56e8:	60 e0       	ldi	r22, 0x00	; 0
    56ea:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("LIGHT: ");
    56ee:	8f e4       	ldi	r24, 0x4F	; 79
    56f0:	91 e0       	ldi	r25, 0x01	; 1
    56f2:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
		LCD_voidGotoXY(0, 7);
    56f6:	80 e0       	ldi	r24, 0x00	; 0
    56f8:	67 e0       	ldi	r22, 0x07	; 7
    56fa:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendNumber(LightValue + 2);
    56fe:	8e a5       	ldd	r24, Y+46	; 0x2e
    5700:	88 2f       	mov	r24, r24
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	02 96       	adiw	r24, 0x02	; 2
    5706:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <LCD_voidSendNumber>
		UART_TransmitData(LightValue + 2);
    570a:	8e a5       	ldd	r24, Y+46	; 0x2e
    570c:	88 2f       	mov	r24, r24
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	02 96       	adiw	r24, 0x02	; 2
    5712:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
		LCD_voidGotoXY(1, 0);
    5716:	81 e0       	ldi	r24, 0x01	; 1
    5718:	60 e0       	ldi	r22, 0x00	; 0
    571a:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <LCD_voidGotoXY>
		LCD_voidSendSrting("TO SET -> 2");
    571e:	8b e8       	ldi	r24, 0x8B	; 139
    5720:	91 e0       	ldi	r25, 0x01	; 1
    5722:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidSendSrting>
    5726:	80 e0       	ldi	r24, 0x00	; 0
    5728:	90 e0       	ldi	r25, 0x00	; 0
    572a:	a8 ec       	ldi	r26, 0xC8	; 200
    572c:	b2 e4       	ldi	r27, 0x42	; 66
    572e:	8b 87       	std	Y+11, r24	; 0x0b
    5730:	9c 87       	std	Y+12, r25	; 0x0c
    5732:	ad 87       	std	Y+13, r26	; 0x0d
    5734:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5736:	6b 85       	ldd	r22, Y+11	; 0x0b
    5738:	7c 85       	ldd	r23, Y+12	; 0x0c
    573a:	8d 85       	ldd	r24, Y+13	; 0x0d
    573c:	9e 85       	ldd	r25, Y+14	; 0x0e
    573e:	20 e0       	ldi	r18, 0x00	; 0
    5740:	30 e0       	ldi	r19, 0x00	; 0
    5742:	4a ef       	ldi	r20, 0xFA	; 250
    5744:	54 e4       	ldi	r21, 0x44	; 68
    5746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    574a:	dc 01       	movw	r26, r24
    574c:	cb 01       	movw	r24, r22
    574e:	8f 83       	std	Y+7, r24	; 0x07
    5750:	98 87       	std	Y+8, r25	; 0x08
    5752:	a9 87       	std	Y+9, r26	; 0x09
    5754:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5756:	6f 81       	ldd	r22, Y+7	; 0x07
    5758:	78 85       	ldd	r23, Y+8	; 0x08
    575a:	89 85       	ldd	r24, Y+9	; 0x09
    575c:	9a 85       	ldd	r25, Y+10	; 0x0a
    575e:	20 e0       	ldi	r18, 0x00	; 0
    5760:	30 e0       	ldi	r19, 0x00	; 0
    5762:	40 e8       	ldi	r20, 0x80	; 128
    5764:	5f e3       	ldi	r21, 0x3F	; 63
    5766:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    576a:	88 23       	and	r24, r24
    576c:	2c f4       	brge	.+10     	; 0x5778 <ReceiveUser+0x46c>
		__ticks = 1;
    576e:	81 e0       	ldi	r24, 0x01	; 1
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	9e 83       	std	Y+6, r25	; 0x06
    5774:	8d 83       	std	Y+5, r24	; 0x05
    5776:	3f c0       	rjmp	.+126    	; 0x57f6 <ReceiveUser+0x4ea>
	else if (__tmp > 65535)
    5778:	6f 81       	ldd	r22, Y+7	; 0x07
    577a:	78 85       	ldd	r23, Y+8	; 0x08
    577c:	89 85       	ldd	r24, Y+9	; 0x09
    577e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5780:	20 e0       	ldi	r18, 0x00	; 0
    5782:	3f ef       	ldi	r19, 0xFF	; 255
    5784:	4f e7       	ldi	r20, 0x7F	; 127
    5786:	57 e4       	ldi	r21, 0x47	; 71
    5788:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    578c:	18 16       	cp	r1, r24
    578e:	4c f5       	brge	.+82     	; 0x57e2 <ReceiveUser+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5790:	6b 85       	ldd	r22, Y+11	; 0x0b
    5792:	7c 85       	ldd	r23, Y+12	; 0x0c
    5794:	8d 85       	ldd	r24, Y+13	; 0x0d
    5796:	9e 85       	ldd	r25, Y+14	; 0x0e
    5798:	20 e0       	ldi	r18, 0x00	; 0
    579a:	30 e0       	ldi	r19, 0x00	; 0
    579c:	40 e2       	ldi	r20, 0x20	; 32
    579e:	51 e4       	ldi	r21, 0x41	; 65
    57a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57a4:	dc 01       	movw	r26, r24
    57a6:	cb 01       	movw	r24, r22
    57a8:	bc 01       	movw	r22, r24
    57aa:	cd 01       	movw	r24, r26
    57ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57b0:	dc 01       	movw	r26, r24
    57b2:	cb 01       	movw	r24, r22
    57b4:	9e 83       	std	Y+6, r25	; 0x06
    57b6:	8d 83       	std	Y+5, r24	; 0x05
    57b8:	0f c0       	rjmp	.+30     	; 0x57d8 <ReceiveUser+0x4cc>
    57ba:	88 ec       	ldi	r24, 0xC8	; 200
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	9c 83       	std	Y+4, r25	; 0x04
    57c0:	8b 83       	std	Y+3, r24	; 0x03
    57c2:	8b 81       	ldd	r24, Y+3	; 0x03
    57c4:	9c 81       	ldd	r25, Y+4	; 0x04
    57c6:	01 97       	sbiw	r24, 0x01	; 1
    57c8:	f1 f7       	brne	.-4      	; 0x57c6 <ReceiveUser+0x4ba>
    57ca:	9c 83       	std	Y+4, r25	; 0x04
    57cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57ce:	8d 81       	ldd	r24, Y+5	; 0x05
    57d0:	9e 81       	ldd	r25, Y+6	; 0x06
    57d2:	01 97       	sbiw	r24, 0x01	; 1
    57d4:	9e 83       	std	Y+6, r25	; 0x06
    57d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57d8:	8d 81       	ldd	r24, Y+5	; 0x05
    57da:	9e 81       	ldd	r25, Y+6	; 0x06
    57dc:	00 97       	sbiw	r24, 0x00	; 0
    57de:	69 f7       	brne	.-38     	; 0x57ba <ReceiveUser+0x4ae>
    57e0:	14 c0       	rjmp	.+40     	; 0x580a <ReceiveUser+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57e2:	6f 81       	ldd	r22, Y+7	; 0x07
    57e4:	78 85       	ldd	r23, Y+8	; 0x08
    57e6:	89 85       	ldd	r24, Y+9	; 0x09
    57e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    57ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ee:	dc 01       	movw	r26, r24
    57f0:	cb 01       	movw	r24, r22
    57f2:	9e 83       	std	Y+6, r25	; 0x06
    57f4:	8d 83       	std	Y+5, r24	; 0x05
    57f6:	8d 81       	ldd	r24, Y+5	; 0x05
    57f8:	9e 81       	ldd	r25, Y+6	; 0x06
    57fa:	9a 83       	std	Y+2, r25	; 0x02
    57fc:	89 83       	std	Y+1, r24	; 0x01
    57fe:	89 81       	ldd	r24, Y+1	; 0x01
    5800:	9a 81       	ldd	r25, Y+2	; 0x02
    5802:	01 97       	sbiw	r24, 0x01	; 1
    5804:	f1 f7       	brne	.-4      	; 0x5802 <ReceiveUser+0x4f6>
    5806:	9a 83       	std	Y+2, r25	; 0x02
    5808:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		do
		{
			Key = KPD_u8GetPressKey();
    580a:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <KPD_u8GetPressKey>
    580e:	8c a7       	std	Y+44, r24	; 0x2c
		}while(Key == 255);
    5810:	8c a5       	ldd	r24, Y+44	; 0x2c
    5812:	8f 3f       	cpi	r24, 0xFF	; 255
    5814:	d1 f3       	breq	.-12     	; 0x580a <ReceiveUser+0x4fe>
		if(Key == 'O')
    5816:	8c a5       	ldd	r24, Y+44	; 0x2c
    5818:	8f 34       	cpi	r24, 0x4F	; 79
    581a:	19 f4       	brne	.+6      	; 0x5822 <ReceiveUser+0x516>
		{
			LCD_voidClearDisplay();
    581c:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCD_voidClearDisplay>
    5820:	04 c0       	rjmp	.+8      	; 0x582a <ReceiveUser+0x51e>
			LCD_voidSendSrting("2-> MID");
			LCD_voidGotoXY(1, 0);
			LCD_voidSendSrting("3-> LOW");
		}
	}
	while(Key == 2)
    5822:	8c a5       	ldd	r24, Y+44	; 0x2c
    5824:	82 30       	cpi	r24, 0x02	; 2
    5826:	09 f4       	brne	.+2      	; 0x582a <ReceiveUser+0x51e>
    5828:	40 cf       	rjmp	.-384    	; 0x56aa <ReceiveUser+0x39e>
		{
			LCD_voidClearDisplay();
			break;
		}
	}
}
    582a:	ae 96       	adiw	r28, 0x2e	; 46
    582c:	0f b6       	in	r0, 0x3f	; 63
    582e:	f8 94       	cli
    5830:	de bf       	out	0x3e, r29	; 62
    5832:	0f be       	out	0x3f, r0	; 63
    5834:	cd bf       	out	0x3d, r28	; 61
    5836:	cf 91       	pop	r28
    5838:	df 91       	pop	r29
    583a:	1f 91       	pop	r17
    583c:	0f 91       	pop	r16
    583e:	08 95       	ret

00005840 <Start>:

void Start (void)
{
    5840:	0f 93       	push	r16
    5842:	1f 93       	push	r17
    5844:	df 93       	push	r29
    5846:	cf 93       	push	r28
    5848:	cd b7       	in	r28, 0x3d	; 61
    584a:	de b7       	in	r29, 0x3e	; 62
    584c:	6c 97       	sbiw	r28, 0x1c	; 28
    584e:	0f b6       	in	r0, 0x3f	; 63
    5850:	f8 94       	cli
    5852:	de bf       	out	0x3e, r29	; 62
    5854:	0f be       	out	0x3f, r0	; 63
    5856:	cd bf       	out	0x3d, r28	; 61
	Temp = 'T';
    5858:	84 e5       	ldi	r24, 0x54	; 84
    585a:	80 93 f6 01 	sts	0x01F6, r24
	UART_TransmitData(Temp);
    585e:	80 91 f6 01 	lds	r24, 0x01F6
    5862:	88 2f       	mov	r24, r24
    5864:	90 e0       	ldi	r25, 0x00	; 0
    5866:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
	U8TempValue = LM35_u8GetTempratureSynchronous();
    586a:	0e 94 8f 1b 	call	0x371e	; 0x371e <LM35_u8GetTempratureSynchronous>
    586e:	80 93 e5 01 	sts	0x01E5, r24
	UART_TransmitData(U8TempValue);
    5872:	80 91 e5 01 	lds	r24, 0x01E5
    5876:	88 2f       	mov	r24, r24
    5878:	90 e0       	ldi	r25, 0x00	; 0
    587a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
	if(U8TempValue < 25)
    587e:	80 91 e5 01 	lds	r24, 0x01E5
    5882:	89 31       	cpi	r24, 0x19	; 25
    5884:	50 f4       	brcc	.+20     	; 0x589a <Start+0x5a>
	{
		Speed = 20;
    5886:	84 e1       	ldi	r24, 0x14	; 20
    5888:	80 93 f5 01 	sts	0x01F5, r24
		UART_TransmitData(Speed);
    588c:	80 91 f5 01 	lds	r24, 0x01F5
    5890:	88 2f       	mov	r24, r24
    5892:	90 e0       	ldi	r25, 0x00	; 0
    5894:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    5898:	31 c0       	rjmp	.+98     	; 0x58fc <Start+0xbc>
	}
	else if(U8TempValue >= 25 &&  U8TempValue < 30)
    589a:	80 91 e5 01 	lds	r24, 0x01E5
    589e:	89 31       	cpi	r24, 0x19	; 25
    58a0:	70 f0       	brcs	.+28     	; 0x58be <Start+0x7e>
    58a2:	80 91 e5 01 	lds	r24, 0x01E5
    58a6:	8e 31       	cpi	r24, 0x1E	; 30
    58a8:	50 f4       	brcc	.+20     	; 0x58be <Start+0x7e>
	{
		Speed = 70;
    58aa:	86 e4       	ldi	r24, 0x46	; 70
    58ac:	80 93 f5 01 	sts	0x01F5, r24
		UART_TransmitData(Speed);
    58b0:	80 91 f5 01 	lds	r24, 0x01F5
    58b4:	88 2f       	mov	r24, r24
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    58bc:	1f c0       	rjmp	.+62     	; 0x58fc <Start+0xbc>
	}
	else if(U8TempValue >= 30 && U8TempValue < 35)
    58be:	80 91 e5 01 	lds	r24, 0x01E5
    58c2:	8e 31       	cpi	r24, 0x1E	; 30
    58c4:	70 f0       	brcs	.+28     	; 0x58e2 <Start+0xa2>
    58c6:	80 91 e5 01 	lds	r24, 0x01E5
    58ca:	83 32       	cpi	r24, 0x23	; 35
    58cc:	50 f4       	brcc	.+20     	; 0x58e2 <Start+0xa2>
	{
		Speed = 150;
    58ce:	86 e9       	ldi	r24, 0x96	; 150
    58d0:	80 93 f5 01 	sts	0x01F5, r24
		UART_TransmitData(Speed);
    58d4:	80 91 f5 01 	lds	r24, 0x01F5
    58d8:	88 2f       	mov	r24, r24
    58da:	90 e0       	ldi	r25, 0x00	; 0
    58dc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    58e0:	0d c0       	rjmp	.+26     	; 0x58fc <Start+0xbc>
	}
	else if(U8TempValue >= 35)
    58e2:	80 91 e5 01 	lds	r24, 0x01E5
    58e6:	83 32       	cpi	r24, 0x23	; 35
    58e8:	48 f0       	brcs	.+18     	; 0x58fc <Start+0xbc>
	{
		Speed = 255;
    58ea:	8f ef       	ldi	r24, 0xFF	; 255
    58ec:	80 93 f5 01 	sts	0x01F5, r24
		UART_TransmitData(Speed);
    58f0:	80 91 f5 01 	lds	r24, 0x01F5
    58f4:	88 2f       	mov	r24, r24
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    58fc:	80 e0       	ldi	r24, 0x00	; 0
    58fe:	90 e0       	ldi	r25, 0x00	; 0
    5900:	a0 e2       	ldi	r26, 0x20	; 32
    5902:	b1 e4       	ldi	r27, 0x41	; 65
    5904:	89 8f       	std	Y+25, r24	; 0x19
    5906:	9a 8f       	std	Y+26, r25	; 0x1a
    5908:	ab 8f       	std	Y+27, r26	; 0x1b
    590a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    590c:	69 8d       	ldd	r22, Y+25	; 0x19
    590e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5912:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5914:	20 e0       	ldi	r18, 0x00	; 0
    5916:	30 e0       	ldi	r19, 0x00	; 0
    5918:	4a ef       	ldi	r20, 0xFA	; 250
    591a:	54 e4       	ldi	r21, 0x44	; 68
    591c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	8d 8b       	std	Y+21, r24	; 0x15
    5926:	9e 8b       	std	Y+22, r25	; 0x16
    5928:	af 8b       	std	Y+23, r26	; 0x17
    592a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    592c:	6d 89       	ldd	r22, Y+21	; 0x15
    592e:	7e 89       	ldd	r23, Y+22	; 0x16
    5930:	8f 89       	ldd	r24, Y+23	; 0x17
    5932:	98 8d       	ldd	r25, Y+24	; 0x18
    5934:	20 e0       	ldi	r18, 0x00	; 0
    5936:	30 e0       	ldi	r19, 0x00	; 0
    5938:	40 e8       	ldi	r20, 0x80	; 128
    593a:	5f e3       	ldi	r21, 0x3F	; 63
    593c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5940:	88 23       	and	r24, r24
    5942:	2c f4       	brge	.+10     	; 0x594e <Start+0x10e>
		__ticks = 1;
    5944:	81 e0       	ldi	r24, 0x01	; 1
    5946:	90 e0       	ldi	r25, 0x00	; 0
    5948:	9c 8b       	std	Y+20, r25	; 0x14
    594a:	8b 8b       	std	Y+19, r24	; 0x13
    594c:	3f c0       	rjmp	.+126    	; 0x59cc <Start+0x18c>
	else if (__tmp > 65535)
    594e:	6d 89       	ldd	r22, Y+21	; 0x15
    5950:	7e 89       	ldd	r23, Y+22	; 0x16
    5952:	8f 89       	ldd	r24, Y+23	; 0x17
    5954:	98 8d       	ldd	r25, Y+24	; 0x18
    5956:	20 e0       	ldi	r18, 0x00	; 0
    5958:	3f ef       	ldi	r19, 0xFF	; 255
    595a:	4f e7       	ldi	r20, 0x7F	; 127
    595c:	57 e4       	ldi	r21, 0x47	; 71
    595e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5962:	18 16       	cp	r1, r24
    5964:	4c f5       	brge	.+82     	; 0x59b8 <Start+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5966:	69 8d       	ldd	r22, Y+25	; 0x19
    5968:	7a 8d       	ldd	r23, Y+26	; 0x1a
    596a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    596c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    596e:	20 e0       	ldi	r18, 0x00	; 0
    5970:	30 e0       	ldi	r19, 0x00	; 0
    5972:	40 e2       	ldi	r20, 0x20	; 32
    5974:	51 e4       	ldi	r21, 0x41	; 65
    5976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    597a:	dc 01       	movw	r26, r24
    597c:	cb 01       	movw	r24, r22
    597e:	bc 01       	movw	r22, r24
    5980:	cd 01       	movw	r24, r26
    5982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5986:	dc 01       	movw	r26, r24
    5988:	cb 01       	movw	r24, r22
    598a:	9c 8b       	std	Y+20, r25	; 0x14
    598c:	8b 8b       	std	Y+19, r24	; 0x13
    598e:	0f c0       	rjmp	.+30     	; 0x59ae <Start+0x16e>
    5990:	88 ec       	ldi	r24, 0xC8	; 200
    5992:	90 e0       	ldi	r25, 0x00	; 0
    5994:	9a 8b       	std	Y+18, r25	; 0x12
    5996:	89 8b       	std	Y+17, r24	; 0x11
    5998:	89 89       	ldd	r24, Y+17	; 0x11
    599a:	9a 89       	ldd	r25, Y+18	; 0x12
    599c:	01 97       	sbiw	r24, 0x01	; 1
    599e:	f1 f7       	brne	.-4      	; 0x599c <Start+0x15c>
    59a0:	9a 8b       	std	Y+18, r25	; 0x12
    59a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59a4:	8b 89       	ldd	r24, Y+19	; 0x13
    59a6:	9c 89       	ldd	r25, Y+20	; 0x14
    59a8:	01 97       	sbiw	r24, 0x01	; 1
    59aa:	9c 8b       	std	Y+20, r25	; 0x14
    59ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59ae:	8b 89       	ldd	r24, Y+19	; 0x13
    59b0:	9c 89       	ldd	r25, Y+20	; 0x14
    59b2:	00 97       	sbiw	r24, 0x00	; 0
    59b4:	69 f7       	brne	.-38     	; 0x5990 <Start+0x150>
    59b6:	14 c0       	rjmp	.+40     	; 0x59e0 <Start+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59b8:	6d 89       	ldd	r22, Y+21	; 0x15
    59ba:	7e 89       	ldd	r23, Y+22	; 0x16
    59bc:	8f 89       	ldd	r24, Y+23	; 0x17
    59be:	98 8d       	ldd	r25, Y+24	; 0x18
    59c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59c4:	dc 01       	movw	r26, r24
    59c6:	cb 01       	movw	r24, r22
    59c8:	9c 8b       	std	Y+20, r25	; 0x14
    59ca:	8b 8b       	std	Y+19, r24	; 0x13
    59cc:	8b 89       	ldd	r24, Y+19	; 0x13
    59ce:	9c 89       	ldd	r25, Y+20	; 0x14
    59d0:	98 8b       	std	Y+16, r25	; 0x10
    59d2:	8f 87       	std	Y+15, r24	; 0x0f
    59d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    59d6:	98 89       	ldd	r25, Y+16	; 0x10
    59d8:	01 97       	sbiw	r24, 0x01	; 1
    59da:	f1 f7       	brne	.-4      	; 0x59d8 <Start+0x198>
    59dc:	98 8b       	std	Y+16, r25	; 0x10
    59de:	8f 87       	std	Y+15, r24	; 0x0f
	}
	_delay_ms(10);
	Temp = 'L';
    59e0:	8c e4       	ldi	r24, 0x4C	; 76
    59e2:	80 93 f6 01 	sts	0x01F6, r24
	UART_TransmitData(Temp);
    59e6:	80 91 f6 01 	lds	r24, 0x01F6
    59ea:	88 2f       	mov	r24, r24
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
	Mapping_Light = ACD_voidStartConversionSynchronous(ADC_Channel_1);
    59f2:	81 e0       	ldi	r24, 0x01	; 1
    59f4:	0e 94 ab 13 	call	0x2756	; 0x2756 <ACD_voidStartConversionSynchronous>
    59f8:	80 93 f3 01 	sts	0x01F3, r24
	LightValue = ADC_voidMapping(255, 0, 243, 2, Mapping_Light);
    59fc:	80 91 f3 01 	lds	r24, 0x01F3
    5a00:	e8 2f       	mov	r30, r24
    5a02:	f0 e0       	ldi	r31, 0x00	; 0
    5a04:	8f ef       	ldi	r24, 0xFF	; 255
    5a06:	90 e0       	ldi	r25, 0x00	; 0
    5a08:	60 e0       	ldi	r22, 0x00	; 0
    5a0a:	70 e0       	ldi	r23, 0x00	; 0
    5a0c:	43 ef       	ldi	r20, 0xF3	; 243
    5a0e:	50 e0       	ldi	r21, 0x00	; 0
    5a10:	22 e0       	ldi	r18, 0x02	; 2
    5a12:	30 e0       	ldi	r19, 0x00	; 0
    5a14:	8f 01       	movw	r16, r30
    5a16:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <ADC_voidMapping>
    5a1a:	80 93 f2 01 	sts	0x01F2, r24
	UART_TransmitData(LightValue);
    5a1e:	80 91 f2 01 	lds	r24, 0x01F2
    5a22:	88 2f       	mov	r24, r24
    5a24:	90 e0       	ldi	r25, 0x00	; 0
    5a26:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UART_TransmitData>
    5a2a:	80 e0       	ldi	r24, 0x00	; 0
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	a0 e2       	ldi	r26, 0x20	; 32
    5a30:	b1 e4       	ldi	r27, 0x41	; 65
    5a32:	8b 87       	std	Y+11, r24	; 0x0b
    5a34:	9c 87       	std	Y+12, r25	; 0x0c
    5a36:	ad 87       	std	Y+13, r26	; 0x0d
    5a38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a42:	20 e0       	ldi	r18, 0x00	; 0
    5a44:	30 e0       	ldi	r19, 0x00	; 0
    5a46:	4a ef       	ldi	r20, 0xFA	; 250
    5a48:	54 e4       	ldi	r21, 0x44	; 68
    5a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a4e:	dc 01       	movw	r26, r24
    5a50:	cb 01       	movw	r24, r22
    5a52:	8f 83       	std	Y+7, r24	; 0x07
    5a54:	98 87       	std	Y+8, r25	; 0x08
    5a56:	a9 87       	std	Y+9, r26	; 0x09
    5a58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    5a5c:	78 85       	ldd	r23, Y+8	; 0x08
    5a5e:	89 85       	ldd	r24, Y+9	; 0x09
    5a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a62:	20 e0       	ldi	r18, 0x00	; 0
    5a64:	30 e0       	ldi	r19, 0x00	; 0
    5a66:	40 e8       	ldi	r20, 0x80	; 128
    5a68:	5f e3       	ldi	r21, 0x3F	; 63
    5a6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a6e:	88 23       	and	r24, r24
    5a70:	2c f4       	brge	.+10     	; 0x5a7c <Start+0x23c>
		__ticks = 1;
    5a72:	81 e0       	ldi	r24, 0x01	; 1
    5a74:	90 e0       	ldi	r25, 0x00	; 0
    5a76:	9e 83       	std	Y+6, r25	; 0x06
    5a78:	8d 83       	std	Y+5, r24	; 0x05
    5a7a:	3f c0       	rjmp	.+126    	; 0x5afa <Start+0x2ba>
	else if (__tmp > 65535)
    5a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    5a7e:	78 85       	ldd	r23, Y+8	; 0x08
    5a80:	89 85       	ldd	r24, Y+9	; 0x09
    5a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a84:	20 e0       	ldi	r18, 0x00	; 0
    5a86:	3f ef       	ldi	r19, 0xFF	; 255
    5a88:	4f e7       	ldi	r20, 0x7F	; 127
    5a8a:	57 e4       	ldi	r21, 0x47	; 71
    5a8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5a90:	18 16       	cp	r1, r24
    5a92:	4c f5       	brge	.+82     	; 0x5ae6 <Start+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a94:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a96:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a9c:	20 e0       	ldi	r18, 0x00	; 0
    5a9e:	30 e0       	ldi	r19, 0x00	; 0
    5aa0:	40 e2       	ldi	r20, 0x20	; 32
    5aa2:	51 e4       	ldi	r21, 0x41	; 65
    5aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5aa8:	dc 01       	movw	r26, r24
    5aaa:	cb 01       	movw	r24, r22
    5aac:	bc 01       	movw	r22, r24
    5aae:	cd 01       	movw	r24, r26
    5ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ab4:	dc 01       	movw	r26, r24
    5ab6:	cb 01       	movw	r24, r22
    5ab8:	9e 83       	std	Y+6, r25	; 0x06
    5aba:	8d 83       	std	Y+5, r24	; 0x05
    5abc:	0f c0       	rjmp	.+30     	; 0x5adc <Start+0x29c>
    5abe:	88 ec       	ldi	r24, 0xC8	; 200
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	9c 83       	std	Y+4, r25	; 0x04
    5ac4:	8b 83       	std	Y+3, r24	; 0x03
    5ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    5aca:	01 97       	sbiw	r24, 0x01	; 1
    5acc:	f1 f7       	brne	.-4      	; 0x5aca <Start+0x28a>
    5ace:	9c 83       	std	Y+4, r25	; 0x04
    5ad0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    5ad6:	01 97       	sbiw	r24, 0x01	; 1
    5ad8:	9e 83       	std	Y+6, r25	; 0x06
    5ada:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5adc:	8d 81       	ldd	r24, Y+5	; 0x05
    5ade:	9e 81       	ldd	r25, Y+6	; 0x06
    5ae0:	00 97       	sbiw	r24, 0x00	; 0
    5ae2:	69 f7       	brne	.-38     	; 0x5abe <Start+0x27e>
    5ae4:	14 c0       	rjmp	.+40     	; 0x5b0e <Start+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    5ae8:	78 85       	ldd	r23, Y+8	; 0x08
    5aea:	89 85       	ldd	r24, Y+9	; 0x09
    5aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    5aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5af2:	dc 01       	movw	r26, r24
    5af4:	cb 01       	movw	r24, r22
    5af6:	9e 83       	std	Y+6, r25	; 0x06
    5af8:	8d 83       	std	Y+5, r24	; 0x05
    5afa:	8d 81       	ldd	r24, Y+5	; 0x05
    5afc:	9e 81       	ldd	r25, Y+6	; 0x06
    5afe:	9a 83       	std	Y+2, r25	; 0x02
    5b00:	89 83       	std	Y+1, r24	; 0x01
    5b02:	89 81       	ldd	r24, Y+1	; 0x01
    5b04:	9a 81       	ldd	r25, Y+2	; 0x02
    5b06:	01 97       	sbiw	r24, 0x01	; 1
    5b08:	f1 f7       	brne	.-4      	; 0x5b06 <Start+0x2c6>
    5b0a:	9a 83       	std	Y+2, r25	; 0x02
    5b0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    5b0e:	6c 96       	adiw	r28, 0x1c	; 28
    5b10:	0f b6       	in	r0, 0x3f	; 63
    5b12:	f8 94       	cli
    5b14:	de bf       	out	0x3e, r29	; 62
    5b16:	0f be       	out	0x3f, r0	; 63
    5b18:	cd bf       	out	0x3d, r28	; 61
    5b1a:	cf 91       	pop	r28
    5b1c:	df 91       	pop	r29
    5b1e:	1f 91       	pop	r17
    5b20:	0f 91       	pop	r16
    5b22:	08 95       	ret

00005b24 <__udivmodhi4>:
    5b24:	aa 1b       	sub	r26, r26
    5b26:	bb 1b       	sub	r27, r27
    5b28:	51 e1       	ldi	r21, 0x11	; 17
    5b2a:	07 c0       	rjmp	.+14     	; 0x5b3a <__udivmodhi4_ep>

00005b2c <__udivmodhi4_loop>:
    5b2c:	aa 1f       	adc	r26, r26
    5b2e:	bb 1f       	adc	r27, r27
    5b30:	a6 17       	cp	r26, r22
    5b32:	b7 07       	cpc	r27, r23
    5b34:	10 f0       	brcs	.+4      	; 0x5b3a <__udivmodhi4_ep>
    5b36:	a6 1b       	sub	r26, r22
    5b38:	b7 0b       	sbc	r27, r23

00005b3a <__udivmodhi4_ep>:
    5b3a:	88 1f       	adc	r24, r24
    5b3c:	99 1f       	adc	r25, r25
    5b3e:	5a 95       	dec	r21
    5b40:	a9 f7       	brne	.-22     	; 0x5b2c <__udivmodhi4_loop>
    5b42:	80 95       	com	r24
    5b44:	90 95       	com	r25
    5b46:	bc 01       	movw	r22, r24
    5b48:	cd 01       	movw	r24, r26
    5b4a:	08 95       	ret

00005b4c <__prologue_saves__>:
    5b4c:	2f 92       	push	r2
    5b4e:	3f 92       	push	r3
    5b50:	4f 92       	push	r4
    5b52:	5f 92       	push	r5
    5b54:	6f 92       	push	r6
    5b56:	7f 92       	push	r7
    5b58:	8f 92       	push	r8
    5b5a:	9f 92       	push	r9
    5b5c:	af 92       	push	r10
    5b5e:	bf 92       	push	r11
    5b60:	cf 92       	push	r12
    5b62:	df 92       	push	r13
    5b64:	ef 92       	push	r14
    5b66:	ff 92       	push	r15
    5b68:	0f 93       	push	r16
    5b6a:	1f 93       	push	r17
    5b6c:	cf 93       	push	r28
    5b6e:	df 93       	push	r29
    5b70:	cd b7       	in	r28, 0x3d	; 61
    5b72:	de b7       	in	r29, 0x3e	; 62
    5b74:	ca 1b       	sub	r28, r26
    5b76:	db 0b       	sbc	r29, r27
    5b78:	0f b6       	in	r0, 0x3f	; 63
    5b7a:	f8 94       	cli
    5b7c:	de bf       	out	0x3e, r29	; 62
    5b7e:	0f be       	out	0x3f, r0	; 63
    5b80:	cd bf       	out	0x3d, r28	; 61
    5b82:	09 94       	ijmp

00005b84 <__epilogue_restores__>:
    5b84:	2a 88       	ldd	r2, Y+18	; 0x12
    5b86:	39 88       	ldd	r3, Y+17	; 0x11
    5b88:	48 88       	ldd	r4, Y+16	; 0x10
    5b8a:	5f 84       	ldd	r5, Y+15	; 0x0f
    5b8c:	6e 84       	ldd	r6, Y+14	; 0x0e
    5b8e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5b90:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b92:	9b 84       	ldd	r9, Y+11	; 0x0b
    5b94:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b96:	b9 84       	ldd	r11, Y+9	; 0x09
    5b98:	c8 84       	ldd	r12, Y+8	; 0x08
    5b9a:	df 80       	ldd	r13, Y+7	; 0x07
    5b9c:	ee 80       	ldd	r14, Y+6	; 0x06
    5b9e:	fd 80       	ldd	r15, Y+5	; 0x05
    5ba0:	0c 81       	ldd	r16, Y+4	; 0x04
    5ba2:	1b 81       	ldd	r17, Y+3	; 0x03
    5ba4:	aa 81       	ldd	r26, Y+2	; 0x02
    5ba6:	b9 81       	ldd	r27, Y+1	; 0x01
    5ba8:	ce 0f       	add	r28, r30
    5baa:	d1 1d       	adc	r29, r1
    5bac:	0f b6       	in	r0, 0x3f	; 63
    5bae:	f8 94       	cli
    5bb0:	de bf       	out	0x3e, r29	; 62
    5bb2:	0f be       	out	0x3f, r0	; 63
    5bb4:	cd bf       	out	0x3d, r28	; 61
    5bb6:	ed 01       	movw	r28, r26
    5bb8:	08 95       	ret

00005bba <_exit>:
    5bba:	f8 94       	cli

00005bbc <__stop_program>:
    5bbc:	ff cf       	rjmp	.-2      	; 0x5bbc <__stop_program>
